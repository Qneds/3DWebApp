{"version":3,"sources":["utils/Frame.tsx","contexts/ColorModeContext.tsx","utils/GUI/GUIUtils.tsx","contexts/ModalSystemContext.ts","WebGL/WebGlUtils.ts","WebGL/Objects/BasicMeshes/MeshUtils.ts","WebGL/Objects/BasicMeshes/Circle.ts","WebGL/Objects/BasicMeshes/Cone.ts","WebGL/Objects/BasicMeshes/Cube.ts","WebGL/Objects/BasicMeshes/Cylinder.ts","WebGL/Objects/BasicMeshes/Torus.ts","components/mainNavBar/addObjects/AddObjectModal.tsx","WebGL/Listeners/WebGLEvent.ts","utils/RefreshEvent.ts","WebGL/State.ts","WebGL/utils.ts/Math.ts","WebGL/Objects/Transform.ts","WebGL/Raycast/RayCaster.ts","WebGL/Shaders/ShadersUniformLocations.ts","WebGL/Shaders/BasicShader.ts","WebGL/Objects/Material.ts","WebGL/utils.ts/stringUtils.ts","WebGL/Objects/Object3D.ts","WebGL/Objects/BasicMeshes/GeometryProvider.ts","WebGL/Objects/Mesh.ts","contexts/RefresherContext.ts","WebGL/Editor/FileParsers/ObjFormatParsingFunctions.ts","components/mainNavBar/import/ImportObj.tsx","components/mainNavBar/export/ExportToObj.tsx","utils/functions.ts","components/mainNavBar/export/ExportObjDropdown.tsx","components/mainNavBar/instructions/MainInstruction.tsx","components/mainNavBar/MainNavBar.tsx","contexts/EditModeContext.ts","WebGL/Camera/Camera.ts","WebGL/Listeners/KeyboardEvent.ts","WebGL/Listeners/MouseEvent.ts","WebGL/Camera/CameraController.ts","WebGL/Raycast/RayCastUtils.ts","WebGL/Editor/Gizmos/GizmoUtils.ts","WebGL/Editor/Gizmos/Gizmo.ts","WebGL/Editor/Gizmos/GizmoManager.ts","WebGL/Editor/Gizmos/GizmoManipEvent.ts","WebGL/Shaders/ShaderUtils.ts","WebGL/Renderers/EditRenderer.ts","WebGL/Views/View.ts","utils/GUI/Panels.tsx","WebGL/Editor/Tools/ToolsProperties.tsx","WebGL/Editor/Tools/Tools.tsx","components/toolsWIndow/ToolStorage.ts","styles/jsStyles.ts","components/toolsWIndow/EditViewTools.tsx","components/toolsWIndow/MainViewTools.tsx","contexts/ModeContext.ts","components/toolsWIndow/ToolsManager.tsx","WebGL/Views/EditView.tsx","components/modeNavBar/ModeNavBar.tsx","WebGL/Renderers/StandardRenderer.ts","WebGL/Views/MainView.tsx","WebGL/Views/ViewManager.tsx","components/toolsWIndow/ToolsWindow.tsx","components/objectTreeNodeWIndow/treeComponents/NodeTypeIcon.tsx","components/objectTreeNodeWIndow/treeComponents/NodeItem.tsx","components/objectTreeNodeWIndow/treeComponents/DragPreview.tsx","components/objectTreeNodeWIndow/ObjectTreeNodeWindow.tsx","WebGL/WebGl.ts","WebGL/Listeners/CanvasEvent.ts","components/viewport/Viewport.tsx","components/objectPropertiesWindow/MaterialProps.tsx","components/objectPropertiesWindow/MeshProps.tsx","components/objectPropertiesWindow/ObjectDetailsProps.tsx","components/objectPropertiesWindow/ObjectPropertiesWindow.tsx","components/toolsPropertiesWindow/ToolsPropertiesWindow.tsx","components/footer/StatusFooter.tsx","components/Refresher.tsx","components/ModalSystem.tsx","components/Main.tsx","App.tsx","index.tsx"],"names":["Frame","props","borderChooser","bordersEnabled","backgroundColor","borderColor","borderWidth","style","borderStyle","borderTopWidth","test","borderRightWidth","borderBottomWidth","borderLeftWidth","children","injectStyle","colorMode","type","primaryColor","accentColor","ColorModeContext","createContext","GUIButton","buttonRef","useRef","useState","isActive","setIsActive","useEffect","undefined","active","Button","className","onClick","innerRef","marginRight","text","display","width","height","ico","GUIDropdown","dropdownOpen","setDropdownOpen","ButtonDropdown","isOpen","toggle","prevState","DropdownToggle","caret","DropdownMenu","MoveButton","RotateButton","ScaleButton","SubdivideButton","InputProperty","colorModeCtx","useContext","Input","color","disabled","secondaryColor","InputPropertyWithConfirm","onConfirm","CheckboxProperty","Checkbox","sx","SliderProperty","Slider","SliderWithValueProperty","bsSize","value","toString","marginLeft","ContainerWithRows","flexGrow","flexDirection","ContainerWithColumns","Disable","ModalSystemContext","WebGLU","gl","canvas","this","r","g","b","a","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","createBuffer","buffer","bindBuffer","ARRAY_BUFFER","factor","units","enable","POLYGON_OFFSET_FILL","polygonOffset","disable","data","bufferData","Float32Array","STATIC_DRAW","ELEMENT_ARRAY_BUFFER","Uint16Array","createShader","VERTEX_SHADER","FRAGMENT_SHADER","shader","source","shaderSource","compileShader","createProgram","program","attachShader","linkProgram","useProgram","attribute","getAttribLocation","enableVertexAttribArray","dimensions","vertexAttribPointer","FLOAT","location","vec3","uniform3fv","vec4","uniform4fv","uniform1f","uniform1i","matrix","uniformMatrix4fv","uniform","getUniformLocation","viewport","switchDepth","DEPTH_TEST","bindArrayBuffer","addArrayBufferData","unbindArrayBuffer","bindElementArrayBuffer","addElementArrayBufferData","unbindElementArrayBuffer","length","drawElements","UNSIGNED_SHORT","TRIANGLES","LINES","POINTS","drawArrays","Point","cords","point","vertexBuffer","recalculateBufferData","c","copy","p","raycaster","transformMatrix","pointMat","mat4","create","identity","translate","multiply","worldPoint","getTranslation","dir","getRay","getDirection","origin","getOrigin","tmp","targetOriginVector","sub","distanceFromOriginToHit","dot","tmp1","scale","getAreaRange","distance","use","enablePosition","drawArraysPoint","uploadDataToBuffer","fromValues","Edge","p1","p2","e","drawArraysEdge","worldP1","worldP2","getCords","dirPoints","originPoints","normalize","n","cross","diff","Math","abs","n2","distanceOnRay","pointOnLine","n1","add","edge","tmpP1","tmpP2","getPoints","Face","edges","pointsInEdges","processedInfoArr","Array","fill","prevProcessedNum","reduce","prev","curr","forEach","i","findP1","find","findP2","push","unshift","newProcessedLength","filter","info","vertices","vec","flat","drawArraysTriangle","generateVertexesArray","faceNormal","invTrans","invert","localRayOrigin","localRayDirection","negate","d","denominator","hitPoint","dot1","testSide","dot2","dot3","worldHitPoint","objToWorldMat","transformMat4","face","tmp2","cp1","cp2","points","map","pInE","p1I","indexOf","p2I","Circle","outerRadius","innerRadius","radialSegments","thetaStart","thetaLength","PI","faces","generateCircle","index","outerPsI","innerPsI","j","v","outerP","cos","sin","innerP","pa","pb","pc","pd","edgeAB","findEAB","shallowEqual","edgeBD","findEBD","edgeDA","findEDA","edgeBC","findEBC","edgeCD","findECD","CircleBuilder","Cone","radius","heightSegments","floor","generateTorso","generateBase","halfHeight","slice","center","x","outerEdge","foundE","l1","l2","indexArray","y","indexRow","theta","sinTheta","cosTheta","ConeBuilder","Cube","xHalfWidth","yHalfWidth","zHalfWidth","CubeBuilder","CubeInst","Cylinder","radiusTop","radiusBottom","openEnded","generateCap","top","sign","CylinderBuilder","Torus","tube","tubularSegments","arc","u","TorusBuilder","CIRCLE_BUILDER","CONE_BUILDER","CUBE_BUILDER","CYLINDER_BUILDER","TORUS_BUILDER","gt0ErrMsg","notIntErrMsg","extractValue","signalErr","setErrMsg","valueNum","parseFloat","isNaN","InputElement","FormGroup","Label","label","onChange","invalid","isInvalid","FormFeedback","msgIfInvalid","AddObjectModal","selectedMesh","setSelectedMesh","Form","name","target","currentBuilderRef","current","markError","renderBuilderProperties","CircleMeshProperties","initInnRadius","setInnerRadius","isInnerRadiusInvalid","setIsInnerRadiusInvalid","invalidMessageInnRad","setInvalidMessageInnRad","initOutRadius","setOuterRadius","isOuterRadiusInvalid","setIsOuterRadiusInvalid","invalidMessageOutRad","setInvalidMessageOutRad","initRadialSeg","numOfRadSeg","setNumOfRadSeg","isNumOfRadSegInvalid","setIsNumOfRadSegInvalid","invalidMessageNumRad","setInvalidMessageNumRad","setRadialSegments","event","fValue","Number","isInteger","ConeMeshProperties","initHeight","setHeight","isHeightInvalid","setIsHeightInvalid","invalidMessageHeight","setInvalidMessageHeight","initHeightSegments","setHeightSegments","isHeightSegmentsInvalid","setHeightSegmentsInvalid","invalidMessageHeightSegments","setInvalidMessageHeightSegments","initRadialSegments","initBaseRadius","baseRadius","setBaseRadius","isBaseRadiusInvalid","setBaseRadiusInvalid","invalidMessageBaseRadius","setInvalidMessageBaseRadius","setRadius","CubeMeshProperties","initXHalf","setXHalfWidth","isXHalfWidthInvalid","setIsXHalfWidthInvalid","invalidMessageXHalfWidth","setInvalidMessageXHalfWidth","initYHalf","setYHalfWidth","isYHalfWidthInvalid","setIsYHalfWidthInvalid","invalidMessageYHalfWidth","setInvalidMessageYHalfWidth","initZHalf","setZHalfWidth","isZHalfWidthInvalid","setIsZHalfWidthInvalid","invalidMessageZHalfWidth","setInvalidMessageZHalfWidth","CylinderMeshProperties","setIsHeightSegmentsInvalid","isRadialSegmentsInvalid","setIsRadialSegmentsInvalid","invalidMessageRadialSegments","setInvalidMessageRadialSegments","initRadiusTop","setRadiusTop","isRadiusTopInvalid","setIsRadiusTopInvalid","invalidMessageRadiusTop","setInvalidMessageRadiusTop","initRadiusBottom","setRadiusBottom","isRadiusBottomInvalid","setIsRadiusBottomInvalid","invalidMessageRadiusBottom","setInvalidMessageRadiusBottom","isOpenEnded","setIsOpenEnded","setOpenEnded","checked","TorusMeshProperties","initRadius","isRadiusInvalid","setIsRadiusInvalid","invalidMessageRadius","setInvalidMessageRadius","initTubeRadius","tubeRadius","setTubeRadius","isTubeRadiusInvalid","setIsTubeRadiusInvalid","invalidMessageTubeRadius","setInvalidMessageTubeRadius","initTubularSegments","setTubularSegments","isTubularSegmentsInvalid","setIsTubularSegmentsInvalid","invalidMessageTubularSegments","setInvalidMessageTubularSegments","setTube","WebGLEvent","listeners","listener","l","GLOBAL_COMPONENTS_REFRESH_EVENT","getListeners","el","onRefresh","STATE","world","selectedObject","refresh","toRadians","deg","toDegrees","rad","calculateTransformationMatrix","position","rotation","rotateX","rotateY","rotateZ","calculateIntersection","includes","normalizeAngle","angle","dist","ceil","calculateCenterPoint","z","RayCasterMode","Transform","positionInParent","orientationInParent","scaleInParent","transformationMatrix","updateTransformMatrix","orientation","RayCaster","ray","obj","mode","hitbox","recursion","areaRange","initMatrix","Object3D","t","getTransform","getTransformationMatrix","castObject3D","h","console","log","o","transformMat","outArray","raycast","getChildrenList","child","tmpMat","mul","concat","STANDARD_AREA_RANGE","Ray","direction","createRayFromCamera","screenCords","camera","getPosition","direction4","getUnProjectMatrix","w","ShaderUniformsLocations","POSITION","TEXTURE_COORDS","NORMAL","TRANSFORMATION_MATRIX","ALBEDO","VIEW_MATRIX","PROJECTION_MATRIX","LIGHT_POSITION","LIGHT_COLOR","LIGHT_AMBIENT","DIFFUSE_TEXTURE","HAS_DIFFUSE_TEXTURE","basicVertexShader","basicFragmentShader","BasicShader","positionAttribute","transformationMatrixUniform","viewMatrixUniform","projectionMatrixUniform","albedoUniform","lightPositionUniform","lightAmbientUniform","lightColorUniform","vertexShader","createVertexShader","addShaderSource","compileStatus","fragmentShader","createFragmentShader","createShaderProgram","attachShaderToProgram","returnWebGLContext","getShaderParameter","COMPILE_STATUS","error","getShaderInfoLog","pointToAttribute","uploadMatrix4fv","view","projection","uploadVec4f","ObjectMaterial","faceMaterial","Material","edgeMaterial","pointMaterial","mat","enableAlbedo","SPECIAL_MATERIALS","selectedObjMat","selectedFaceMat","selectedEdgeMat","selectedPointMat","editingModeObjectMat","getFaceMaterial","setColor","getEdgeMaterial","getPointMaterial","makeId","result","characters","charactersLength","charAt","random","transform","parent","mesh","material","isSelected","id","Date","now","newName","getMode","hittedObject","hits","raycastMesh","pointsHits","edgesHits","facesHits","object","setParent","splice","localTransform","getWorldTransformMatrix","out","transformationMatrixFromParent","drawEdges","getSelectedObjectMaterial","isEnabled","enablePolygonOffset","shaderF","getShader","setUpShader","enableMaterial","drawFaces","disablePolygonOffset","shaderE","renderObj","enableViewProjectionMatrices","getLookAtMatrix","getProjectionMatrix","enableTransformationMatrix","SimpleProvider","Mesh","geometryProvider","enabled","verticesBuffer","indicesBuffer","indicesFaces","indicesEdges","indicesPoints","getEdges","getFaces","generateWebglVertexes","loadVerticesBuffer","loadIndicesBuffer","uploadElementDataToBuffer","indices","indicesDrawLine","indicesInEdges","flatten","from","keys","newPoints","newEdges","newFaces","po","i1","i2","f","edgesIndexes","oldEdge","oe","oldIndex","newEdgesInFace","raycastFace","raycastEdge","raycastPoint","drawElementsEdge","drawElementsTriangle","newState","RefreshMechanism","Refresher","parseObjWithTransform","vertexes","isRecursive","usedVertexes","parsedObj","parseObject","parsedChildren","childrenTransform","join","getMesh","errorOccurred","objVertexes","vertexFormatArr","transformedCords","faceFormatArr","getName","ImportObjButton","modalSystem","isFileChooserDisplayed","setIsFileChooserDisplayed","currFile","setCurrFile","invalidInput","setInvalidInput","refreshChosenFileModal","setModalData","header","body","accept","files","onOk","reader","FileReader","onload","fileName","objList","lines","split","currVertexes","currEdges","currFaces","processedEdgesIndices","objectList","currentObject","skipObject","lineParts","trim","setMesh","setName","normalizeCords","normalizeX","normalizeY","normalizeZ","facePointsIndices","fi","parseInt","triples","facePoints","fp","mappedToZPlane","p1Z","p2Z","isLineInZPlane","mp","x1","y1","x2","y2","x3","y3","pv","cv","internalTriangulatedIndices","pointsOnPlane","earcut","externalTriangulatedIndices","iti","finalIndices","triple","faceEdges","searchingIndex","edgeIndex","ei","textToObject3D","parentObj","getSelectedObject","getWorld","addChild","readAsText","open","ExportToObj","DropdownItem","filename","blob","Blob","navigator","window","msSaveOrOpenBlob","msSaveBlob","elem","document","createElement","href","URL","createObjectURL","download","appendChild","click","removeChild","saveFile","object3DToString","exportChildren","ExportActions","ExportObjDropdown","changeExportChildren","MainInstruction","InstructionBody","List","MainNavBar","refresher","setExportChildren","sObj","newObj","build","ImportObj","EditModeContext","Camera","azAngle","elAngle","distanceToLookingPoint","pointToLook","fov","lookAtMatrix","invertedLookAtMatrix","projectionMatrix","isCameraUpSideDown","screenWidth","screenHeight","canvasEvent","updatePosition","calcLookAt","returnCanvas","ratio","perspective","vecUp","lookAt","unsubscribe","subscribe","camModMat","WebGLKeyboardEvent","onkeydown","onKeyDown","onkeyup","onKeyUp","WebGLMouseEvent","isPressed","onwheel","onWheel","onmousemove","dx","clientX","dy","clientY","onMouseMove","onmousedown","onMouseDown","onmouseup","onMouseUp","onclick","onMouseClick","CameraController","blockedBy","isInFlyingMode","isInOrbitMode","zoomScale","pix2angle","angleSpeed","cameraMotionSpeed","isLeftActive","isRightActive","isMiddleActive","cameraCanvasWidth","keysPressed","signAzimut","signElevation","getScreenDimensions","key","shiftKey","updatePosInFlyingMode","newRadius","getRadius","deltaY","camW","setAzimutAngle","getAzimutAngle","setElevationAngle","getElevationAngle","button","checkIfCameraUpSideDown","dirVec","zero","dirVec4","worldDirVec4","getCameraToWorldMatrix","worldDirVec","newPos","getPointToLookAt","setPointToLookAt","getClosestFaceOfObj","hit","closestFace","fh","getClosestObj","arr","closestObj","closestObjF","buildMoveGizmoDir","cylinderHeight","cylinderRadius","coneHeight","coneRadius","precision","coneBuilder","cylinder","cone","cylinderObj","coneObj","cylinderT","setMaterial","setPositionInParent","setTransform","coneT","buildRotateGizmoDir","outerPrecision","innerPrecision","torus","torusObj","torusT","buildScaleGizmoDir","cubeScale","cubeBuilder","cube","cubeObj","cubeT","setScaleInParent","GizmoModes","GizmoMove","gizmoX","gizmoY","gizmoZ","main","setOrientationInParent","GizmoRotate","GizmoScale","GizmoManipEvent","dz","onMove","onRotate","onScale","onStart","onFinish","GizmoManager","cameraController","moveGizmo","rotateGizmo","scaleGizmo","activeSubGizmo","gizmoEvent","distPointCam","move","getGizmo","m","gizmoUnused","clearDepthBuffer","toDraw","rotate","fromTranslation","distV","len","mDist","setRay","gizX","getGizmoX","gizY","getGizmoY","getGizmoZ","root","setRaycastable","cast","targetGizmoObj","getParent","block","actDx","actDy","moveDirVec","actModifier","rotateDirVec","scaleDirVec","cameraInScaleDirVec","im","cameraOutScaleDirVec","handleCastMoveGizmo","handleCastRotateGizmo","handleCastScaleGizmo","unblock","EditRenderer","objToRender","selectedPoint","selectedEdge","selectedFace","enableDepthTest","renderObject","materialP","getSelectedPointMaterial","shaderP","drawPoint","materialE","getSelectedEdgeMaterial","drawEdge","materialF","getSelectedFaceMaterial","drawFace","getEditModeObjectMaterial","getMaterial","drawPoints","View","PanelTitle","maxHeight","fontStyle","justifyContent","alignItems","fontSize","fontWeight","title","PanelBody","padding","CardBody","borderRadius","CardBodyMainLabel","Property","flexWrap","paddingTop","paddingBottom","paddingRight","ToolProperties","MouseProperties","startingVal","minVal","maxVal","clickRaycastArea","setValue","min","max","step","newValue","marks","TransformToolProperties","cardLabel","speedFactorLabel","mouseProperties","MousePropertiesInst","speedFactor","TransformProperties","drawPropertiesCard","MoveToolProperties","RotateToolProperties","ScaleToolProperties","checkIfToolIsGizmoTool","tool","Tool","properties","MoveTool","RotateTool","ScaleTool","SurfaceSubdivisionTool","indexOfDeletedFace","newPoint","edgePoints","newEdge","refreshBuffers","TOOL_STORAGE","toolArray","constructor","tableRowStyle","styleRef","EditViewToolsSelector","editViewModeCtx","ETools","actActive","setActActive","setTool","isInit","getToolByType","surfaceSubdivision","updateSelectedTool","ViewManagerInst","returnView","editMode","EditViewMode","setGizmoMode","MainViewToolsSelector","AppModeContext","ToolsManagerInst","selectedTool","viewModeCtx","ModeContext","appMode","AppMode","MainMode","setSelectedTool","bind","EditMode","EditView","renderer","gizmo","gizmoPoint","leftMouseDown","actualScaleFactor","originalSelectedEdge","originalSelectedFace","setCanvasEvent","subscribeToGizmo","unselectAll","setMode","updateOriginals","set","inactivate","renderFrame","render","isCameraActive","ind","vec2","offsetX","offsetY","setAreaRange","raycastGizmo","getSelectedTool","getProperties","getMouseProperties","getClickRaycastArea","closestPoint","ph","getClosestPointOfObj","handlePointHits","closestEdge","eh","getClosestEdgeOfObj","handleEdgeHits","handleFaceHits","singleSelect","st","subdivideFace","unselectPoint","unselectEdge","unselectFace","pointH","faceH","onSelectPoint","selectPoint","updateCenterPoint","activate","setPoint","edgeH","onSelectEdge","selectEdge","onSelectFace","selectFace","cleanUp","change","moveTool","getSpeedFactor","setCords","pA","refreshMeshBuffer","newC","invGP","transInv","trans","rotateTool","rotateMat","final","byX","byY","byZ","fromXRotation","fromYRotation","fromZRotation","transformedC","scaleTool","scaleMat","fromScaling","actPoints","pointToSet","dependentPoints","EditOnScreenMenu","workingEditMode","setEditMode","ButtonGroup","marginTop","StandardRenderer","MainView","actualObjectWorldTransformation","recalculateGizmoPosition","s","unselect","setSelectedObject","select","newP","vec4T","inv","translatedTranslation","prevTranslation","getPositionInParent","prevRotation","getOrientationInParent","rotTransMat","rot","quat","getRotation","fromRotationTranslation","scaledScaling","sample","absolute","changeSign","prevScale","getScaleInParent","translated","MainOnScreenMenu","actualView","enableMainView","renderView","Error","setActualView","so","viewId","component","returnOnScreenMenu","ViewMenuManagerComponent","ModeNavBar","selectedMode","setSelectedMode","mainModeBtnRef","editModeBtnRef","modeNum","setAppMode","enableEditView","message","blur","ToolsWindow","returnToolsComponent","TypeIcon","nodeType","Hoverable","styled","span","NodeItem","dragOverProps","useDragOver","node","onToggle","indent","depth","colorRgb","colorConverter","hex","rgb","paddingInlineStart","CssBaseline","droppable","stopPropagation","onSelect","paddingLeft","deleteObj","mainView","DragPreview","ColorModeCtx","item","monitorProps","ObjectTreeNodeWindow","refreshMechanism","currentViewCtx","treeData","setTreeData","selectedNode","setSelectedNode","updtGizmoPos","handleSelect","dataArr","mapObjToArrayElement","getId","mapChildren","mapWorldToTreeData","disableOnView","tree","rootId","onDrop","newData","treeObj","parentOfObj","newParent","rearrangeHierarchyBasedOnTreeData","dragPreviewRender","classes","draggingSource","dropTarget","WebGLI","mainCamera","viewManager","context","initUtils","cObj","checker","setWorld","init","requestAnimationFrame","renderViewWorld","CanvasEvent","onResize","Viewport","useResizeDetector","ref","querySelector","getContext","canEvent","intiRenderLoop","alert","triggerOnResize","scrollY","getBoundingClientRect","scrollX","left","margin","zIndex","right","bottom","displayName","DEFAULT_COLOR","hsl","getColorFromSelectedObj","colorVec4","getColor","rgbaObj","trunc","hslArr","hslaObj","MaterialProps","refreshResponse","chosenColor","setChosenColor","isColorPickerDisplayed","setIsColorPickerDisplayed","colorPrev","setupPickerModal","onClose","onCancel","alignSelf","initCheckbox","exists","MeshProps","setInfo","setChecked","newInfo","enableDisable","ObjectDetailsProps","setNewName","oldName","setOldName","isNameInvalid","setIsNameInvalid","onFocus","InvalidValueInfo","currObj","setCurrObj","localRefresh","setLocalRefresh","posXInvalid","setPosXInvalid","posYInvalid","setPosYInvalid","posZInvalid","setPosZInvalid","posRenderInput","setPosRenderInput","orientXInvalid","setOrientXInvalid","orientYInvalid","setOrientYInvalid","orientZInvalid","setOrientZInvalid","orientRenderInput","setOrientRenderInput","scaleXInvalid","setScaleXInvalid","scaleYInvalid","setScaleYInvalid","scaleZInvalid","setScaleZInvalid","scaleRenderInput","setScaleRenderInput","changeObjNumberProp","signalError","getValues","setValues","inputVals","setInputVals","defaultValue","transformValueFunction","currentTarget","oldValues","ToolsPropertiesWindow","rerender","comp","renderToolPropertiesCard","StatusFooter","RefresherComp","state","refreshVal","setState","Provider","React","Component","ModalSystem","setIsOpen","modalData","Modal","modalSettings","returnFocusAfterClose","ModalHeader","close","ModalBody","ModalFooter","initMenusWidth","menuMinVerSize","Main","widthLeftHor","heightLeftHor","setDimLeftHor","widthLeftVer","heightLeftVer","setDimLeftVer","widthRightHor","heightRightHor","setDimRightHor","widthRightVer","heightRightVer","setDimRightVer","subWindowWidth","subWindowHeight","setDimSubWindow","viewMode","setViewMode","editViewMode","setEditViewMode","subWindow","clientWidth","clientHeight","flexFlow","resizeHandles","handle","float","element","size","overflow","ObjectPropertiesWindow","App","setColorMode","DndProvider","backend","HTML5Backend","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f6e69c8a.chunk.js","sourcesContent":["import React from 'react';\r\nimport Colors from 'utils/Colors';\r\n\r\nexport interface FrameProps {\r\n    children: React.ReactNode | React.ReactNode[]\r\n    bordersEnabled?: string\r\n    backgroundColor?: string\r\n    borderColor?: string\r\n    borderWidth?: number\r\n    style?: React.CSSProperties\r\n    id?: string\r\n}\r\n\r\nconst Frame = (props: FrameProps) => {\r\n  let borderChooser = props.bordersEnabled;\r\n  if (!borderChooser) {\r\n    borderChooser = 'wens';\r\n  }\r\n\r\n  let backgroundColor = props.backgroundColor;\r\n  if (!backgroundColor) {\r\n    backgroundColor = '#FFFFFF';\r\n  }\r\n\r\n  let borderColor = props.borderColor;\r\n  if (!borderColor) {\r\n    borderColor = '#000000';\r\n  }\r\n\r\n  let borderWidth = props.borderWidth;\r\n  if (!borderWidth) {\r\n    borderWidth = 0;\r\n  }\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        backgroundColor: backgroundColor,\r\n        borderStyle: 'solid',\r\n        borderColor: borderColor,\r\n        borderTopWidth:\r\n            /(n|N)/.test(borderChooser) ? `${borderWidth}px` : '0px',\r\n        borderRightWidth:\r\n            /(e|E)/.test(borderChooser) ? `${borderWidth}px` : '0px',\r\n        borderBottomWidth:\r\n            /(s|S)/.test(borderChooser) ? `${borderWidth}px` : '0px',\r\n        borderLeftWidth:\r\n            /(w|W)/.test(borderChooser) ? `${borderWidth}px` : '0px',\r\n        ...props.style,\r\n      }}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Frame;\r\n","import React from 'react';\r\nimport {createContext} from 'react';\r\n\r\nexport interface ColorModeContextValues {\r\n    backgroundColor: string,\r\n    primaryColor: string,\r\n    accentColor: string,\r\n    secondaryColor: string\r\n}\r\n\r\nexport interface ColorModeContextInt{\r\n    colorMode: ColorModeContextValues,\r\n    setColorMode: React.Dispatch<React.SetStateAction<ColorModeContextValues>>\r\n}\r\nconst ColorModeContext = createContext<ColorModeContextInt | null>(null);\r\n\r\n/**\r\n *\r\n * @param {ColorModeContextValues} colorMode\r\n * @return {JSX.Element}\r\n */\r\nexport function injectStyle(colorMode: ColorModeContextValues): JSX.Element {\r\n  return (\r\n    <style type=\"text/css\">\r\n      {`\r\n                .btn-gui,\r\n                .btn-secondary {\r\n                    border-radius: 0px;\r\n                    border-width: 0px;\r\n                    background-color: ${colorMode.backgroundColor};\r\n                    color: ${colorMode.primaryColor};\r\n                }\r\n                .btn-gui:hover,\r\n                .btn-secondary:hover {\r\n                    background-color: ${colorMode.backgroundColor};\r\n                    color: ${colorMode.accentColor};\r\n                    box-shadow: none;\r\n                }\r\n\r\n                .btn-gui:focus,\r\n                .btn-gui:active,\r\n                .btn-secondary.active,\r\n                .btn-secondary.active:focus,\r\n                .btn-secondary.dropdown-toggle:focus,\r\n                dropdown-toggle btn btn-secondary {\r\n                    background-color: ${colorMode.accentColor};\r\n                    color: ${colorMode.backgroundColor};\r\n                    border-width: 0px;\r\n                    box-shadow: none;\r\n                    height: 100%;\r\n                }\r\n\r\n                .dropdown-menu {\r\n\r\n                }\r\n\r\n                .dropdown-item {\r\n                    \r\n                }\r\n            `}\r\n    </style>\r\n  );\r\n}\r\n\r\nexport default ColorModeContext;\r\n","import React, {useContext, useEffect, useRef} from 'react';\r\nimport {useState} from 'react';\r\nimport {Button, ButtonDropdown,\r\n  DropdownToggle, DropdownMenu, InputProps, Input} from 'reactstrap';\r\n\r\nimport {BsArrowsMove} from 'react-icons/bs';\r\nimport {CgArrowsExpandLeft} from 'react-icons/cg';\r\nimport {ImLoop2} from 'react-icons/im';\r\nimport ColorModeContext from 'contexts/ColorModeContext';\r\n\r\nimport Checkbox, {CheckboxProps} from '@mui/material/Checkbox';\r\nimport {SliderProps, Slider} from '@mui/material';\r\nimport {StandardReactPropsInt} from './Standard';\r\nimport {IoGridSharp} from 'react-icons/io5';\r\n\r\n\r\nexport interface GUIButtonPropsWithoutIcon {\r\n  text?: string;\r\n  onClick?: React.MouseEventHandler<HTMLElement>;\r\n  active?: boolean;\r\n  style?: React.CSSProperties;\r\n  className?: string;\r\n  buttonRef?: React.Ref<HTMLButtonElement> | undefined;\r\n}\r\nexport interface GUIButtonProps extends GUIButtonPropsWithoutIcon {\r\n    ico?: React.ReactNode;\r\n}\r\n\r\nexport interface GUIDropdownProps extends GUIButtonProps {\r\n    isOpen?: boolean;\r\n    toggle?: (() => void) | undefined;\r\n    children: React.ReactChild[] | React.ReactChild\r\n}\r\n\r\nexport interface InputPropertyWithConfirmProps extends InputProps {\r\n  onConfirm?: React.MouseEventHandler<HTMLElement>;\r\n}\r\n\r\nexport interface DisableProps extends StandardReactPropsInt {\r\n  disabled: boolean;\r\n}\r\n\r\nexport const GUIButton = (props : GUIButtonProps): JSX.Element=> {\r\n  const buttonRef = useRef(null);\r\n  const [isActive, setIsActive] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (props.active === undefined) {\r\n      setIsActive(false);\r\n    }\r\n  }, [isActive]);\r\n  return (\r\n    <Button\r\n      className={`btn-gui ${props.className ? props.className : ''}`}\r\n      onClick={props.onClick}\r\n      innerRef={props.buttonRef ? props.buttonRef : buttonRef}\r\n      style={props.style}\r\n      active={props.active !== undefined ? props.active : isActive}>\r\n      <span\r\n        style={{\r\n          marginRight: props.text ? '10px' : '0px',\r\n          display: 'inline',\r\n          width: '120%',\r\n          height: '120%',\r\n          ...props.style,\r\n        }}>\r\n        {props.ico}\r\n      </span>\r\n      {props.text && <span\r\n        style={{\r\n          display: 'inline',\r\n        }}>\r\n        {props.text}\r\n      </span>}\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport const GUIDropdown = (props: GUIDropdownProps): JSX.Element => {\r\n  const [dropdownOpen, setDropdownOpen] = useState(false);\r\n\r\n  const toggle = () => setDropdownOpen((prevState) => !prevState);\r\n\r\n  return (\r\n    <ButtonDropdown\r\n      isOpen={props.isOpen === undefined ? dropdownOpen : props.isOpen}\r\n      toggle={() => {\r\n        if (props.toggle === undefined) {\r\n          toggle();\r\n        } else {\r\n          props.toggle();\r\n        }\r\n      }}\r\n      innerRef={props.buttonRef}\r\n      onClick={props.onClick}\r\n      className=\"btn-gui\">\r\n      <DropdownToggle caret>\r\n        <span\r\n          style={{\r\n            marginRight: '10px',\r\n            display: 'inline',\r\n            width: '120%',\r\n            height: '120%',\r\n          }}>\r\n          {props.ico}\r\n        </span>\r\n        <span\r\n          style={{\r\n            display: 'inline',\r\n          }}>\r\n          {props.text}\r\n        </span>\r\n      </DropdownToggle>\r\n      <DropdownMenu>\r\n        {props.children}\r\n      </DropdownMenu>\r\n    </ButtonDropdown>\r\n  );\r\n};\r\n\r\nexport const MoveButton =\r\n  ({text, onClick, active, style, className, buttonRef}\r\n    : GUIButtonPropsWithoutIcon)\r\n  : JSX.Element => {\r\n    return (\r\n      <GUIButton\r\n        text={text}\r\n        buttonRef={buttonRef}\r\n        className={className}\r\n        style={style}\r\n        ico={<BsArrowsMove/>}\r\n        onClick={onClick}\r\n        active={active}\r\n      />\r\n    );\r\n  };\r\n\r\nexport const RotateButton =\r\n  ({text, onClick, active, style, className, buttonRef}\r\n    : GUIButtonPropsWithoutIcon)\r\n  : JSX.Element => {\r\n    return (\r\n      <GUIButton\r\n        text={text}\r\n        buttonRef={buttonRef}\r\n        className={className}\r\n        style={style}\r\n        ico={<ImLoop2/>}\r\n        onClick={onClick}\r\n        active={active}\r\n      />\r\n    );\r\n  };\r\n\r\nexport const ScaleButton =\r\n  ({text, onClick, active, style, className, buttonRef}\r\n    : GUIButtonPropsWithoutIcon)\r\n  : JSX.Element => {\r\n    return (\r\n      <GUIButton\r\n        text={text}\r\n        buttonRef={buttonRef}\r\n        className={className}\r\n        style={style}\r\n        ico={<CgArrowsExpandLeft/>}\r\n        onClick={onClick}\r\n        active={active}\r\n      />\r\n    );\r\n  };\r\n\r\nexport const SubdivideButton =\r\n({text, onClick, active, style, className, buttonRef}\r\n  : GUIButtonPropsWithoutIcon): JSX.Element => {\r\n  return (\r\n    <GUIButton\r\n      text={text}\r\n      buttonRef={buttonRef}\r\n      className={className}\r\n      style={style}\r\n      ico={<IoGridSharp/>}\r\n      onClick={onClick}\r\n      active={active}\r\n    />\r\n  );\r\n};\r\n\r\nexport const InputProperty = (props: InputProps): JSX.Element => {\r\n  const colorModeCtx = useContext(ColorModeContext);\r\n  return (\r\n    <Input\r\n      {...props}\r\n      className={\r\n        `input-property-style ${props.className ? props.className : ''}`\r\n      }\r\n      style={{\r\n        color: colorModeCtx?.colorMode.primaryColor,\r\n        backgroundColor: props.disabled ?\r\n          'grey' : colorModeCtx?.colorMode.secondaryColor,\r\n        borderColor: colorModeCtx?.colorMode.accentColor,\r\n        ...props.style,\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport const InputPropertyWithConfirm =\r\n(props: InputPropertyWithConfirmProps): JSX.Element => {\r\n  const colorModeCtx = useContext(ColorModeContext);\r\n  return (\r\n    <>\r\n      <Input\r\n        {...props}\r\n        className={\r\n          `input-property-style ${props.className ? props.className : ''}`\r\n        }\r\n        style={{\r\n          color: colorModeCtx?.colorMode.primaryColor,\r\n          backgroundColor: props.disabled ?\r\n            'grey' : colorModeCtx?.colorMode.secondaryColor,\r\n          borderColor: colorModeCtx?.colorMode.accentColor,\r\n          ...props.style,\r\n        }}\r\n      />\r\n      <Button\r\n        className='ms-2 p-2'\r\n        color='success'\r\n        onClick={props.onConfirm}\r\n      >\r\n        Confirm\r\n      </Button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport const CheckboxProperty = (props: CheckboxProps): JSX.Element => {\r\n  const colorModeCtx = useContext(ColorModeContext);\r\n  return (\r\n    <Checkbox\r\n      sx={{\r\n        'color': colorModeCtx?.colorMode.accentColor,\r\n        '&.Mui-checked': {\r\n          'color': colorModeCtx?.colorMode.accentColor,\r\n        },\r\n        '&.Mui-disabled': {\r\n          'color': colorModeCtx?.colorMode.secondaryColor,\r\n        },\r\n      }}\r\n      {...props}\r\n    />\r\n  );\r\n};\r\n\r\nexport const SliderProperty = (props: SliderProps): JSX.Element => {\r\n  const colorModeCtx = useContext(ColorModeContext);\r\n  return (\r\n    <Slider\r\n      sx={{\r\n        'color': colorModeCtx?.colorMode.accentColor,\r\n        'height': '0.5em',\r\n        '& .MuiSlider-rail': {\r\n          'color': colorModeCtx?.colorMode.secondaryColor,\r\n          'borderColor': 'black',\r\n          'borderWidth': '1px',\r\n          'borderStyle': 'solid',\r\n        },\r\n        '& .MuiSlider-track': {\r\n          'color': colorModeCtx?.colorMode.accentColor,\r\n          'borderColor': 'black',\r\n          'borderWidth': '1px',\r\n          'borderStyle': 'solid',\r\n        },\r\n        '& .MuiSlider-thumb': {\r\n          'borderColor': 'black',\r\n          'borderWidth': '1px',\r\n          'borderStyle': 'solid',\r\n          '&.Mui-focusVisible, &:hover': {\r\n            'boxShadow': `0px 0px 0px 8px \r\n              ${colorModeCtx?.colorMode.accentColor}29`,\r\n          },\r\n          '&.Mui-active': {\r\n            'boxShadow': `0px 0px 0px 14px \r\n              ${colorModeCtx?.colorMode.accentColor}29`,\r\n          },\r\n        },\r\n        '& .MuiSlider-mark': {\r\n          'display': 'none',\r\n        },\r\n        '& .MuiSlider-markLabel': {\r\n          'color': colorModeCtx?.colorMode.primaryColor,\r\n        },\r\n      }}\r\n      {...props}\r\n    />\r\n  );\r\n};\r\n\r\nexport const SliderWithValueProperty = (props: SliderProps): JSX.Element => {\r\n  const colorModeCtx = useContext(ColorModeContext);\r\n  return (\r\n    <>\r\n      <SliderProperty {...props}/>\r\n      <InputProperty bsSize={'sm'}\r\n        value={props.value?.toString()}\r\n        disabled style={{\r\n          height: '50%',\r\n          width: '50%',\r\n          marginLeft: '1em',\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport const ContainerWithRows =\r\n(props: StandardReactPropsInt): JSX.Element=> {\r\n  return (\r\n    <div\r\n      style={{\r\n        display: 'flex',\r\n        flexGrow: 1,\r\n        flexDirection: 'column',\r\n        ...props.style,\r\n      }}\r\n      className={props.className}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const ContainerWithColumns =\r\n(props: StandardReactPropsInt): JSX.Element=> {\r\n  return (\r\n    <div\r\n      style={{\r\n        display: 'flex',\r\n        flexGrow: 1,\r\n        flexDirection: 'row',\r\n        ...props.style,\r\n      }}\r\n      className={props.className}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const Disable = (props: DisableProps): JSX.Element => {\r\n  return (\r\n    <div\r\n      style={props.style}\r\n      className={props.className}\r\n    >\r\n      {\r\n        props.disabled &&\r\n        <div\r\n          className='disabled-overlay'\r\n        />\r\n      }\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n","import {ModalDataInt} from 'components/ModalSystem';\r\nimport {createContext} from 'react';\r\n\r\nexport interface ModalSystemContextInt {\r\n  setModalData: React.Dispatch<React.SetStateAction<ModalDataInt | null>>;\r\n  open: () => void;\r\n  isOpen: boolean;\r\n}\r\nconst ModalSystemContext = createContext<ModalSystemContextInt | null>(null);\r\n\r\nexport default ModalSystemContext;\r\n","import {vec3, mat4, vec4} from 'gl-matrix';\r\n/**\r\n * WebGlUtils\r\n */\r\nexport class WebGLUtils {\r\n  private gl: WebGLRenderingContext | null = null;\r\n  private canvas: HTMLCanvasElement | null = null;\r\n\r\n  /**\r\n * init\r\n * @param {WebGLRenderingContext} gl\r\n * @param {HTMLCanvasElement} canvas\r\n */\r\n  initUtils(gl: WebGLRenderingContext, canvas: HTMLCanvasElement): void {\r\n    this.gl = gl;\r\n    this.canvas = canvas;\r\n  }\r\n\r\n  /**\r\n  * @return {WebGLRenderingContext | null}\r\n  */\r\n  public returnCanvas(): HTMLCanvasElement | null {\r\n    return this.canvas;\r\n  }\r\n\r\n  /**\r\n   * Returns webgl context passed during initialization.\r\n   * @return {WebGLRenderingContext | null}\r\n   */\r\n  returnWebGLContext() : WebGLRenderingContext | null {\r\n    return this.gl;\r\n  }\r\n\r\n  /**\r\n   * Clear screen with given color\r\n   * @param {number} r\r\n   * @param {number} g\r\n   * @param {number} b\r\n   * @param {number} a\r\n   */\r\n  clear(r: number, g: number, b: number, a: number): void {\r\n    if (!this.gl) {\r\n      return;\r\n    }\r\n    this.gl.clearColor(r, g, b, a);\r\n    this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\r\n  }\r\n\r\n  /**\r\n   * Clears depth buffer\r\n   * @return {void}\r\n   */\r\n  clearDepthBuffer(): void {\r\n    if (!this.gl) {\r\n      return;\r\n    }\r\n    this.gl.clear(this.gl.DEPTH_BUFFER_BIT);\r\n  }\r\n\r\n  /**\r\n   * Creates new Buffer\r\n   * @return {WebGLBuffer | null}\r\n   */\r\n  createBuffer(): WebGLBuffer | null {\r\n    if (!this.gl) {\r\n      return null;\r\n    }\r\n    return this.gl.createBuffer();\r\n  }\r\n\r\n  // float buffers\r\n\r\n  /**\r\n  *\r\n  * @param {WebGLBuffer} buffer\r\n  */\r\n  bindArrayBuffer(buffer: WebGLBuffer): void {\r\n    if (!this.gl) {\r\n      return;\r\n    }\r\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, buffer);\r\n  }\r\n\r\n  /**\r\n   *  Unbinds arrayBuffer\r\n   */\r\n  unbindArrayBuffer(): void {\r\n    if (!this.gl) {\r\n      return;\r\n    }\r\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\r\n  }\r\n\r\n  /**\r\n   * Enables polygon offset in depth buffer end sets its values\r\n   * @param {number} factor\r\n   * @param {number} units\r\n   */\r\n  enablePolygonOffset(factor: number, units: number): void {\r\n    if (!this.gl) return;\r\n    this.gl.enable(this.gl.POLYGON_OFFSET_FILL);\r\n    this.gl.polygonOffset(factor, units);\r\n  }\r\n\r\n  /**\r\n   * Disables polygon offset\r\n   * @return {void}\r\n   */\r\n  disablePolygonOffset(): void {\r\n    if (!this.gl) return;\r\n    this.gl.disable(this.gl.POLYGON_OFFSET_FILL);\r\n  }\r\n\r\n  /**\r\n   * Assigns new Data to binded buffer\r\n   * @param {Iterable<number>} data\r\n   */\r\n  addArrayBufferData(data: Iterable<number>): void {\r\n    if (!this.gl) {\r\n      return;\r\n    }\r\n    this.gl.bufferData(this.gl.ARRAY_BUFFER,\r\n        new Float32Array(data), this.gl.STATIC_DRAW);\r\n  }\r\n\r\n  // int buffers\r\n\r\n  /**\r\n   * Binds buffer with integer data\r\n   * @param {WebGLBuffer} buffer\r\n   */\r\n  bindElementArrayBuffer(buffer : WebGLBuffer): void {\r\n    if (!this.gl) {\r\n      return;\r\n    }\r\n    this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, buffer);\r\n  }\r\n\r\n  /**\r\n   * Unbinds buffer with integer data\r\n   */\r\n  unbindElementArrayBuffer(): void {\r\n    if (!this.gl) {\r\n      return;\r\n    }\r\n    this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);\r\n  }\r\n\r\n  /**\r\n   * Assigns new Data to binded buffer\r\n   * @param {Iterable<number>} data\r\n   */\r\n  addElementArrayBufferData(data: Iterable<number>): void {\r\n    if (!this.gl) {\r\n      return;\r\n    }\r\n    this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER,\r\n        new Uint16Array(data), this.gl.STATIC_DRAW);\r\n  }\r\n\r\n  /**\r\n   * Creates and return new vertex shader\r\n   * @return {WebGLShader | null} newShader\r\n   */\r\n  createVertexShader(): WebGLShader | null {\r\n    if (!this.gl) {\r\n      return null;\r\n    }\r\n    return this.gl.createShader(this.gl.VERTEX_SHADER);\r\n  }\r\n\r\n  /**\r\n   * Creates and return new fragment shader\r\n   * @return {WebGLShader | null} newShader\r\n   */\r\n  createFragmentShader(): WebGLShader | null {\r\n    if (!this.gl) {\r\n      return null;\r\n    }\r\n    return this.gl.createShader(this.gl.FRAGMENT_SHADER);\r\n  }\r\n\r\n  /**\r\n   * Adds new source program to given shader\r\n   * @param {WebGLShader} shader shader\r\n   * @param {string} source source program\r\n   */\r\n  addShaderSource(shader: WebGLShader, source: string): void {\r\n    if (!this.gl) {\r\n      return;\r\n    }\r\n    this.gl.shaderSource(shader, source);\r\n  }\r\n\r\n  /**\r\n   * Compiles given shader\r\n   * @param  {WebGLShader} shader\r\n   * @return {void}\r\n   */\r\n  compileShader(shader: WebGLShader): void {\r\n    if (!this.gl) {\r\n      return;\r\n    }\r\n    this.gl.compileShader(shader);\r\n  }\r\n\r\n  /**\r\n   * Creates new Shader Program\r\n   * @return {WebGLProgram}\r\n   */\r\n  createShaderProgram(): WebGLProgram | null {\r\n    if (!this.gl) {\r\n      return null;\r\n    }\r\n    return this.gl.createProgram();\r\n  }\r\n\r\n  /**\r\n   * Attachs shader to program\r\n   * @param  {WebGLProgram} program\r\n   * @param  {WebGLShader} shader\r\n   * @return {void}\r\n   */\r\n  attachShaderToProgram(program: WebGLProgram, shader: WebGLShader): void {\r\n    if (!this.gl) {\r\n      return;\r\n    }\r\n    this.gl.attachShader(program, shader);\r\n  }\r\n\r\n  /**\r\n   * Links Program to webgl context\r\n   * @param  {WebGLProgram} program\r\n   * @return {void}\r\n   */\r\n  linkProgram(program: WebGLProgram): void {\r\n    if (!this.gl) {\r\n      return;\r\n    }\r\n    this.gl.linkProgram(program);\r\n  }\r\n\r\n  /**\r\n   * Executes program\r\n   * @param  {WebGLProgram} program\r\n   * @return {void}\r\n   */\r\n  useProgram(program: WebGLProgram): void {\r\n    if (!this.gl) {\r\n      return;\r\n    }\r\n    this.gl.useProgram(program);\r\n  }\r\n\r\n  /**\r\n   * Gets number of given program\r\n   * @param  {WebGLProgram} program\r\n   * @param  {string} attribute\r\n   * @return {number}\r\n   */\r\n  getAttribLocation(program: WebGLProgram, attribute: string): number {\r\n    if (!this.gl) {\r\n      return -1;\r\n    }\r\n    return this.gl.getAttribLocation(program, attribute);\r\n  }\r\n\r\n  /**\r\n   * enables give vertex array\r\n   * returns true if succeced, otherwise returns false\r\n   * @param  {number} attribute\r\n   * @return {boolean}\r\n   */\r\n  enableVertexAttribArray(attribute: number): boolean {\r\n    if (!this.gl) {\r\n      return false;\r\n    }\r\n    this.gl.enableVertexAttribArray(attribute);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @param  {number} data\r\n   * @param  {number} dimensions\r\n   * @return {void}\r\n   */\r\n  pointToAttribute(data: number, dimensions: number): void {\r\n    if (!this.gl) {\r\n      return;\r\n    }\r\n    this.gl.vertexAttribPointer(data, dimensions, this.gl.FLOAT, false, 0, 0);\r\n  }\r\n\r\n  /**\r\n   * Upload vector3 to uniform with given location\r\n   * @param {WebGLUniformLocation | null} location\r\n   * @param {vec3} vec3\r\n   */\r\n  uploadVec3f(location: WebGLUniformLocation | null, vec3: vec3): void {\r\n    if (!this.gl) {\r\n      return;\r\n    }\r\n    this.gl.uniform3fv(location, vec3);\r\n  }\r\n\r\n  /**\r\n   * Upload vector4 to uniform with given location\r\n   * @param {WebGLUniformLocation | null} location\r\n   * @param {vec4} vec4\r\n   */\r\n  uploadVec4f(location: WebGLUniformLocation | null, vec4: vec4): void {\r\n    if (!this.gl) {\r\n      return;\r\n    }\r\n    this.gl.uniform4fv(location, vec4);\r\n  }\r\n\r\n  /**\r\n   * Upload float value to uniform with given location\r\n   * @param {WebGLUniformLocation | null} location\r\n   * @param {number} value\r\n   */\r\n  uploadFloat(location: WebGLUniformLocation | null, value: number): void {\r\n    if (!this.gl) {\r\n      return;\r\n    }\r\n    this.gl.uniform1f(location, value);\r\n  }\r\n\r\n  /**\r\n   * Upload integer value to uniform with given location\r\n   * @param {WebGLUniformLocation | null} location\r\n   * @param {number} value\r\n   */\r\n  uploadInt(location: WebGLUniformLocation | null, value: number): void {\r\n    if (!this.gl) {\r\n      return;\r\n    }\r\n    this.gl.uniform1i(location, value);\r\n  }\r\n\r\n  /**\r\n   * Upload boolean value to uniform with given location\r\n   * @param {WebGLUniformLocation | null} location\r\n   * @param {boolean} value\r\n   */\r\n  uploadBool(location: WebGLUniformLocation | null, value: boolean): void {\r\n    if (!this.gl) {\r\n      return;\r\n    }\r\n    this.gl.uniform1i(location, value ? 1: 0);\r\n  }\r\n\r\n  /**\r\n   * Upload 4x4 matrix od float values to uniform with given location\r\n   * @param {WebGLUniformLocation | null} location\r\n   * @param {mat4} matrix\r\n   */\r\n  uploadMatrix4fv(location: WebGLUniformLocation | null, matrix: mat4): void {\r\n    if (!this.gl) {\r\n      return;\r\n    }\r\n    this.gl.uniformMatrix4fv(location, false, matrix);\r\n  }\r\n\r\n  /**\r\n   * Returns uniform of given progrma under given location\r\n   * @param {WebGLProgram} program\r\n   * @param {string} uniform\r\n   * @return {WebGLUniformLocation | null}\r\n   */\r\n  getUniformLocation(program: WebGLProgram, uniform: string):\r\n      WebGLUniformLocation | null {\r\n    if (!this.gl) {\r\n      return null;\r\n    }\r\n    return this.gl.getUniformLocation(program, uniform);\r\n  }\r\n\r\n  /**\r\n   * Setups viewport\r\n   */\r\n  viewport(): void {\r\n    if (!this.gl) {\r\n      return;\r\n    }\r\n    this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\r\n  }\r\n\r\n  /**\r\n   * Enable or disable depth test\r\n   * @param {boolean} switchDepth\r\n   */\r\n  enableDepthTest(switchDepth: boolean): void {\r\n    if (!this.gl) {\r\n      return;\r\n    }\r\n    switchDepth ? this.gl.enable(this.gl.DEPTH_TEST) :\r\n      this.gl.disable(this.gl.DEPTH_TEST);\r\n  }\r\n\r\n  /**\r\n   * Uploads data to specified buffer\r\n   * @param {WebGLBuffer} buffer\r\n   * @param {number[]} data\r\n   */\r\n  public uploadDataToBuffer(buffer: WebGLBuffer, data: number[]): void {\r\n    this.bindArrayBuffer(buffer);\r\n    this.addArrayBufferData(data);\r\n    this.unbindArrayBuffer();\r\n  }\r\n\r\n  /**\r\n   * Uploads element data to specified buffer\r\n   * @param {WebGLBuffer} buffer\r\n   * @param {number[]} data\r\n   */\r\n  public uploadElementDataToBuffer(\r\n      buffer: WebGLBuffer, data: number[]): void {\r\n    this.bindElementArrayBuffer(buffer);\r\n    this.addElementArrayBufferData(data);\r\n    this.unbindElementArrayBuffer();\r\n  }\r\n\r\n\r\n  /**\r\n   * Draws elements from binded buffer\r\n   * @param {number} type\r\n   * @param {number} length\r\n   * @return {void}\r\n   */\r\n  public drawElements(type: number, length: number): void {\r\n    if (!this.gl) {\r\n      return;\r\n    }\r\n    this.gl.drawElements(\r\n        type,\r\n        length,\r\n        this.gl.UNSIGNED_SHORT, 0);\r\n  }\r\n\r\n  /**\r\n   * Draws triangle elements from binded buffer\r\n   * @param {number} length\r\n   * @return {void}\r\n   */\r\n  public drawElementsTriangle(length: number): void {\r\n    if (!this.gl) {\r\n      return;\r\n    }\r\n    this.drawElements(this.gl.TRIANGLES, length);\r\n  }\r\n\r\n  /**\r\n   * Draws edges elements from binded buffer\r\n   * @param {number} length\r\n   * @return {void}\r\n   */\r\n  public drawElementsEdge(length: number): void {\r\n    if (!this.gl) {\r\n      return;\r\n    }\r\n    this.drawElements(this.gl.LINES, length);\r\n  }\r\n\r\n  /**\r\n   * Draws edges elements from binded buffer\r\n   * @param {number} length\r\n   * @return {void}\r\n   */\r\n  public drawElementsPoint(length: number): void {\r\n    if (!this.gl) {\r\n      return;\r\n    }\r\n    this.drawElements(this.gl.POINTS, length);\r\n  }\r\n\r\n\r\n  /**\r\n   * Draw array from binded buffer\r\n   * @param {number} type\r\n   * @param {number} length\r\n   * @return {void}\r\n   */\r\n  public drawArrays(type: number, length: number): void {\r\n    if (!this.gl) {\r\n      return;\r\n    }\r\n    this.gl.drawArrays(\r\n        type,\r\n        0,\r\n        length);\r\n  }\r\n\r\n  /**\r\n   * Draw triangle array from binded buffer\r\n   * @param {number} length\r\n   * @return {void}\r\n   */\r\n  public drawArraysTriangle(length: number): void {\r\n    if (!this.gl) {\r\n      return;\r\n    }\r\n    this.drawArrays(this.gl.TRIANGLES, length);\r\n  }\r\n\r\n  /**\r\n   * Draw edges array from binded buffer\r\n   * @param {number} length\r\n   * @return {void}\r\n   */\r\n  public drawArraysEdge(length: number): void {\r\n    if (!this.gl) {\r\n      return;\r\n    }\r\n    this.drawArrays(this.gl.LINES, length);\r\n  }\r\n\r\n  /**\r\n   * Draw point array from binded buffer\r\n   * @param {number} length\r\n   * @return {void}\r\n   */\r\n  public drawArraysPoint(length: number): void {\r\n    if (!this.gl) {\r\n      return;\r\n    }\r\n    this.drawArrays(this.gl.POINTS, length);\r\n  }\r\n}\r\n\r\nconst WebGLU = new WebGLUtils();\r\nexport default WebGLU;\r\n","import {mat4, vec3} from 'gl-matrix';\r\nimport RayCaster from 'WebGL/Raycast/RayCaster';\r\nimport BasicShader from 'WebGL/Shaders/BasicShader';\r\nimport WebGLU from 'WebGL/WebGlUtils';\r\n\r\ntype Distance = {\r\n  distance: number,\r\n};\r\n\r\nexport type PointHit = {\r\n  point: Point,\r\n} & Distance;\r\n\r\nexport type EdgeHit = {\r\n  edge: Edge,\r\n} & Distance;\r\n\r\nexport type FaceHit = {\r\n  face: Face,\r\n} & Distance;\r\n\r\n/**\r\n * Point class\r\n */\r\nexport class Point {\r\n  private point: vec3;\r\n\r\n  private vertexBuffer : WebGLBuffer | null = null;\r\n\r\n  /**\r\n   * Creates point from array\r\n   * @param {vec3} cords\r\n   */\r\n  constructor(cords: vec3) {\r\n    this.point = cords;\r\n    this.vertexBuffer = WebGLU.createBuffer();\r\n    this.recalculateBufferData();\r\n  }\r\n\r\n  /**\r\n   * Return cord values\r\n   * @return {vec3}\r\n   */\r\n  public getCords(): vec3 {\r\n    return this.point;\r\n  }\r\n\r\n  /**\r\n   * Sets cord values\r\n   * @param {vec3} c\r\n   * @return {void}\r\n   */\r\n  public setCords(c: vec3): void {\r\n    this.point = vec3.copy(this.point, c);\r\n  }\r\n\r\n  /**\r\n   * Deep compare of points\r\n   * @param {Point} p\r\n   * @return {boolean}\r\n   */\r\n  public deepCompare(p: Point): boolean {\r\n    return (this.point[0] === p.point[0]) &&\r\n      (this.point[1] === p.point[1]) &&\r\n      (this.point[2] === p.point[2]);\r\n  }\r\n\r\n  /**\r\n   * Raycasts points\r\n   * @param {RayCaster} raycaster\r\n   * @param {mat4} transformMatrix\r\n   * @return {PointHit | null}\r\n   */\r\n  public raycastPoint(raycaster: RayCaster, transformMatrix: mat4):\r\n      PointHit | null {\r\n    const pointMat = mat4.create();\r\n    mat4.identity(pointMat);\r\n    mat4.translate(pointMat, pointMat, this.point);\r\n    mat4.multiply(pointMat, transformMatrix, pointMat);\r\n\r\n    const worldPoint = vec3.create();\r\n    mat4.getTranslation(worldPoint, pointMat);\r\n\r\n    const dir = raycaster.getRay().getDirection();\r\n    const origin = raycaster.getRay().getOrigin();\r\n\r\n    const tmp = vec3.create();\r\n    const targetOriginVector = vec3.sub(tmp, worldPoint, origin);\r\n    const distanceFromOriginToHit = vec3.dot(targetOriginVector, dir);\r\n\r\n    if (distanceFromOriginToHit > 0) {\r\n      const tmp1 = vec3.create();\r\n      vec3.scale(tmp1, dir, distanceFromOriginToHit);\r\n      const distance = vec3.length(vec3.sub(tmp, targetOriginVector, tmp1));\r\n\r\n      const areaRange = distanceFromOriginToHit *\r\n        raycaster.getAreaRange() * 0.1;\r\n      if (distance < areaRange) {\r\n        return {point: this, distance: distanceFromOriginToHit};\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Draws this point\r\n   * @param {BasicShader} shader\r\n   */\r\n  public drawPoint(shader: BasicShader): void {\r\n    if (this.vertexBuffer) {\r\n      shader.use();\r\n      WebGLU.bindArrayBuffer(this.vertexBuffer);\r\n      shader.enablePosition();\r\n      WebGLU.drawArraysPoint(1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Recalculates webgl buffer data to draw\r\n   */\r\n  public recalculateBufferData(): void {\r\n    if (this.vertexBuffer) {\r\n      WebGLU.uploadDataToBuffer(this.vertexBuffer, this.point as number[]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns copy of this point\r\n   * @return {Point}\r\n   */\r\n  public copy(): Point {\r\n    const c = vec3.fromValues(this.point[0], this.point[1], this.point[2]);\r\n    return new Point(c);\r\n  }\r\n}\r\n\r\n/**\r\n * Edge class\r\n */\r\nexport class Edge {\r\n  private p1: Point;\r\n  private p2: Point;\r\n\r\n  private vertexBuffer : WebGLBuffer | null = null;\r\n  /**\r\n   * Creates Edge from given points\r\n   * @param {Point} p1\r\n   * @param {Point} p2\r\n   */\r\n  constructor(p1: Point, p2: Point) {\r\n    this.p1 = p1;\r\n    this.p2 = p2;\r\n\r\n    this.vertexBuffer = WebGLU.createBuffer();\r\n    this.recalculateBufferData();\r\n  }\r\n\r\n  /**\r\n   * Return Points in array\r\n   * @return {Point[]}\r\n   */\r\n  public getPoints(): Point[] {\r\n    return [this.p1, this.p2];\r\n  }\r\n\r\n  /**\r\n   * Compare by point addresses\r\n   * @param {Edge} e\r\n   * @return {boolean}\r\n   */\r\n  public shallowEqual(e: Edge): boolean {\r\n    return (this.p1 === e.p1 && this.p2 === e.p2) ||\r\n      (this.p1 === e.p2 && this.p2 === e.p1);\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {BasicShader} shader\r\n   */\r\n  public drawEdge(shader: BasicShader): void {\r\n    if (this.vertexBuffer) {\r\n      shader.use();\r\n      WebGLU.bindArrayBuffer(this.vertexBuffer);\r\n      shader.enablePosition();\r\n      WebGLU.drawArraysEdge(2);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Raycasts edges\r\n   * @param {RayCaster} raycaster\r\n   * @param {mat4} transformMatrix\r\n   * @return {EdgeHit | null}\r\n   */\r\n  public raycastEdge(raycaster: RayCaster, transformMatrix: mat4):\r\n      EdgeHit | null {\r\n    const worldP1 = vec3.create();\r\n    const worldP2 = vec3.create();\r\n    const pointMat = mat4.create();\r\n\r\n    mat4.identity(pointMat);\r\n    mat4.translate(pointMat, pointMat, this.p1.getCords());\r\n    mat4.multiply(pointMat, transformMatrix, pointMat);\r\n    mat4.getTranslation(worldP1, pointMat);\r\n\r\n    mat4.identity(pointMat);\r\n    mat4.translate(pointMat, pointMat, this.p2.getCords());\r\n    mat4.multiply(pointMat, transformMatrix, pointMat);\r\n    mat4.getTranslation(worldP2, pointMat);\r\n\r\n    const dirPoints = vec3.create();\r\n    const originPoints = worldP1;\r\n    vec3.sub(dirPoints, worldP2, worldP1);\r\n    vec3.normalize(dirPoints, dirPoints);\r\n\r\n\r\n    const n = vec3.create();\r\n    vec3.cross(n, dirPoints, raycaster.getRay().getDirection());\r\n    if (vec3.length(n) === 0) {\r\n      return null;\r\n    }\r\n\r\n    const diff = vec3.create();\r\n    vec3.sub(diff, worldP1, raycaster.getRay().getOrigin());\r\n    let distance = vec3.dot(n, diff)/vec3.length(n);\r\n    distance = Math.abs(distance);\r\n\r\n\r\n    // d2 -> dirPoint , p2 -> originPoints\r\n    const tmp = vec3.create();\r\n    const n2 = vec3.create();\r\n    vec3.cross(n2, dirPoints, n);\r\n    const distanceOnRay = vec3.dot(\r\n        vec3.sub(tmp, originPoints, raycaster.getRay().getOrigin()), n2)/\r\n        vec3.dot(raycaster.getRay().getDirection(), n2);\r\n    if (distanceOnRay <= 0) {\r\n      return null;\r\n    }\r\n\r\n    const areaRange = distanceOnRay * raycaster.getAreaRange() * 0.1;\r\n    if (distance < areaRange) {\r\n      const pointOnLine = vec3.create();\r\n      const n1 = vec3.create();\r\n\r\n      vec3.cross(n1, raycaster.getRay().getDirection(), n);\r\n      vec3.scale(tmp, dirPoints,\r\n          vec3.dot(vec3.sub(tmp, raycaster.getRay().getOrigin(),\r\n              originPoints), n1)/\r\n          vec3.dot(dirPoints, n1));\r\n\r\n      vec3.add(pointOnLine, originPoints, tmp);\r\n\r\n      const P1Cast = vec3.length(vec3.sub(tmp, pointOnLine, worldP1));\r\n      const CastP2 = vec3.length(vec3.sub(tmp, worldP2, pointOnLine));\r\n      const P1P2 = vec3.length(vec3.sub(tmp, worldP2, worldP1));\r\n\r\n      if (P1Cast + CastP2 <= P1P2 + 0.1) {\r\n        return {edge: this, distance: distanceOnRay};\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Recalculates webgl buffer data to draw\r\n   */\r\n  public recalculateBufferData(): void {\r\n    if (this.vertexBuffer) {\r\n      const tmpP1 = this.p1.getCords();\r\n      const tmpP2 = this.p2.getCords();\r\n      WebGLU.uploadDataToBuffer(this.vertexBuffer,\r\n          [tmpP1[0], tmpP1[1], tmpP1[2], tmpP2[0], tmpP2[1], tmpP2[2]]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns copy of this edge\r\n   * @return {Edge}\r\n   */\r\n  public copy(): Edge {\r\n    const p1 = this.getPoints()[0].copy();\r\n    const p2 = this.getPoints()[1].copy();\r\n    return new Edge(p1, p2);\r\n  }\r\n}\r\n\r\n/**\r\n * Face class\r\n */\r\nexport class Face {\r\n  private edges: [Edge, Edge, Edge];\r\n  private vertexBuffer: WebGLBuffer | null;\r\n  /**\r\n   * Creates Face from given edges\r\n   * @param {[Edge, Edge, Edge]} edges\r\n   */\r\n  constructor(edges: [Edge, Edge, Edge]) {\r\n    this.edges = edges;\r\n\r\n    this.vertexBuffer = WebGLU.createBuffer();\r\n    this.recalculateBufferData();\r\n  }\r\n\r\n  /**\r\n   * generates lines in form which can be drawn\r\n   * @return {number[]}\r\n   */\r\n  private generateVertexesArray(): number[] {\r\n    const pointsInEdges: Array<Point> = [];\r\n    const processedInfoArr: boolean[] =\r\n        new Array(this.edges.length).fill(false);\r\n    let prevProcessedNum = 0;\r\n    while (true) {\r\n      const escape =\r\n          processedInfoArr.reduce((prev, curr) => prev && curr, true);\r\n      if (escape) break;\r\n\r\n\r\n      this.edges.forEach((edge, i) => {\r\n        if (processedInfoArr[i]) return;\r\n        const [p1, p2] = edge.getPoints();\r\n        let findP1 = pointsInEdges.find((p) => p === p1);\r\n        let findP2 = pointsInEdges.find((p) => p === p2);\r\n        if (!findP1) {\r\n          findP1 = p1;\r\n        }\r\n        if (!findP2) {\r\n          findP2 = p2;\r\n        }\r\n\r\n        processedInfoArr[i] = true;\r\n        if (pointsInEdges.length === 0) {\r\n          pointsInEdges.push(findP1);\r\n          pointsInEdges.push(findP2);\r\n          return;\r\n        }\r\n        if (findP1 === pointsInEdges[0] &&\r\n            findP2 !== pointsInEdges[pointsInEdges.length - 1]) {\r\n          pointsInEdges.unshift(findP2);\r\n        } else if (findP1 === pointsInEdges[pointsInEdges.length - 1] &&\r\n            findP2 !== pointsInEdges[0]) {\r\n          pointsInEdges.push(findP2);\r\n        } else if (findP2 === pointsInEdges[0] &&\r\n            findP1 !== pointsInEdges[pointsInEdges.length - 1]) {\r\n          pointsInEdges.unshift(findP1);\r\n        } else if (findP2 === pointsInEdges[pointsInEdges.length - 1] &&\r\n            findP1 !== pointsInEdges[0]) {\r\n          pointsInEdges.push(findP1);\r\n        } else {\r\n          processedInfoArr[i] = false;\r\n        }\r\n      });\r\n\r\n      const newProcessedLength = processedInfoArr.filter((info) => info).length;\r\n      if (newProcessedLength === prevProcessedNum) break;\r\n      prevProcessedNum = newProcessedLength;\r\n    }\r\n\r\n    const vertices: number[][] = [];\r\n    pointsInEdges.forEach((p) => {\r\n      const vec = p.getCords();\r\n      vertices.push([vec[0], vec[1], vec[2]]);\r\n    });\r\n    return vertices.flat();\r\n  }\r\n\r\n  /**\r\n   * Return edges array\r\n   * @return {Edge[]}\r\n   */\r\n  public getEdges(): Edge[] {\r\n    return this.edges;\r\n  }\r\n\r\n  /**\r\n   * Return points arrays\r\n   * @return {Point[]}\r\n   */\r\n  public getPoints(): Point[] {\r\n    const a = this.edges[0].getPoints()[0];\r\n    const b = this.edges[0].getPoints()[1];\r\n    const c = this.edges[1].getPoints()[0] !== this.edges[0].getPoints()[0] &&\r\n      this.edges[1].getPoints()[0] !== this.edges[0].getPoints()[1]?\r\n      this.edges[1].getPoints()[0] :\r\n      this.edges[1].getPoints()[1];\r\n    return [a, b, c];\r\n  }\r\n  /**\r\n   * Draws this face\r\n   * @param {BasicShader} shader\r\n   */\r\n  public drawFace(shader: BasicShader): void {\r\n    if (this.vertexBuffer) {\r\n      shader.use();\r\n      WebGLU.bindArrayBuffer(this.vertexBuffer);\r\n      shader.enablePosition();\r\n      WebGLU.drawArraysTriangle(3);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Recalculates webgl buffer data to draw\r\n   */\r\n  public recalculateBufferData(): void {\r\n    if (this.vertexBuffer) {\r\n      WebGLU.uploadDataToBuffer(this.vertexBuffer,\r\n          this.generateVertexesArray());\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Raycasts faces\r\n   * @param {RayCaster} raycaster\r\n   * @param {mat4} transformMatrix\r\n   * @return {FaceHit | null}\r\n   */\r\n  public raycastFace(raycaster: RayCaster, transformMatrix: mat4):\r\n      FaceHit | null {\r\n    const faceNormal = vec3.create();\r\n    const tmp = vec3.create();\r\n    const pointMat = mat4.create();\r\n    const invTrans = mat4.create();\r\n    mat4.invert(invTrans, transformMatrix);\r\n\r\n    const localRayOrigin = vec3.create();\r\n    const localRayDirection = vec3.create();\r\n\r\n    const a = this.edges[0].getPoints()[0].getCords();\r\n    const b = this.edges[0].getPoints()[1].getCords();\r\n    const c = this.edges[1].getPoints()[0] !== this.edges[0].getPoints()[0] &&\r\n      this.edges[1].getPoints()[0] !== this.edges[0].getPoints()[1]?\r\n      this.edges[1].getPoints()[0].getCords() :\r\n      this.edges[1].getPoints()[1].getCords();\r\n\r\n    mat4.identity(pointMat);\r\n    mat4.translate(pointMat, pointMat, raycaster.getRay().getOrigin());\r\n    mat4.multiply(pointMat, invTrans, pointMat);\r\n    mat4.getTranslation(localRayOrigin, pointMat);\r\n\r\n    mat4.identity(pointMat);\r\n    mat4.translate(pointMat, pointMat, raycaster.getRay().getDirection());\r\n    pointMat[15] = 0;\r\n    mat4.multiply(pointMat, invTrans, pointMat);\r\n    mat4.getTranslation(localRayDirection, pointMat);\r\n\r\n    // console.log(transformMatrix, raycaster.getRay(), worldA, worldB, worldC);\r\n\r\n    const tmp1 = vec3.create();\r\n    vec3.cross(faceNormal, vec3.sub(tmp1, b, a),\r\n        vec3.sub(tmp, c, a));\r\n    vec3.normalize(faceNormal, faceNormal);\r\n\r\n\r\n    // if (vec3.dot(faceNormal, a) < 0) vec3.inverse(faceNormal, faceNormal);\r\n\r\n\r\n    // double sided normals\r\n    if (vec3.dot(localRayDirection, faceNormal) < 0) {\r\n      vec3.negate(faceNormal, faceNormal);\r\n    }\r\n\r\n    const d = vec3.dot(a, faceNormal);\r\n    vec3.negate(faceNormal, faceNormal);\r\n\r\n    const denominator = vec3.dot(localRayDirection, faceNormal);\r\n    if (!denominator) {\r\n      return null;\r\n    }\r\n\r\n    const numerator = -(vec3.dot(localRayOrigin, faceNormal) +\r\n        d);\r\n    const distance = numerator/denominator;\r\n    if (distance <= 0) {\r\n      return null;\r\n    }\r\n\r\n    const hitPoint = vec3.create();\r\n    vec3.copy(hitPoint, localRayOrigin);\r\n    vec3.scale(tmp, localRayDirection, distance);\r\n    vec3.add(hitPoint, hitPoint, tmp);\r\n\r\n    // vec3.cross(tmp, vec3.sub(tmp, worldB, worldA),\r\n    //     vec3.sub(tmp1, hitPoint, worldA));\r\n    const dot1 = this.testSide(hitPoint, a, b, c);\r\n\r\n    vec3.cross(tmp, vec3.sub(tmp, c, b),\r\n        vec3.sub(tmp1, hitPoint, b));\r\n    const dot2 = this.testSide(hitPoint, b, c, a);\r\n\r\n    vec3.cross(tmp, vec3.sub(tmp, a, c),\r\n        vec3.sub(tmp1, hitPoint, c));\r\n    // const dot3 = vec3.dot(tmp, faceNormal);\r\n    const dot3 = this.testSide(hitPoint, c, a, b);\r\n    if (dot1 && dot2 && dot3) {\r\n      const worldHitPoint = vec3.create();\r\n      const objToWorldMat = mat4.create();\r\n      mat4.invert(objToWorldMat, transformMatrix);\r\n      vec3.transformMat4(worldHitPoint, hitPoint, objToWorldMat);\r\n\r\n      return {\r\n        face: this,\r\n        distance: vec3.distance(worldHitPoint, raycaster.getRay().getOrigin()),\r\n      };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Test on which side of line is vector\r\n   * @param {vec3} p1\r\n   * @param {vec3} p2\r\n   * @param {vec3} a\r\n   * @param {vec3} b\r\n   * @return {boolean}\r\n   */\r\n  private testSide(p1: vec3, p2: vec3, a: vec3, b: vec3): boolean {\r\n    const tmp1 = vec3.create();\r\n    const tmp2 = vec3.create();\r\n\r\n    const cp1 = vec3.create();\r\n    const cp2 = vec3.create();\r\n    vec3.cross(cp1, vec3.sub(tmp1, b, a), vec3.sub(tmp2, p1, a));\r\n    vec3.cross(cp2, vec3.sub(tmp1, b, a), vec3.sub(tmp2, p2, a));\r\n    if (vec3.dot(cp1, cp2) > 0 ) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns copy of this face\r\n   * @return {Face}\r\n   */\r\n  public copy(): Face {\r\n    const points = this.getPoints().map((p) => {\r\n      return p.copy();\r\n    });\r\n    const cpyE = this.edges.map((e) => {\r\n      const pInE = e.getPoints();\r\n      const p1I = this.getPoints().indexOf(pInE[0]);\r\n      const p2I = this.getPoints().indexOf(pInE[1]);\r\n      const p1 = points[p1I];\r\n      const p2 = points[p2I];\r\n      return new Edge(p1, p2);\r\n    }) as [Edge, Edge, Edge];\r\n    return new Face(cpyE);\r\n  }\r\n}\r\n","import {Edge, Face, Point} from './MeshUtils';\r\nimport {vec3} from 'gl-matrix';\r\nimport {GeometryBuilder, GeometryProvider} from './GeometryProvider';\r\n\r\n/**\r\n * Circle mesh class\r\n */\r\nexport class Circle implements GeometryProvider {\r\n  private faces: Face[] = [];\r\n  private edges: Edge[] = [];\r\n  private points: Point[] = [];\r\n\r\n  private outerRadius = 2;\r\n  private innerRadius = 1;\r\n  private radialSegments = 8;\r\n  private thetaStart = 0;\r\n  private thetaLength = Math.PI * 2;\r\n\r\n  /**\r\n   * Creates a new Cube mesh\r\n   * @param {number} outerRadius\r\n   * @param {number} innerRadius\r\n   * @param {number} radialSegments\r\n   * @param {number} thetaStart\r\n   * @param {number} thetaLength\r\n   */\r\n  constructor(outerRadius = 2, innerRadius = 1, radialSegments = 8,\r\n      thetaStart = 0, thetaLength = Math.PI * 2 ) {\r\n    this.outerRadius = outerRadius;\r\n    this.innerRadius= innerRadius;\r\n    this.radialSegments = radialSegments;\r\n    this.thetaStart = thetaStart;\r\n    this.thetaLength = thetaLength;\r\n\r\n    this.generateCircle();\r\n  }\r\n\r\n  /**\r\n   * @return {Point[]}\r\n   */\r\n  getPoints(): Point[] {\r\n    return this.points;\r\n  }\r\n\r\n  /**\r\n   * @return {Edge[]}\r\n   */\r\n  getEdges(): Edge[] {\r\n    return this.edges;\r\n  }\r\n\r\n  /**\r\n   * @return {Face[]}\r\n   */\r\n  getFaces(): Face[] {\r\n    return this.faces;\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  private generateCircle() {\r\n    let index = 0;\r\n    const outerPsI: number[] = [];\r\n    const innerPsI: number[] = [];\r\n    for ( let j = 0; j < this.radialSegments; j ++ ) {\r\n      const v = j / this.radialSegments * this.thetaLength + this.thetaStart;\r\n\r\n      const outerP = new Point([\r\n        this.outerRadius * Math.cos(v),\r\n        this.outerRadius * Math.sin(v),\r\n        0]);\r\n      this.points.push(outerP);\r\n      outerPsI.push(index++);\r\n\r\n      const innerP = new Point([\r\n        this.innerRadius * Math.cos(v),\r\n        this.innerRadius * Math.sin(v),\r\n        0]);\r\n      this.points.push(innerP);\r\n      innerPsI.push(index++);\r\n    }\r\n\r\n    for ( let i = 0; i < this.radialSegments; i ++ ) {\r\n      const pa = this.points[innerPsI[i]];\r\n      const pb = this.points[innerPsI[(i+1)%this.radialSegments]];\r\n      const pc = this.points[outerPsI[(i+1)%this.radialSegments]];\r\n      const pd = this.points[outerPsI[i]];\r\n      let edgeAB = new Edge(pa, pb);\r\n      const findEAB = this.edges.find((e) => {\r\n        return e.shallowEqual(edgeAB);\r\n      });\r\n      if (findEAB) {\r\n        edgeAB = findEAB;\r\n      } else {\r\n        this.edges.push(edgeAB);\r\n      }\r\n      let edgeBD = new Edge(pb, pd);\r\n      const findEBD = this.edges.find((e) => {\r\n        return e.shallowEqual(edgeBD);\r\n      });\r\n      if (findEBD) {\r\n        edgeBD = findEBD;\r\n      } else {\r\n        this.edges.push(edgeBD);\r\n      }\r\n      let edgeDA = new Edge(pd, pa);\r\n      const findEDA = this.edges.find((e) => {\r\n        return e.shallowEqual(edgeDA);\r\n      });\r\n      if (findEDA) {\r\n        edgeDA = findEDA;\r\n      } else {\r\n        this.edges.push(edgeDA);\r\n      }\r\n      let edgeBC = new Edge(pb, pc);\r\n      const findEBC = this.edges.find((e) => {\r\n        return e.shallowEqual(edgeBC);\r\n      });\r\n      if (findEBC) {\r\n        edgeBC = findEBC;\r\n      } else {\r\n        this.edges.push(edgeBC);\r\n      }\r\n      let edgeCD = new Edge(pc, pd);\r\n      const findECD = this.edges.find((e) => {\r\n        return e.shallowEqual(edgeCD);\r\n      });\r\n      if (findECD) {\r\n        edgeCD = findECD;\r\n      } else {\r\n        this.edges.push(edgeCD);\r\n      }\r\n\r\n      // faces\r\n      this.faces.push(new Face([edgeAB, edgeBD, edgeDA]));\r\n      this.faces.push(new Face([edgeBC, edgeCD, edgeBD]));\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Circle builder class\r\n */\r\nexport class CircleBuilder implements GeometryBuilder {\r\n  private outerRadius = 2;\r\n  private innerRadius = 1;\r\n  private radialSegments = 8;\r\n  private thetaStart = 0;\r\n  private thetaLength = Math.PI * 2;\r\n\r\n  /**\r\n   * Set radius\r\n   * @param {number} outerRadius\r\n   * @return {CircleBuilder}\r\n   */\r\n  public setOuterRadius(outerRadius: number): CircleBuilder {\r\n    this.outerRadius = outerRadius;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set height\r\n   * @param {number} innerRadius\r\n   * @return {CircleBuilder}\r\n   */\r\n  public setInnerRadius(innerRadius: number): CircleBuilder {\r\n    this.innerRadius = innerRadius;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set number of radial segments\r\n   * @param {number} radialSegments\r\n   * @return {CircleBuilder}\r\n   */\r\n  public setRadialSegments(radialSegments: number): CircleBuilder {\r\n    this.radialSegments = radialSegments;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set starting angle\r\n   * @param {number} thetaStart\r\n   * @return {CircleBuilder}\r\n   */\r\n  public setThetaStart(thetaStart: number): CircleBuilder {\r\n    this.thetaStart = thetaStart;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set angle length of cylinder\r\n   * @param {number} thetaLength\r\n   * @return {CircleBuilder}\r\n   */\r\n  public setThetaLength(thetaLength: number): CircleBuilder {\r\n    this.thetaLength = thetaLength;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Builds circle mesh\r\n   * @return {Circle}\r\n   * @return {CircleBuilder}\r\n   */\r\n  public build(): Circle {\r\n    return new Circle(this.outerRadius, this.innerRadius,\r\n        this.radialSegments, this.thetaStart,\r\n        this.thetaLength);\r\n  }\r\n}\r\n\r\nconst CircleInst = new Circle();\r\nexport default CircleInst;\r\n","import {Edge, Face, Point} from './MeshUtils';\r\nimport {vec3} from 'gl-matrix';\r\nimport {GeometryBuilder, GeometryProvider} from './GeometryProvider';\r\n\r\n/**\r\n * Cone mesh class\r\n */\r\nexport class Cone implements GeometryProvider {\r\n  private faces: Face[] = [];\r\n  private edges: Edge[] = [];\r\n  private points: Point[] = [];\r\n\r\n  private radius = 1;\r\n  private height = 1;\r\n  private radialSegments = 8;\r\n  private heightSegments = 3;\r\n  private thetaStart = 0;\r\n  private thetaLength = Math.PI * 2;\r\n\r\n  /**\r\n   * Creates cone mesh\r\n   * @param {number} radius\r\n   * @param {number} height\r\n   * @param {number} radialSegments\r\n   * @param {number} heightSegments\r\n   * @param {number} thetaStart\r\n   * @param {number} thetaLength\r\n   */\r\n  constructor( radius = 1, height = 1, radialSegments = 8, heightSegments = 2,\r\n      thetaStart = 0, thetaLength = Math.PI * 2 ) {\r\n    this.radius = radius;\r\n    this.height = height;\r\n    this.radialSegments = Math.floor(radialSegments);\r\n    this.heightSegments = Math.floor(heightSegments);\r\n    this.thetaStart = thetaStart;\r\n    this.thetaLength = thetaLength;\r\n\r\n    this.generateTorso();\r\n    this.generateBase();\r\n  }\r\n\r\n  /**\r\n   * @return {Point[]}\r\n   */\r\n  getPoints(): Point[] {\r\n    return this.points;\r\n  }\r\n\r\n  /**\r\n   * @return {Edge[]}\r\n   */\r\n  getEdges(): Edge[] {\r\n    return this.edges;\r\n  }\r\n\r\n  /**\r\n   * @return {Face[]}\r\n   */\r\n  getFaces(): Face[] {\r\n    return this.faces;\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  private generateBase() {\r\n    const halfHeight = this.height / 2;\r\n    const points: Point[] =\r\n    this.points.slice(0, this.radialSegments);\r\n\r\n    const center = new Point([0, -halfHeight, 0]);\r\n    this.points.push(center);\r\n\r\n    for ( let x = 0; x < this.radialSegments; x ++ ) {\r\n      const outerEdge = new Edge(points[x], points[(x+1)%this.radialSegments]);\r\n      let foundE = this.edges.find((e) => {\r\n        return e.shallowEqual(outerEdge);\r\n      });\r\n      if (!foundE) {\r\n        this.edges.push(outerEdge);\r\n        foundE = outerEdge;\r\n      }\r\n\r\n      const l1 = new Edge(center, points[x]);\r\n      const l2 = new Edge(center, points[(x+1)%this.radialSegments]);\r\n      this.edges.push(l1);\r\n      this.edges.push(l2);\r\n      this.faces.push(new Face([l1, l2, foundE]));\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  private generateTorso() {\r\n    let index = 0;\r\n    const indexArray:number[][] = [];\r\n    const halfHeight = this.height / 2;\r\n\r\n    for ( let y = 0; y <= this.heightSegments - 1; y ++ ) {\r\n      const indexRow: number[] = [];\r\n\r\n      const v = (this.heightSegments - y) / this.heightSegments;\r\n\r\n      const radius =\r\n        v * this.radius;\r\n\r\n      for ( let x = 0; x <= this.radialSegments; x ++ ) {\r\n        const u = x / this.radialSegments;\r\n\r\n        const theta = u * this.thetaLength + this.thetaStart;\r\n\r\n        const sinTheta = Math.sin( theta );\r\n        const cosTheta = Math.cos( theta );\r\n\r\n        // vertex\r\n        this.points.push( new Point(\r\n            [radius * sinTheta,\r\n              - v * this.height + halfHeight,\r\n              radius * cosTheta],\r\n        ));\r\n        indexRow.push( index ++ );\r\n      }\r\n      indexArray.push( indexRow );\r\n    }\r\n\r\n    for ( let x = 0; x < this.radialSegments; x ++ ) {\r\n      for ( let y = 0; y < this.heightSegments - 1; y ++ ) {\r\n        const a = indexArray[y][x];\r\n        const b = indexArray[y + 1][x];\r\n        const c = indexArray[y + 1][x + 1];\r\n        const d = indexArray[y][x + 1];\r\n\r\n        const pa = this.points[a];\r\n        const pb = this.points[b];\r\n        const pc = this.points[c];\r\n        const pd = this.points[d];\r\n\r\n        let edgeAB = new Edge(pa, pb);\r\n        const findEAB = this.edges.find((e) => {\r\n          return e.shallowEqual(edgeAB);\r\n        });\r\n        if (findEAB) {\r\n          edgeAB = findEAB;\r\n        } else {\r\n          this.edges.push(edgeAB);\r\n        }\r\n\r\n        let edgeBD = new Edge(pb, pd);\r\n        const findEBD = this.edges.find((e) => {\r\n          return e.shallowEqual(edgeBD);\r\n        });\r\n        if (findEBD) {\r\n          edgeBD = findEBD;\r\n        } else {\r\n          this.edges.push(edgeBD);\r\n        }\r\n\r\n        let edgeDA = new Edge(pd, pa);\r\n        const findEDA = this.edges.find((e) => {\r\n          return e.shallowEqual(edgeDA);\r\n        });\r\n        if (findEDA) {\r\n          edgeDA = findEDA;\r\n        } else {\r\n          this.edges.push(edgeDA);\r\n        }\r\n\r\n        let edgeBC = new Edge(pb, pc);\r\n        const findEBC = this.edges.find((e) => {\r\n          return e.shallowEqual(edgeBC);\r\n        });\r\n        if (findEBC) {\r\n          edgeBC = findEBC;\r\n        } else {\r\n          this.edges.push(edgeBC);\r\n        }\r\n\r\n        let edgeCD = new Edge(pc, pd);\r\n        const findECD = this.edges.find((e) => {\r\n          return e.shallowEqual(edgeCD);\r\n        });\r\n        if (findECD) {\r\n          edgeCD = findECD;\r\n        } else {\r\n          this.edges.push(edgeCD);\r\n        }\r\n\r\n        // faces\r\n        this.faces.push(new Face([edgeAB, edgeBD, edgeDA]));\r\n        this.faces.push(new Face([edgeBC, edgeCD, edgeBD]));\r\n      }\r\n    }\r\n    const points: Point[] =\r\n      this.points.slice(this.points.length - this.radialSegments);\r\n\r\n    const center = new Point([0, halfHeight, 0]);\r\n    this.points.push(center);\r\n\r\n    for ( let x = 0; x < this.radialSegments; x ++ ) {\r\n      const outerEdge = new Edge(points[x], points[(x+1)%this.radialSegments]);\r\n      let foundE = this.edges.find((e) => {\r\n        return e.shallowEqual(outerEdge);\r\n      });\r\n      if (!foundE) {\r\n        this.edges.push(outerEdge);\r\n        foundE = outerEdge;\r\n      }\r\n\r\n      const l1 = new Edge(center, points[x]);\r\n      const l2 = new Edge(center, points[(x+1)%this.radialSegments]);\r\n      this.edges.push(l1);\r\n      this.edges.push(l2);\r\n      this.faces.push(new Face([l1, l2, foundE]));\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Cone builder class\r\n */\r\nexport class ConeBuilder implements GeometryBuilder {\r\n  private radius = 1;\r\n  private height = 1;\r\n  private radialSegments = 8;\r\n  private heightSegments = 3;\r\n  private thetaStart = 0;\r\n  private thetaLength = Math.PI * 2;\r\n\r\n  /**\r\n   * Set radius\r\n   * @param {number} radius\r\n   * @return {ConeBuilder}\r\n   */\r\n  public setRadius(radius: number): ConeBuilder {\r\n    this.radius = radius;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set height\r\n   * @param {number} height\r\n   * @return {ConeBuilder}\r\n   */\r\n  public setHeight(height: number): ConeBuilder {\r\n    this.height = height;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set number of radial segments\r\n   * @param {number} radialSegments\r\n   * @return {ConeBuilder}\r\n   */\r\n  public setRadialSegments(radialSegments: number): ConeBuilder {\r\n    this.radialSegments = radialSegments;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set number of height segments\r\n   * @param {number} heightSegments\r\n   * @return {ConeBuilder}\r\n   */\r\n  public setHeightSegments(heightSegments: number): ConeBuilder {\r\n    this.heightSegments = heightSegments;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set starting angle\r\n   * @param {number} thetaStart\r\n   * @return {ConeBuilder}\r\n   */\r\n  public setThetaStart(thetaStart: number): ConeBuilder {\r\n    this.thetaStart = thetaStart;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set angle length of cylinder\r\n   * @param {number} thetaLength\r\n   * @return {ConeBuilder}\r\n   */\r\n  public setThetaLength(thetaLength: number): ConeBuilder {\r\n    this.thetaLength = thetaLength;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Builds cone mesh\r\n   * @return {Cone}\r\n   */\r\n  public build(): Cone {\r\n    return new Cone(this.radius, this.height,\r\n        this.radialSegments, this.heightSegments,\r\n        this.thetaStart, this.thetaLength);\r\n  }\r\n}\r\n\r\nconst ConeInst = new Cone();\r\nexport default ConeInst;\r\n","import {Edge, Face, Point} from './MeshUtils';\r\nimport {vec3} from 'gl-matrix';\r\nimport {GeometryBuilder, GeometryProvider} from './GeometryProvider';\r\n\r\n/**\r\n * Cube mesh class\r\n */\r\nexport class Cube implements GeometryProvider {\r\n  private faces: Face[] = [];\r\n  private edges: Edge[] = [];\r\n  private points: Point[] = [];\r\n\r\n  /**\r\n   * Creates new cube mesh\r\n   * @param {number} xHalfWidth\r\n   * @param {number} yHalfWidth\r\n   * @param {number} zHalfWidth\r\n   */\r\n  constructor(xHalfWidth = 1, yHalfWidth = 1, zHalfWidth = 1) {\r\n    this.points = [\r\n      new Point([xHalfWidth, yHalfWidth, zHalfWidth]),\r\n      new Point([xHalfWidth, yHalfWidth, -zHalfWidth]),\r\n\r\n      new Point([xHalfWidth, -yHalfWidth, zHalfWidth]),\r\n      new Point([xHalfWidth, -yHalfWidth, -zHalfWidth]),\r\n\r\n      new Point([-xHalfWidth, yHalfWidth, zHalfWidth]),\r\n      new Point([-xHalfWidth, yHalfWidth, -zHalfWidth]),\r\n\r\n      new Point([-xHalfWidth, -yHalfWidth, zHalfWidth]),\r\n      new Point([-xHalfWidth, -yHalfWidth, -zHalfWidth]),\r\n    ];\r\n\r\n    this.edges = [\r\n      new Edge(this.points[6], this.points[2]), // Front // 0\r\n      new Edge(this.points[2], this.points[0]), // 1\r\n      new Edge(this.points[0], this.points[6]), // 2\r\n\r\n      new Edge(this.points[4], this.points[6]), // 3\r\n\r\n\r\n      new Edge(this.points[7], this.points[5]), // Back // 4\r\n      new Edge(this.points[5], this.points[1]), // 5\r\n      new Edge(this.points[1], this.points[7]), // 6\r\n\r\n      new Edge(this.points[1], this.points[3]), // 7\r\n      new Edge(this.points[3], this.points[7]), // 8\r\n\r\n\r\n      new Edge(this.points[5], this.points[4]), // Top // 9\r\n      new Edge(this.points[4], this.points[0]), // 10\r\n      new Edge(this.points[0], this.points[5]), // 11\r\n\r\n      new Edge(this.points[0], this.points[1]), // 12\r\n\r\n\r\n      new Edge(this.points[3], this.points[2]), // Bottom // 13\r\n      new Edge(this.points[2], this.points[7]), // 14\r\n\r\n      new Edge(this.points[6], this.points[7]), // 15\r\n\r\n\r\n      new Edge(this.points[0], this.points[3]), // Right // 16\r\n\r\n\r\n      new Edge(this.points[4], this.points[7]), // Left // 17\r\n    ];\r\n\r\n    this.faces = [\r\n      new Face([this.edges[0], this.edges[1], this.edges[2]]), // Front\r\n      new Face([this.edges[2], this.edges[3], this.edges[10]]),\r\n\r\n      new Face([this.edges[4], this.edges[5], this.edges[6]]), // Back\r\n      new Face([this.edges[6], this.edges[7], this.edges[8]]),\r\n\r\n      new Face([this.edges[9], this.edges[10], this.edges[11]]), // Top\r\n      new Face([this.edges[11], this.edges[12], this.edges[5]]),\r\n\r\n      new Face([this.edges[8], this.edges[13], this.edges[14]]), // Bottom\r\n      new Face([this.edges[14], this.edges[0], this.edges[15]]),\r\n\r\n      new Face([this.edges[7], this.edges[12], this.edges[16]]), // Right\r\n      new Face([this.edges[16], this.edges[1], this.edges[13]]),\r\n\r\n      new Face([this.edges[15], this.edges[3], this.edges[17]]), // Bottom\r\n      new Face([this.edges[17], this.edges[9], this.edges[4]]),\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * @return {Point[]}\r\n   */\r\n  getPoints(): Point[] {\r\n    return this.points;\r\n  }\r\n\r\n  /**\r\n   * @return {Edge[]}\r\n   */\r\n  getEdges(): Edge[] {\r\n    return this.edges;\r\n  }\r\n\r\n  /**\r\n   * @return {Face[]}\r\n   */\r\n  getFaces(): Face[] {\r\n    return this.faces;\r\n  }\r\n}\r\n\r\n/**\r\n * Cube builder class\r\n */\r\nexport class CubeBuilder implements GeometryBuilder {\r\n  private xHalfWidth = 1;\r\n  private yHalfWidth = 1;\r\n  private zHalfWidth = 1;\r\n\r\n  /**\r\n   * Sets half width in x axis\r\n   * @param {number} xHalfWidth\r\n   * @return {CubeBuilder}\r\n   */\r\n  public setXHalfWidth(xHalfWidth: number): CubeBuilder {\r\n    this.xHalfWidth = xHalfWidth;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets half  width in y axis\r\n   * @param {number} yHalfWidth\r\n   * @return {CubeBuilder}\r\n   */\r\n  public setYHalfWidth(yHalfWidth: number): CubeBuilder {\r\n    this.yHalfWidth = yHalfWidth;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets half width in z axis\r\n   * @param {number} zHalfWidth\r\n   * @return {CubeBuilder}\r\n   */\r\n  public setZHalfWidth(zHalfWidth: number): CubeBuilder {\r\n    this.zHalfWidth = zHalfWidth;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Builds new cube mesh\r\n   * @return {Cube}\r\n   */\r\n  public build(): Cube {\r\n    return new Cube(this.xHalfWidth, this.yHalfWidth, this.zHalfWidth);\r\n  }\r\n}\r\n\r\nconst CubeInst = new Cube();\r\nexport default CubeInst;\r\n","import {Edge, Face, Point} from './MeshUtils';\r\nimport {vec3} from 'gl-matrix';\r\nimport {GeometryBuilder, GeometryProvider} from './GeometryProvider';\r\n\r\n/**\r\n * Cube mesh class\r\n */\r\nexport class Cylinder implements GeometryProvider {\r\n  private faces: Face[] = [];\r\n  private edges: Edge[] = [];\r\n  private points: Point[] = [];\r\n\r\n  private radiusTop = 1;\r\n  private radiusBottom = 1;\r\n  private height = 1;\r\n  private radialSegments = 8;\r\n  private heightSegments = 1;\r\n  private openEnded = false;\r\n  private thetaStart = 0;\r\n  private thetaLength = Math.PI * 2;\r\n\r\n  /**\r\n   * Creates new Cylinder\r\n   * @param {number} radiusTop\r\n   * @param {number} radiusBottom\r\n   * @param {number} height\r\n   * @param {number} radialSegments\r\n   * @param {number} heightSegments\r\n   * @param {boolean} openEnded\r\n   * @param {number} thetaStart\r\n   * @param {number} thetaLength\r\n   */\r\n  constructor(radiusTop = 1, radiusBottom = 1, height = 1,\r\n      radialSegments = 8, heightSegments = 1, openEnded = false,\r\n      thetaStart = 0, thetaLength = Math.PI * 2 ) {\r\n    this.radiusTop = radiusTop;\r\n    this.radiusBottom = radiusBottom;\r\n    this.height = height;\r\n    this.radialSegments = Math.floor(radialSegments);\r\n    this.heightSegments = Math.floor(heightSegments);\r\n    this.openEnded = openEnded;\r\n    this.thetaStart = thetaStart;\r\n    this.thetaLength = thetaLength;\r\n\r\n    this.generateTorso();\r\n    if ( this.openEnded === false ) {\r\n      if ( radiusTop > 0 ) this.generateCap( true );\r\n      if ( radiusBottom > 0 ) this.generateCap( false );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @return {Point[]}\r\n   */\r\n  getPoints(): Point[] {\r\n    return this.points;\r\n  }\r\n\r\n  /**\r\n   * @return {Edge[]}\r\n   */\r\n  getEdges(): Edge[] {\r\n    return this.edges;\r\n  }\r\n\r\n  /**\r\n   * @return {Face[]}\r\n   */\r\n  getFaces(): Face[] {\r\n    return this.faces;\r\n  }\r\n\r\n  /**\r\n   * generates Torso\r\n   */\r\n  private generateTorso() {\r\n    let index = 0;\r\n    const indexArray:number[][] = [];\r\n    const halfHeight = this.height / 2;\r\n\r\n    for ( let y = 0; y <= this.heightSegments; y ++ ) {\r\n      const indexRow: number[] = [];\r\n\r\n      const v = y / this.heightSegments;\r\n\r\n      const radius =\r\n        v * ( this.radiusBottom - this.radiusTop ) + this.radiusTop;\r\n\r\n      for ( let x = 0; x <= this.radialSegments; x ++ ) {\r\n        const u = x / this.radialSegments;\r\n\r\n        const theta = u * this.thetaLength + this.thetaStart;\r\n\r\n        const sinTheta = Math.sin( theta );\r\n        const cosTheta = Math.cos( theta );\r\n\r\n        // vertex\r\n        this.points.push( new Point(\r\n            [radius * sinTheta,\r\n              - v * this.height + halfHeight,\r\n              radius * cosTheta],\r\n        ));\r\n        indexRow.push( index ++ );\r\n      }\r\n      indexArray.push( indexRow );\r\n    }\r\n\r\n    for ( let x = 0; x < this.radialSegments; x ++ ) {\r\n      for ( let y = 0; y < this.heightSegments; y ++ ) {\r\n        const a = indexArray[y][x];\r\n        const b = indexArray[y + 1][x];\r\n        const c = indexArray[y + 1][x + 1];\r\n        const d = indexArray[y][x + 1];\r\n\r\n        const pa = this.points[a];\r\n        const pb = this.points[b];\r\n        const pc = this.points[c];\r\n        const pd = this.points[d];\r\n\r\n        let edgeAB = new Edge(pa, pb);\r\n        const findEAB = this.edges.find((e) => {\r\n          return e.shallowEqual(edgeAB);\r\n        });\r\n        if (findEAB) {\r\n          edgeAB = findEAB;\r\n        } else {\r\n          this.edges.push(edgeAB);\r\n        }\r\n\r\n        let edgeBD = new Edge(pb, pd);\r\n        const findEBD = this.edges.find((e) => {\r\n          return e.shallowEqual(edgeBD);\r\n        });\r\n        if (findEBD) {\r\n          edgeBD = findEBD;\r\n        } else {\r\n          this.edges.push(edgeBD);\r\n        }\r\n\r\n        let edgeDA = new Edge(pd, pa);\r\n        const findEDA = this.edges.find((e) => {\r\n          return e.shallowEqual(edgeDA);\r\n        });\r\n        if (findEDA) {\r\n          edgeDA = findEDA;\r\n        } else {\r\n          this.edges.push(edgeDA);\r\n        }\r\n\r\n        let edgeBC = new Edge(pb, pc);\r\n        const findEBC = this.edges.find((e) => {\r\n          return e.shallowEqual(edgeBC);\r\n        });\r\n        if (findEBC) {\r\n          edgeBC = findEBC;\r\n        } else {\r\n          this.edges.push(edgeBC);\r\n        }\r\n\r\n        let edgeCD = new Edge(pc, pd);\r\n        const findECD = this.edges.find((e) => {\r\n          return e.shallowEqual(edgeCD);\r\n        });\r\n        if (findECD) {\r\n          edgeCD = findECD;\r\n        } else {\r\n          this.edges.push(edgeCD);\r\n        }\r\n\r\n        // faces\r\n        this.faces.push(new Face([edgeAB, edgeBD, edgeDA]));\r\n        this.faces.push(new Face([edgeBC, edgeCD, edgeBD]));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generates base\r\n   * @param {boolean} top\r\n   */\r\n  private generateCap(top: boolean) {\r\n    const indexArray:number[][] = [];\r\n    const halfHeight = this.height / 2;\r\n\r\n    const radius = ( top === true ) ? this.radiusTop : this.radiusBottom;\r\n    const sign = ( top === true ) ? 1 : - 1;\r\n    let points: Point[] = [];\r\n\r\n    try {\r\n      points = (top === true) ? this.points.slice(0, this.radialSegments) :\r\n        this.points.slice(this.points.length - this.radialSegments);\r\n    } catch (e) {\r\n      return;\r\n    }\r\n\r\n    const center = new Point([0, halfHeight * sign, 0]);\r\n    this.points.push(center);\r\n\r\n    for ( let x = 0; x < this.radialSegments; x ++ ) {\r\n      const outerEdge = new Edge(points[x], points[(x+1)%this.radialSegments]);\r\n      let foundE = this.edges.find((e) => {\r\n        return e.shallowEqual(outerEdge);\r\n      });\r\n      if (!foundE) {\r\n        this.edges.push(outerEdge);\r\n        foundE = outerEdge;\r\n      }\r\n\r\n      const l1 = new Edge(center, points[x]);\r\n      const l2 = new Edge(center, points[(x+1)%this.radialSegments]);\r\n      this.edges.push(l1);\r\n      this.edges.push(l2);\r\n      this.faces.push(new Face([l1, l2, foundE]));\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Cylinder builder class\r\n */\r\nexport class CylinderBuilder implements GeometryBuilder {\r\n  private radiusTop = 1;\r\n  private radiusBottom = 1;\r\n  private height = 1;\r\n  private radialSegments = 8;\r\n  private heightSegments = 1;\r\n  private openEnded = false;\r\n  private thetaStart = 0;\r\n  private thetaLength = Math.PI * 2;\r\n\r\n  /**\r\n   * Set radius top\r\n   * @param {number} radiusTop\r\n   * @return {CylinderBuilder}\r\n   */\r\n  public setRadiusTop(radiusTop: number): CylinderBuilder {\r\n    this.radiusTop = radiusTop;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set radius bottom\r\n   * @param {number} radiusBottom\r\n   * @return {CylinderBuilder}\r\n   */\r\n  public setRadiusBottom(radiusBottom: number): CylinderBuilder {\r\n    this.radiusBottom = radiusBottom;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set height\r\n   * @param {number} height\r\n   * @return {CylinderBuilder}\r\n   */\r\n  public setHeight(height: number): CylinderBuilder {\r\n    this.height = height;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set number of radial segments\r\n   * @param {number} radialSegments\r\n   * @return {CylinderBuilder}\r\n   */\r\n  public setRadialSegments(radialSegments: number): CylinderBuilder {\r\n    this.radialSegments = radialSegments;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set number of height segments\r\n   * @param {number} heightSegments\r\n   * @return {CylinderBuilder}\r\n   */\r\n  public setHeightSegments(heightSegments: number): CylinderBuilder {\r\n    this.heightSegments = heightSegments;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set is cylinder opened\r\n   * @param {boolean} openEnded\r\n   * @return {CylinderBuilder}\r\n   */\r\n  public setOpenEnded(openEnded: boolean): CylinderBuilder {\r\n    this.openEnded = openEnded;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set starting angle\r\n   * @param {number} thetaStart\r\n   * @return {CylinderBuilder}\r\n   */\r\n  public setThetaStart(thetaStart: number): CylinderBuilder {\r\n    this.thetaStart = thetaStart;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set angle length of cylinder\r\n   * @param {number} thetaLength\r\n   * @return {CylinderBuilder}\r\n   */\r\n  public setThetaLength(thetaLength: number): CylinderBuilder {\r\n    this.thetaLength = thetaLength;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Builds cylinder mesh\r\n   * @return {Cylinder}\r\n   * @return {CylinderBuilder}\r\n   */\r\n  public build(): Cylinder {\r\n    return new Cylinder(this.radiusTop, this.radiusBottom, this.height,\r\n        this.radialSegments, this.heightSegments, this.openEnded,\r\n        this.thetaStart, this.thetaLength);\r\n  }\r\n}\r\n\r\nconst CylinderInst = new Cylinder();\r\nexport default CylinderInst;\r\n","import {Edge, Face, Point} from './MeshUtils';\r\nimport {vec3} from 'gl-matrix';\r\nimport {GeometryBuilder, GeometryProvider} from './GeometryProvider';\r\n\r\n/**\r\n * Torus mesh class\r\n */\r\nexport class Torus implements GeometryProvider {\r\n  private faces: Face[] = [];\r\n  private edges: Edge[] = [];\r\n  private points: Point[] = [];\r\n\r\n\r\n  /**\r\n   * Creates torus mesh\r\n   * @param {number} radius\r\n   * @param {number} tube\r\n   * @param {number} radialSegments\r\n   * @param {number} tubularSegments\r\n   * @param {number} arc\r\n   */\r\n  constructor( radius = 1, tube = 0.4, radialSegments = 8,\r\n      tubularSegments = 6, arc = Math.PI * 2 ) {\r\n    radialSegments = Math.floor( radialSegments );\r\n    tubularSegments = Math.floor( tubularSegments );\r\n\r\n\r\n    for ( let j = 0; j <= radialSegments; j ++ ) {\r\n      for ( let i = 0; i <= tubularSegments; i ++ ) {\r\n        const u = i / tubularSegments * arc;\r\n        const v = j / radialSegments * Math.PI * 2;\r\n\r\n        this.points.push(new Point([\r\n          (radius + tube * Math.cos(v) ) * Math.cos(u),\r\n          (radius + tube * Math.cos(v) ) * Math.sin(u),\r\n          tube * Math.sin(v)]));\r\n      }\r\n    }\r\n\r\n    for ( let j = 1; j <= radialSegments; j ++ ) {\r\n      for ( let i = 1; i <= tubularSegments; i ++ ) {\r\n        const a = ( tubularSegments + 1 ) * j + i - 1;\r\n        const b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\r\n        const c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\r\n        const d = ( tubularSegments + 1 ) * j + i;\r\n\r\n        const pa = this.points[a];\r\n        const pb = this.points[b];\r\n        const pc = this.points[c];\r\n        const pd = this.points[d];\r\n\r\n\r\n        let edgeAB = new Edge(pa, pb);\r\n        const findEAB = this.edges.find((e) => {\r\n          return e.shallowEqual(edgeAB);\r\n        });\r\n        if (findEAB) {\r\n          edgeAB = findEAB;\r\n        } else {\r\n          this.edges.push(edgeAB);\r\n        }\r\n\r\n        let edgeBD = new Edge(pb, pd);\r\n        const findEBD = this.edges.find((e) => {\r\n          return e.shallowEqual(edgeBD);\r\n        });\r\n        if (findEBD) {\r\n          edgeBD = findEBD;\r\n        } else {\r\n          this.edges.push(edgeBD);\r\n        }\r\n\r\n        let edgeDA = new Edge(pd, pa);\r\n        const findEDA = this.edges.find((e) => {\r\n          return e.shallowEqual(edgeDA);\r\n        });\r\n        if (findEDA) {\r\n          edgeDA = findEDA;\r\n        } else {\r\n          this.edges.push(edgeDA);\r\n        }\r\n\r\n        let edgeBC = new Edge(pb, pc);\r\n        const findEBC = this.edges.find((e) => {\r\n          return e.shallowEqual(edgeBC);\r\n        });\r\n        if (findEBC) {\r\n          edgeBC = findEBC;\r\n        } else {\r\n          this.edges.push(edgeBC);\r\n        }\r\n\r\n        let edgeCD = new Edge(pc, pd);\r\n        const findECD = this.edges.find((e) => {\r\n          return e.shallowEqual(edgeCD);\r\n        });\r\n        if (findECD) {\r\n          edgeCD = findECD;\r\n        } else {\r\n          this.edges.push(edgeCD);\r\n        }\r\n\r\n        // faces\r\n        this.faces.push(new Face([edgeAB, edgeBD, edgeDA]));\r\n        this.faces.push(new Face([edgeBC, edgeCD, edgeBD]));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @return {Point[]}\r\n   */\r\n  getPoints(): Point[] {\r\n    return this.points;\r\n  }\r\n\r\n  /**\r\n   * @return {Edge[]}\r\n   */\r\n  getEdges(): Edge[] {\r\n    return this.edges;\r\n  }\r\n\r\n  /**\r\n   * @return {Face[]}\r\n   */\r\n  getFaces(): Face[] {\r\n    return this.faces;\r\n  }\r\n}\r\n\r\n/**\r\n * Tours builder class\r\n */\r\nexport class TorusBuilder implements GeometryBuilder {\r\n  private radius = 1;\r\n  private tube = 0.4;\r\n  private radialSegments = 8;\r\n  private tubularSegments = 6;\r\n  private arc = Math.PI * 2;\r\n\r\n  /**\r\n  * Set radius\r\n  * @param {number} radius\r\n  * @return {TorusBuilder}\r\n  */\r\n  public setRadius(radius: number): TorusBuilder {\r\n    this.radius = radius;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set radius of tube\r\n   * @param {number} tube\r\n   * @return {TorusBuilder}\r\n   */\r\n  public setTube(tube: number): TorusBuilder {\r\n    this.tube = tube;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set number of radial segments\r\n   * @param {number} radialSegments\r\n   * @return {TorusBuilder}\r\n   */\r\n  public setRadialSegments(radialSegments: number): TorusBuilder {\r\n    this.radialSegments = radialSegments;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set number of tubular segments\r\n   * @param {number} tubularSegments\r\n   * @return {TorusBuilder}\r\n   */\r\n  public setTubularSegments(tubularSegments: number): TorusBuilder {\r\n    this.tubularSegments = tubularSegments;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set angle length of tubular angle\r\n   * @param {number} arc\r\n   * @return {TorusBuilder}\r\n   */\r\n  public setArc(arc: number): TorusBuilder {\r\n    this.arc = arc;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Builds torus mesh\r\n   * @return {Torus}\r\n   */\r\n  public build(): Torus {\r\n    return new Torus(this.radius, this.tube,\r\n        this.radialSegments, this.tubularSegments,\r\n        this.arc);\r\n  }\r\n}\r\n\r\nconst TorusInst = new Torus();\r\nexport default TorusInst;\r\n","import React, {useEffect, useState} from 'react';\r\nimport {Form, FormFeedback, FormGroup, Input, Label} from 'reactstrap';\r\nimport {CircleBuilder} from 'WebGL/Objects/BasicMeshes/Circle';\r\nimport {ConeBuilder} from 'WebGL/Objects/BasicMeshes/Cone';\r\nimport {CubeBuilder} from 'WebGL/Objects/BasicMeshes/Cube';\r\nimport {CylinderBuilder} from 'WebGL/Objects/BasicMeshes/Cylinder';\r\nimport {GeometryBuilder} from 'WebGL/Objects/BasicMeshes/GeometryProvider';\r\nimport {TorusBuilder} from 'WebGL/Objects/BasicMeshes/Torus';\r\n\r\nconst CIRCLE_BUILDER = new CircleBuilder();\r\nconst CONE_BUILDER = new ConeBuilder();\r\nconst CUBE_BUILDER = new CubeBuilder();\r\nconst CYLINDER_BUILDER = new CylinderBuilder();\r\nconst TORUS_BUILDER = new TorusBuilder();\r\n\r\nconst gt0ErrMsg = 'Value must be greater than 0';\r\nconst notIntErrMsg = 'Provided value is not an integer';\r\n\r\ntype SignalGlobalErrorProp = {\r\n  markError: (e: boolean) => void;\r\n};\r\n\r\ntype SelectCurrentBuilderProp = {\r\n  currentBuilderRef:\r\n    React.MutableRefObject<GeometryBuilder | null | undefined>;\r\n}\r\n/**\r\n * extract value from sting\r\n * @param {string} value\r\n * @param {React.Dispatch<React.SetStateAction<boolean>>} signalErr\r\n * @param {React.Dispatch<React.SetStateAction<string>>} setErrMsg\r\n * @return {number | undefined}\r\n */\r\nfunction extractValue(\r\n    value: string,\r\n    signalErr: (e: boolean) => void,\r\n    setErrMsg: React.Dispatch<React.SetStateAction<string>>,\r\n): number | undefined {\r\n  const valueNum = parseFloat(value);\r\n  if (isNaN(valueNum)) {\r\n    signalErr(true);\r\n    setErrMsg('Value is not a number');\r\n    return undefined;\r\n  }\r\n  return valueNum;\r\n}\r\n\r\ninterface InputElementProps {\r\n  label: string;\r\n  value: string;\r\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n  isInvalid: boolean;\r\n  msgIfInvalid: string;\r\n}\r\n\r\nconst InputElement = (props: InputElementProps): JSX.Element => {\r\n  return (\r\n    <FormGroup>\r\n      <Label>\r\n        {props.label}\r\n      </Label>\r\n      <Input\r\n        value={props.value}\r\n        onChange={props.onChange}\r\n        invalid={props.isInvalid}\r\n      />\r\n      <FormFeedback>\r\n        {props.msgIfInvalid}\r\n      </FormFeedback>\r\n    </FormGroup>\r\n  );\r\n};\r\n\r\nconst AddObjectModal =\r\n(props: SignalGlobalErrorProp & SelectCurrentBuilderProp):\r\nJSX.Element => {\r\n  const [selectedMesh, setSelectedMesh] = useState('None');\r\n\r\n  const renderBuilderProperties = (): JSX.Element => {\r\n    switch (selectedMesh) {\r\n      case 'Circle': {\r\n        props.currentBuilderRef.current =\r\n          CIRCLE_BUILDER ? CIRCLE_BUILDER : undefined;\r\n        return <CircleMeshProperties markError={props.markError}/>;\r\n      }\r\n      case 'Cone': {\r\n        props.currentBuilderRef.current =\r\n          CONE_BUILDER ? CONE_BUILDER : undefined;\r\n        return <ConeMeshProperties markError={props.markError}/>;\r\n      }\r\n      case 'Cube': {\r\n        props.currentBuilderRef.current =\r\n          CUBE_BUILDER ? CUBE_BUILDER : undefined;\r\n        return <CubeMeshProperties markError={props.markError}/>;\r\n      }\r\n      case 'Cylinder': {\r\n        props.currentBuilderRef.current =\r\n          CYLINDER_BUILDER ? CYLINDER_BUILDER : undefined;\r\n        return <CylinderMeshProperties markError={props.markError}/>;\r\n      }\r\n      case 'Torus': {\r\n        props.currentBuilderRef.current =\r\n          TORUS_BUILDER ? TORUS_BUILDER : undefined;\r\n        return <TorusMeshProperties markError={props.markError}/>;\r\n      }\r\n      default: {\r\n        props.currentBuilderRef.current = null;\r\n        return (<></>);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Form>\r\n        <FormGroup>\r\n          <Label>\r\n            Choose basic mesh\r\n          </Label>\r\n          <Input\r\n            type='select'\r\n            name='select'\r\n            value={selectedMesh}\r\n            onChange={(e) => setSelectedMesh(e.target.value)}\r\n          >\r\n            <option>None</option>\r\n            <option>Circle</option>\r\n            <option>Cone</option>\r\n            <option>Cube</option>\r\n            <option>Cylinder</option>\r\n            <option>Torus</option>\r\n          </Input>\r\n        </FormGroup>\r\n        {\r\n          renderBuilderProperties()\r\n        }\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddObjectModal;\r\n\r\nconst CircleMeshProperties = (props: SignalGlobalErrorProp): JSX.Element => {\r\n  const initInnRadius = 1;\r\n  const initOutRadius = 2;\r\n  const initRadialSeg = 4;\r\n\r\n  const [innerRadius, setInnerRadius] = useState(initInnRadius + '');\r\n  const [isInnerRadiusInvalid, setIsInnerRadiusInvalid] = useState(false);\r\n  const [invalidMessageInnRad, setInvalidMessageInnRad] = useState('');\r\n\r\n  const [outerRadius, setOuterRadius] = useState(initOutRadius + '');\r\n  const [isOuterRadiusInvalid, setIsOuterRadiusInvalid] = useState(false);\r\n  const [invalidMessageOutRad, setInvalidMessageOutRad] = useState('');\r\n\r\n  const [numOfRadSeg, setNumOfRadSeg] = useState(initRadialSeg + '');\r\n  const [isNumOfRadSegInvalid, setIsNumOfRadSegInvalid] = useState(false);\r\n  const [invalidMessageNumRad, setInvalidMessageNumRad] = useState('');\r\n\r\n  useEffect(() => {\r\n    CIRCLE_BUILDER.setInnerRadius(initInnRadius).setOuterRadius(initOutRadius).\r\n        setRadialSegments(initRadialSeg);\r\n    props.markError(false);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    props.markError(\r\n        isInnerRadiusInvalid ||\r\n        isOuterRadiusInvalid ||\r\n        isNumOfRadSegInvalid,\r\n    );\r\n  }, [isInnerRadiusInvalid, isOuterRadiusInvalid, isNumOfRadSegInvalid]);\r\n\r\n  const handleInnerRadius = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setIsInnerRadiusInvalid(false);\r\n    setInnerRadius(event.target.value);\r\n    const fValue = extractValue(event.target.value,\r\n        setIsInnerRadiusInvalid, setInvalidMessageInnRad);\r\n\r\n    if (fValue !== undefined) {\r\n      if (fValue > 0) {\r\n        CIRCLE_BUILDER.setInnerRadius(fValue);\r\n      } else {\r\n        setIsInnerRadiusInvalid(true);\r\n        setInvalidMessageInnRad(gt0ErrMsg);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleOuterRadius = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setIsOuterRadiusInvalid(false);\r\n    setOuterRadius(event.target.value);\r\n    const fValue = extractValue(event.target.value,\r\n        setIsOuterRadiusInvalid, setInvalidMessageOutRad);\r\n\r\n    if (fValue !== undefined) {\r\n      if (fValue > 0) {\r\n        CIRCLE_BUILDER.setOuterRadius(fValue);\r\n      } else {\r\n        setIsOuterRadiusInvalid(true);\r\n        setInvalidMessageOutRad(gt0ErrMsg);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleRadialSegments = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setIsNumOfRadSegInvalid(false);\r\n    setNumOfRadSeg(event.target.value);\r\n    const fValue = extractValue(event.target.value,\r\n        setIsNumOfRadSegInvalid, setInvalidMessageNumRad);\r\n\r\n    if (fValue !== undefined) {\r\n      if (fValue > 0) {\r\n        if (Number.isInteger(fValue)) {\r\n          CIRCLE_BUILDER.setRadialSegments(fValue);\r\n        } else {\r\n          setIsNumOfRadSegInvalid(true);\r\n          setInvalidMessageNumRad(notIntErrMsg);\r\n        }\r\n      } else {\r\n        setIsNumOfRadSegInvalid(true);\r\n        setInvalidMessageNumRad(gt0ErrMsg);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <FormGroup>\r\n        <Label>\r\n          Inner radius\r\n        </Label>\r\n        <Input\r\n          value={innerRadius}\r\n          onChange={handleInnerRadius}\r\n          invalid={isInnerRadiusInvalid}\r\n        />\r\n        <FormFeedback>\r\n          {invalidMessageInnRad}\r\n        </FormFeedback>\r\n      </FormGroup>\r\n\r\n      <FormGroup>\r\n        <Label>\r\n          Outer radius\r\n        </Label>\r\n        <Input\r\n          value={outerRadius}\r\n          onChange={handleOuterRadius}\r\n          invalid={isOuterRadiusInvalid}\r\n        />\r\n        <FormFeedback>\r\n          {invalidMessageOutRad}\r\n        </FormFeedback>\r\n      </FormGroup>\r\n\r\n      <FormGroup>\r\n        <Label>\r\n          Number of radial segments\r\n        </Label>\r\n        <Input\r\n          value={numOfRadSeg}\r\n          onChange={handleRadialSegments}\r\n          invalid={isNumOfRadSegInvalid}\r\n        />\r\n        <FormFeedback>\r\n          {invalidMessageNumRad}\r\n        </FormFeedback>\r\n      </FormGroup>\r\n\r\n    </>\r\n  );\r\n};\r\n\r\nconst ConeMeshProperties = (props: SignalGlobalErrorProp): JSX.Element => {\r\n  const initHeight = 2;\r\n  const initHeightSegments = 1;\r\n  const initRadialSegments = 4;\r\n  const initBaseRadius = 1;\r\n\r\n  const [height, setHeight] = useState(initHeight + '');\r\n  const [isHeightInvalid, setIsHeightInvalid] = useState(false);\r\n  const [invalidMessageHeight, setInvalidMessageHeight] = useState('');\r\n\r\n  const [heightSegments, setHeightSegments] = useState(initHeightSegments + '');\r\n  const [isHeightSegmentsInvalid, setHeightSegmentsInvalid] = useState(false);\r\n  const [invalidMessageHeightSegments, setInvalidMessageHeightSegments] =\r\n    useState('');\r\n\r\n  const [numOfRadSeg, setNumOfRadSeg] = useState(initRadialSegments + '');\r\n  const [isNumOfRadSegInvalid, setIsNumOfRadSegInvalid] = useState(false);\r\n  const [invalidMessageNumRad, setInvalidMessageNumRad] = useState('');\r\n\r\n  const [baseRadius, setBaseRadius] = useState(initBaseRadius + '');\r\n  const [isBaseRadiusInvalid, setBaseRadiusInvalid] = useState(false);\r\n  const [invalidMessageBaseRadius, setInvalidMessageBaseRadius] =\r\n    useState('');\r\n\r\n  useEffect(() => {\r\n    CONE_BUILDER.setHeight(initHeight).setHeightSegments(initHeightSegments).\r\n        setRadialSegments(initRadialSegments).setRadius(initBaseRadius);\r\n    props.markError(false);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    props.markError(\r\n        isHeightInvalid ||\r\n        isHeightSegmentsInvalid ||\r\n        isBaseRadiusInvalid ||\r\n        isNumOfRadSegInvalid,\r\n    );\r\n  }, [isHeightInvalid, isHeightSegmentsInvalid,\r\n    isNumOfRadSegInvalid, isBaseRadiusInvalid]);\r\n\r\n  const handleHeight = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setIsHeightInvalid(false);\r\n    setHeight(event.target.value);\r\n    const fValue = extractValue(event.target.value,\r\n        setIsHeightInvalid, setInvalidMessageHeight);\r\n\r\n    if (fValue !== undefined) {\r\n      if (fValue > 0) {\r\n        CONE_BUILDER.setHeight(fValue);\r\n      } else {\r\n        setIsHeightInvalid(true);\r\n        setInvalidMessageHeight(gt0ErrMsg);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleHeightSegments = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setHeightSegmentsInvalid(false);\r\n    setHeightSegments(event.target.value);\r\n    const fValue = extractValue(event.target.value,\r\n        setHeightSegmentsInvalid, setInvalidMessageHeightSegments);\r\n\r\n    if (fValue !== undefined) {\r\n      if (fValue > 0) {\r\n        if (Number.isInteger(fValue)) {\r\n          CONE_BUILDER.setHeightSegments(fValue);\r\n        } else {\r\n          setHeightSegmentsInvalid(true);\r\n          setInvalidMessageHeightSegments(notIntErrMsg);\r\n        }\r\n      } else {\r\n        setHeightSegmentsInvalid(true);\r\n        setInvalidMessageHeightSegments(gt0ErrMsg);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleRadialSegments = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setIsNumOfRadSegInvalid(false);\r\n    setNumOfRadSeg(event.target.value);\r\n    const fValue = extractValue(event.target.value,\r\n        setIsNumOfRadSegInvalid, setInvalidMessageNumRad);\r\n\r\n    if (fValue !== undefined) {\r\n      if (fValue > 0) {\r\n        if (Number.isInteger(fValue)) {\r\n          CONE_BUILDER.setRadialSegments(fValue);\r\n        } else {\r\n          setIsNumOfRadSegInvalid(true);\r\n          setInvalidMessageNumRad(notIntErrMsg);\r\n        }\r\n      } else {\r\n        setIsNumOfRadSegInvalid(true);\r\n        setInvalidMessageNumRad(gt0ErrMsg);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleRadius = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setBaseRadiusInvalid(false);\r\n    setBaseRadius(event.target.value);\r\n    const fValue = extractValue(event.target.value,\r\n        setBaseRadiusInvalid, setInvalidMessageBaseRadius);\r\n\r\n    if (fValue !== undefined) {\r\n      if (fValue > 0) {\r\n        CONE_BUILDER.setRadius(fValue);\r\n      } else {\r\n        setBaseRadiusInvalid(true);\r\n        setInvalidMessageBaseRadius(gt0ErrMsg);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <InputElement\r\n        label={'Height'}\r\n        value={height}\r\n        onChange={handleHeight}\r\n        isInvalid={isHeightInvalid}\r\n        msgIfInvalid={invalidMessageHeight}\r\n      />\r\n      <InputElement\r\n        label={'Number of height segments'}\r\n        value={heightSegments}\r\n        onChange={handleHeightSegments}\r\n        isInvalid={isHeightSegmentsInvalid}\r\n        msgIfInvalid={invalidMessageHeightSegments}\r\n      />\r\n      <InputElement\r\n        label={'Radius'}\r\n        value={baseRadius}\r\n        onChange={handleRadius}\r\n        isInvalid={isBaseRadiusInvalid}\r\n        msgIfInvalid={invalidMessageBaseRadius}\r\n      />\r\n      <InputElement\r\n        label={'Number of radial segments'}\r\n        value={numOfRadSeg}\r\n        onChange={handleRadialSegments}\r\n        isInvalid={isNumOfRadSegInvalid}\r\n        msgIfInvalid={invalidMessageNumRad}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\n\r\nconst CubeMeshProperties = (props: SignalGlobalErrorProp): JSX.Element => {\r\n  const initXHalf = 1;\r\n  const initYHalf = 1;\r\n  const initZHalf = 1;\r\n\r\n  const [xHalfWidth, setXHalfWidth] = useState(initXHalf + '');\r\n  const [isXHalfWidthInvalid, setIsXHalfWidthInvalid] = useState(false);\r\n  const [invalidMessageXHalfWidth, setInvalidMessageXHalfWidth] = useState('');\r\n\r\n  const [yHalfWidth, setYHalfWidth] = useState(initYHalf + '');\r\n  const [isYHalfWidthInvalid, setIsYHalfWidthInvalid] = useState(false);\r\n  const [invalidMessageYHalfWidth, setInvalidMessageYHalfWidth] = useState('');\r\n\r\n  const [zHalfWidth, setZHalfWidth] = useState(initZHalf + '');\r\n  const [isZHalfWidthInvalid, setIsZHalfWidthInvalid] = useState(false);\r\n  const [invalidMessageZHalfWidth, setInvalidMessageZHalfWidth] = useState('');\r\n\r\n  useEffect(() => {\r\n    CUBE_BUILDER.setXHalfWidth(initXHalf)\r\n        .setYHalfWidth(initYHalf).setZHalfWidth(initZHalf);\r\n    props.markError(false);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    props.markError(\r\n        isXHalfWidthInvalid ||\r\n        isYHalfWidthInvalid ||\r\n        isZHalfWidthInvalid,\r\n    );\r\n  }, [isXHalfWidthInvalid, isYHalfWidthInvalid,\r\n    isZHalfWidthInvalid]);\r\n\r\n  const handleXHalfWidth = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setIsXHalfWidthInvalid(false);\r\n    setXHalfWidth(event.target.value);\r\n    const fValue = extractValue(event.target.value,\r\n        setIsXHalfWidthInvalid, setInvalidMessageXHalfWidth);\r\n\r\n    if (fValue !== undefined) {\r\n      if (fValue > 0) {\r\n        CUBE_BUILDER.setXHalfWidth(fValue);\r\n      } else {\r\n        setIsXHalfWidthInvalid(true);\r\n        setInvalidMessageXHalfWidth(gt0ErrMsg);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleYHalfWidth = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setIsYHalfWidthInvalid(false);\r\n    setYHalfWidth(event.target.value);\r\n    const fValue = extractValue(event.target.value,\r\n        setIsYHalfWidthInvalid, setInvalidMessageYHalfWidth);\r\n\r\n    if (fValue !== undefined) {\r\n      if (fValue > 0) {\r\n        CUBE_BUILDER.setYHalfWidth(fValue);\r\n      } else {\r\n        setIsYHalfWidthInvalid(true);\r\n        setInvalidMessageYHalfWidth(gt0ErrMsg);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleZHalfWidth = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setIsZHalfWidthInvalid(false);\r\n    setZHalfWidth(event.target.value);\r\n    const fValue = extractValue(event.target.value,\r\n        setIsZHalfWidthInvalid, setInvalidMessageZHalfWidth);\r\n\r\n    if (fValue !== undefined) {\r\n      if (fValue > 0) {\r\n        CUBE_BUILDER.setZHalfWidth(fValue);\r\n      } else {\r\n        setIsZHalfWidthInvalid(true);\r\n        setInvalidMessageZHalfWidth(gt0ErrMsg);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <InputElement\r\n        label={'Distance from center to X side'}\r\n        value={xHalfWidth}\r\n        onChange={handleXHalfWidth}\r\n        isInvalid={isXHalfWidthInvalid}\r\n        msgIfInvalid={invalidMessageXHalfWidth}\r\n      />\r\n      <InputElement\r\n        label={'Distance from center to Y side'}\r\n        value={yHalfWidth}\r\n        onChange={handleYHalfWidth}\r\n        isInvalid={isYHalfWidthInvalid}\r\n        msgIfInvalid={invalidMessageYHalfWidth}\r\n      />\r\n      <InputElement\r\n        label={'Distance from center to Z side'}\r\n        value={zHalfWidth}\r\n        onChange={handleZHalfWidth}\r\n        isInvalid={isZHalfWidthInvalid}\r\n        msgIfInvalid={invalidMessageZHalfWidth}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nconst CylinderMeshProperties = (props: SignalGlobalErrorProp): JSX.Element => {\r\n  const initHeight = 2;\r\n  const initHeightSegments = 1;\r\n  const initRadialSegments = 4;\r\n  const initRadiusTop = 1;\r\n  const initRadiusBottom = 1;\r\n  const initIsOpenEnded = false;\r\n\r\n  const [height, setHeight] = useState(initHeight + '');\r\n  const [isHeightInvalid, setIsHeightInvalid] = useState(false);\r\n  const [invalidMessageHeight, setInvalidMessageHeight] = useState('');\r\n\r\n  const [heightSegments, setHeightSegments] = useState(initHeightSegments + '');\r\n  const [isHeightSegmentsInvalid, setIsHeightSegmentsInvalid] = useState(false);\r\n  const [invalidMessageHeightSegments, setInvalidMessageHeightSegments] =\r\n    useState('');\r\n\r\n  const [radialSegments, setRadialSegments] = useState(initRadialSegments + '');\r\n  const [isRadialSegmentsInvalid, setIsRadialSegmentsInvalid] = useState(false);\r\n  const [invalidMessageRadialSegments, setInvalidMessageRadialSegments] =\r\n    useState('');\r\n\r\n  const [radiusTop, setRadiusTop] = useState(initRadiusTop + '');\r\n  const [isRadiusTopInvalid, setIsRadiusTopInvalid] = useState(false);\r\n  const [invalidMessageRadiusTop, setInvalidMessageRadiusTop] =\r\n      useState('');\r\n\r\n  const [radiusBottom, setRadiusBottom] = useState(initRadiusBottom + '');\r\n  const [isRadiusBottomInvalid, setIsRadiusBottomInvalid] = useState(false);\r\n  const [invalidMessageRadiusBottom, setInvalidMessageRadiusBottom] =\r\n          useState('');\r\n\r\n  const [isOpenEnded, setIsOpenEnded] = useState(initIsOpenEnded);\r\n\r\n  useEffect(() => {\r\n    CYLINDER_BUILDER.setHeight(initHeight).setHeightSegments(initHeightSegments)\r\n        .setRadialSegments(initRadialSegments).setRadiusBottom(initRadiusBottom)\r\n        .setRadiusTop(initRadiusTop).setOpenEnded(initIsOpenEnded);\r\n    props.markError(false);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    props.markError(\r\n        isHeightInvalid ||\r\n        isHeightSegmentsInvalid ||\r\n        isRadialSegmentsInvalid ||\r\n        isRadiusTopInvalid ||\r\n        isRadiusBottomInvalid,\r\n    );\r\n  }, [isHeightInvalid, isHeightSegmentsInvalid, isRadiusBottomInvalid,\r\n    isRadialSegmentsInvalid, isRadiusTopInvalid]);\r\n\r\n  const handleHeight = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setIsHeightInvalid(false);\r\n    setHeight(event.target.value);\r\n    const fValue = extractValue(event.target.value,\r\n        setIsHeightInvalid, setInvalidMessageHeight);\r\n\r\n    if (fValue !== undefined) {\r\n      if (fValue > 0) {\r\n        CYLINDER_BUILDER.setHeight(fValue);\r\n      } else {\r\n        setIsHeightInvalid(true);\r\n        setInvalidMessageHeight(gt0ErrMsg);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleHeightSegments = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setIsHeightSegmentsInvalid(false);\r\n    setHeightSegments(event.target.value);\r\n    const fValue = extractValue(event.target.value,\r\n        setIsHeightSegmentsInvalid, setInvalidMessageHeightSegments);\r\n\r\n    if (fValue !== undefined) {\r\n      if (fValue > 0) {\r\n        if (Number.isInteger(fValue)) {\r\n          CYLINDER_BUILDER.setHeightSegments(fValue);\r\n        } else {\r\n          setIsHeightSegmentsInvalid(true);\r\n          setInvalidMessageHeightSegments(notIntErrMsg);\r\n        }\r\n      } else {\r\n        setIsHeightSegmentsInvalid(true);\r\n        setInvalidMessageHeightSegments(gt0ErrMsg);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleRadialSegments = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setIsRadialSegmentsInvalid(false);\r\n    setRadialSegments(event.target.value);\r\n    const fValue = extractValue(event.target.value,\r\n        setIsRadialSegmentsInvalid, setInvalidMessageRadialSegments);\r\n\r\n    if (fValue !== undefined) {\r\n      if (fValue > 0) {\r\n        if (Number.isInteger(fValue)) {\r\n          CYLINDER_BUILDER.setRadialSegments(fValue);\r\n        } else {\r\n          setIsRadialSegmentsInvalid(true);\r\n          setInvalidMessageRadialSegments(notIntErrMsg);\r\n        }\r\n      } else {\r\n        setIsRadialSegmentsInvalid(true);\r\n        setInvalidMessageRadialSegments(gt0ErrMsg);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleRadiusTop = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setIsRadiusTopInvalid(false);\r\n    setRadiusTop(event.target.value);\r\n    const fValue = extractValue(event.target.value,\r\n        setIsRadiusTopInvalid, setInvalidMessageRadiusTop);\r\n\r\n    if (fValue !== undefined) {\r\n      if (fValue > 0) {\r\n        CYLINDER_BUILDER.setRadiusTop(fValue);\r\n      } else {\r\n        setIsRadiusTopInvalid(true);\r\n        setInvalidMessageRadiusTop(gt0ErrMsg);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleRadiusBottom = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setIsRadiusBottomInvalid(false);\r\n    setRadiusBottom(event.target.value);\r\n    const fValue = extractValue(event.target.value,\r\n        setIsRadiusBottomInvalid, setInvalidMessageRadiusBottom);\r\n\r\n    if (fValue !== undefined) {\r\n      if (fValue > 0) {\r\n        CYLINDER_BUILDER.setRadiusBottom(fValue);\r\n      } else {\r\n        setIsRadiusBottomInvalid(true);\r\n        setInvalidMessageRadiusBottom(gt0ErrMsg);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleOpenEnded = () => {\r\n    setIsOpenEnded(!isOpenEnded);\r\n    CYLINDER_BUILDER.setOpenEnded(!isOpenEnded);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <InputElement\r\n        label={'Height'}\r\n        value={height}\r\n        onChange={handleHeight}\r\n        isInvalid={isHeightInvalid}\r\n        msgIfInvalid={invalidMessageHeight}\r\n      />\r\n      <InputElement\r\n        label={'Number of height segments'}\r\n        value={heightSegments}\r\n        onChange={handleHeightSegments}\r\n        isInvalid={isHeightSegmentsInvalid}\r\n        msgIfInvalid={invalidMessageHeightSegments}\r\n      />\r\n      <InputElement\r\n        label={'Number of radial segments'}\r\n        value={radialSegments}\r\n        onChange={handleRadialSegments}\r\n        isInvalid={isRadialSegmentsInvalid}\r\n        msgIfInvalid={invalidMessageRadialSegments}\r\n      />\r\n      <InputElement\r\n        label={'Radius at the top'}\r\n        value={radiusTop}\r\n        onChange={handleRadiusTop}\r\n        isInvalid={isRadiusTopInvalid}\r\n        msgIfInvalid={invalidMessageRadiusTop}\r\n      />\r\n      <InputElement\r\n        label={'Radius at the bottom'}\r\n        value={radiusBottom}\r\n        onChange={handleRadiusBottom}\r\n        isInvalid={isRadiusBottomInvalid}\r\n        msgIfInvalid={invalidMessageRadiusBottom}\r\n      />\r\n\r\n      <FormGroup>\r\n        <Label>\r\n          Open cylinder\r\n        </Label>\r\n        <Input\r\n          type='checkbox'\r\n          checked={isOpenEnded}\r\n          onChange={handleOpenEnded}\r\n        />\r\n      </FormGroup>\r\n    </>\r\n  );\r\n};\r\n\r\nconst TorusMeshProperties = (props: SignalGlobalErrorProp): JSX.Element => {\r\n  const initRadius= 2;\r\n  const initTubeRadius = 0.5;\r\n  const initRadialSegments = 4;\r\n  const initTubularSegments = 8;\r\n\r\n  const [radius, setRadius] = useState(initRadius + '');\r\n  const [isRadiusInvalid, setIsRadiusInvalid] = useState(false);\r\n  const [invalidMessageRadius, setInvalidMessageRadius] = useState('');\r\n\r\n  const [tubeRadius, setTubeRadius] = useState(initTubeRadius + '');\r\n  const [isTubeRadiusInvalid, setIsTubeRadiusInvalid] = useState(false);\r\n  const [invalidMessageTubeRadius, setInvalidMessageTubeRadius] = useState('');\r\n\r\n  const [radialSegments, setRadialSegments] = useState(initRadialSegments + '');\r\n  const [isRadialSegmentsInvalid, setIsRadialSegmentsInvalid] = useState(false);\r\n  const [invalidMessageRadialSegments, setInvalidMessageRadialSegments] =\r\n    useState('');\r\n\r\n  const [tubularSegments, setTubularSegments] =\r\n    useState(initTubularSegments + '');\r\n  const [isTubularSegmentsInvalid, setIsTubularSegmentsInvalid] =\r\n    useState(false);\r\n  const [invalidMessageTubularSegments, setInvalidMessageTubularSegments] =\r\n    useState('');\r\n\r\n\r\n  useEffect(() => {\r\n    TORUS_BUILDER.setRadius(initRadius).setTube(initTubeRadius)\r\n        .setRadialSegments(initRadialSegments)\r\n        .setTubularSegments(initTubularSegments);\r\n    props.markError(false);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    props.markError(\r\n        isRadiusInvalid ||\r\n        isTubeRadiusInvalid ||\r\n        isRadialSegmentsInvalid ||\r\n        isTubularSegmentsInvalid,\r\n    );\r\n  }, [isRadiusInvalid, isTubeRadiusInvalid, isTubularSegmentsInvalid,\r\n    isRadialSegmentsInvalid]);\r\n\r\n  const handleRadius = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setIsRadiusInvalid(false);\r\n    setRadius(event.target.value);\r\n    const fValue = extractValue(event.target.value,\r\n        setIsRadiusInvalid, setInvalidMessageRadius);\r\n\r\n    if (fValue !== undefined) {\r\n      if (fValue > 0) {\r\n        TORUS_BUILDER.setRadius(fValue);\r\n      } else {\r\n        setIsRadiusInvalid(true);\r\n        setInvalidMessageRadius(gt0ErrMsg);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleTubeRadius = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setIsTubeRadiusInvalid(false);\r\n    setTubeRadius(event.target.value);\r\n    const fValue = extractValue(event.target.value,\r\n        setIsTubeRadiusInvalid, setInvalidMessageTubeRadius);\r\n\r\n    if (fValue !== undefined) {\r\n      if (fValue > 0) {\r\n        TORUS_BUILDER.setTube(fValue);\r\n      } else {\r\n        setIsTubeRadiusInvalid(true);\r\n        setInvalidMessageTubeRadius(gt0ErrMsg);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleRadialSegments = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setIsRadialSegmentsInvalid(false);\r\n    setRadialSegments(event.target.value);\r\n    const fValue = extractValue(event.target.value,\r\n        setIsRadialSegmentsInvalid, setInvalidMessageRadialSegments);\r\n\r\n    if (fValue !== undefined) {\r\n      if (fValue > 0) {\r\n        if (Number.isInteger(fValue)) {\r\n          TORUS_BUILDER.setRadialSegments(fValue);\r\n        } else {\r\n          setIsRadialSegmentsInvalid(true);\r\n          setInvalidMessageRadialSegments(notIntErrMsg);\r\n        }\r\n      } else {\r\n        setIsRadialSegmentsInvalid(true);\r\n        setInvalidMessageRadialSegments(gt0ErrMsg);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleTubularSegments =\r\n  (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setIsTubularSegmentsInvalid(false);\r\n    setTubularSegments(event.target.value);\r\n    const fValue = extractValue(event.target.value,\r\n        setIsTubularSegmentsInvalid, setInvalidMessageTubularSegments);\r\n\r\n    if (fValue !== undefined) {\r\n      if (fValue > 0) {\r\n        if (Number.isInteger(fValue)) {\r\n          TORUS_BUILDER.setTubularSegments(fValue);\r\n        } else {\r\n          setIsTubularSegmentsInvalid(true);\r\n          setInvalidMessageTubularSegments(notIntErrMsg);\r\n        }\r\n      } else {\r\n        setIsTubularSegmentsInvalid(true);\r\n        setInvalidMessageTubularSegments(gt0ErrMsg);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <InputElement\r\n        label={'Torus radius'}\r\n        value={radius}\r\n        onChange={handleRadius}\r\n        isInvalid={isRadiusInvalid}\r\n        msgIfInvalid={invalidMessageRadius}\r\n      />\r\n      <InputElement\r\n        label={'Tube radius'}\r\n        value={tubeRadius}\r\n        onChange={handleTubeRadius}\r\n        isInvalid={isTubeRadiusInvalid}\r\n        msgIfInvalid={invalidMessageTubeRadius}\r\n      />\r\n      <InputElement\r\n        label={'Number of radial segments'}\r\n        value={radialSegments}\r\n        onChange={handleRadialSegments}\r\n        isInvalid={isRadialSegmentsInvalid}\r\n        msgIfInvalid={invalidMessageRadialSegments}\r\n      />\r\n      <InputElement\r\n        label={'Number of tubular segments'}\r\n        value={tubularSegments}\r\n        onChange={handleTubularSegments}\r\n        isInvalid={isTubularSegmentsInvalid}\r\n        msgIfInvalid={invalidMessageTubularSegments}\r\n      />\r\n    </>\r\n  );\r\n};\r\n","/**\r\n * Basic event\r\n */\r\nexport default class WebGLEvent<T> {\r\n  private listeners: T[] = [];\r\n\r\n  /**\r\n   * subscibes to an event\r\n   * @param {T} listener\r\n   */\r\n  public subscribe(listener: T): void {\r\n    this.listeners.push(listener);\r\n  }\r\n\r\n  /**\r\n   * unsubscribes from an event\r\n   * @param {T} listener\r\n   */\r\n  public unsubscribe(listener: T): void {\r\n    this.listeners = this.listeners.filter((l) => {\r\n      return l !== listener;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns actual listeners\r\n   * @return {T[]}\r\n   */\r\n  protected getListeners(): T[] {\r\n    return this.listeners;\r\n  }\r\n\r\n  /**\r\n   * Checks if all listeners still exists\r\n   */\r\n  protected refresh() {\r\n    this.listeners =\r\n      this.listeners.filter((l) => !(l === null || l === undefined));\r\n  }\r\n}\r\n","import WebGLEvent from 'WebGL/Listeners/WebGLEvent';\r\n\r\nexport interface RefreshListener {\r\n  onRefresh(): void\r\n}\r\n\r\n/**\r\n * Refresh Event\r\n */\r\nexport class RefreshEvent extends WebGLEvent<RefreshListener> {\r\n  /**\r\n   * @param {number} dx\r\n   * @param {number} dy\r\n   * @param {number} dz\r\n   */\r\n  public refresh() : void {\r\n    this.getListeners().forEach((el) => {\r\n      el.onRefresh();\r\n    });\r\n  }\r\n}\r\n\r\nconst GLOBAL_COMPONENTS_REFRESH_EVENT = new RefreshEvent();\r\nexport default GLOBAL_COMPONENTS_REFRESH_EVENT;\r\n","import GLOBAL_COMPONENTS_REFRESH_EVENT from 'utils/RefreshEvent';\r\nimport Camera from './Camera/Camera';\r\nimport Object3D from './Objects/Object3D';\r\n\r\n/**\r\n * Class representing state of program\r\n */\r\nclass State {\r\n  private world :Object3D | null = null;\r\n  private selectedObject :Object3D | null = null;\r\n\r\n  /**\r\n   * Sets new world object\r\n   * @param {Object3D | null} world\r\n   */\r\n  public setWorld(world: Object3D | null) {\r\n    this.world = world;\r\n  }\r\n\r\n  /**\r\n   * Returns world object\r\n   * @return {Object3D | null}\r\n   */\r\n  public getWorld(): Object3D | null {\r\n    return this.world;\r\n  }\r\n\r\n\r\n  /**\r\n   * Sets new selected object\r\n   * @param {Object3D | null} selectedObject\r\n   */\r\n  public setSelectedObject(selectedObject: Object3D | null) {\r\n    this.selectedObject = selectedObject;\r\n    GLOBAL_COMPONENTS_REFRESH_EVENT.refresh();\r\n  }\r\n\r\n  /**\r\n   * Returns selected object\r\n   * @return {Object3D | null}\r\n   */\r\n  public getSelectedObject(): Object3D | null {\r\n    return this.selectedObject;\r\n  }\r\n}\r\n\r\nconst STATE = new State();\r\nexport default STATE;\r\n","import {vec3, mat4, quat} from 'gl-matrix';\r\nimport {Point} from 'WebGL/Objects/BasicMeshes/MeshUtils';\r\n\r\nexport const toRadians = (deg: number): number => {\r\n  return deg * (Math.PI/180);\r\n};\r\n\r\nexport const toDegrees = (rad: number): number => {\r\n  return rad * 180 / Math.PI;\r\n};\r\n\r\nexport const calculateTransformationMatrix = (position: vec3, rotation: vec3,\r\n    scale: vec3): mat4 => {\r\n  const matrix = mat4.create();\r\n  mat4.identity(matrix);\r\n  mat4.translate(matrix, matrix, position);\r\n  mat4.rotateX(matrix, matrix, rotation[0]);\r\n  mat4.rotateY(matrix, matrix, rotation[1]);\r\n  mat4.rotateZ(matrix, matrix, rotation[2]);\r\n  mat4.scale(matrix, matrix, scale);\r\n  return matrix;\r\n};\r\n\r\n/**\r\n * Creates matrix with given orientation\r\n * @param {number} x\r\n * @param {number} y\r\n * @param {number} z\r\n * @return {mat4}\r\n */\r\nexport function rotate(x: number, y: number, z: number): mat4 {\r\n  const final = mat4.create();\r\n  mat4.identity(final);\r\n  const tmp = mat4.create();\r\n  mat4.identity(tmp);\r\n\r\n  const byX = mat4.create();\r\n\r\n  const byY = mat4.create();\r\n\r\n  const byZ = mat4.create();\r\n\r\n  mat4.fromXRotation(byX, x);\r\n  mat4.fromYRotation(byY, y);\r\n  mat4.fromZRotation(byZ, z);\r\n  mat4.multiply(final, tmp, byZ);\r\n  mat4.multiply(tmp, final, byY);\r\n  mat4.multiply(final, tmp, byX);\r\n  return final;\r\n}\r\n\r\n/**\r\n * Returns Euler's angles from quaternion\r\n * @param {quat} q\r\n * @return {vec3}\r\n */\r\nexport function quatToEuler(q: quat): vec3 {\r\n  const test = q[0]*q[1] + q[2]*q[3];\r\n  let heading = 0;\r\n  let attitude = 0;\r\n  let bank = 0;\r\n\r\n  if (test > 0.499) { // singularity at north pole\r\n    heading = 2 * Math.atan2(q[0], q[3]);\r\n    attitude = Math.PI/2;\r\n    bank = 0;\r\n  } else if (test < -0.499) { // singularity at south pole\r\n    heading = -2 * Math.atan2(q[0], q[3]);\r\n    attitude = - Math.PI/2;\r\n    bank = 0;\r\n  } else {\r\n    const sqx = q[0]*q[0];\r\n    const sqy = q[1]*q[1];\r\n    const sqz = q[2]*q[2];\r\n    heading = Math.atan2(2*q[1]*q[3]-2*q[0]*q[2], 1 - 2*sqy - 2*sqz);\r\n    attitude = Math.asin(2*test);\r\n    bank = Math.atan2(2*q[0]*q[3]-2*q[1]*q[2], 1 - 2*sqx - 2*sqz);\r\n  }\r\n\r\n  return vec3.fromValues(bank, heading, attitude);\r\n}\r\n\r\n/**\r\n * return intersection of 2 arrays\r\n * @param {[]} a\r\n * @param {[]} b\r\n * @return {[]}\r\n */\r\nexport function calculateIntersection<A>(a: A[], b: A[]): A[] {\r\n  return a.filter((x) => b.includes(x));\r\n}\r\n\r\n/**\r\n * Normalizes angle to values <-pi, pi>\r\n * @param {number} angle\r\n * @return {number}\r\n */\r\nexport function normalizeAngle(angle: number): number {\r\n  let dist = 0;\r\n  if (angle < -Math.PI) {\r\n    dist = Math.floor((angle + Math.PI)/2*Math.PI);\r\n  }\r\n  if (angle > Math.PI) {\r\n    dist = Math.ceil((angle - Math.PI)/2*Math.PI);\r\n  }\r\n  angle = angle - (dist * 2 * Math.PI);\r\n  return angle;\r\n}\r\n\r\n/**\r\n * Extract rotation matrix from transformation matrix\r\n * @param {mat4} mat\r\n * @return {mat4}\r\n */\r\nexport function extractOrientationMatrix(mat: mat4): mat4 {\r\n  const ret = mat4.create();\r\n  mat4.copy(ret, mat);\r\n\r\n  ret[3] = ret[7] = ret[11] = ret[12] = ret[13] = ret[14] = ret[15] = 0;\r\n  return ret;\r\n}\r\n\r\n/**\r\n * extract sign value from number\r\n * @param {number} sample\r\n * @return {number}\r\n */\r\nexport function getSign(sample: number): number {\r\n  if (sample < 0) {\r\n    return -1;\r\n  } else if (sample > 0) {\r\n    return 1;\r\n  } else {\r\n    return 0;\r\n  }\r\n}\r\n\r\n/**\r\n * Changes sign of number to given value\r\n * @param {number[]} data\r\n * @param {number} sign\r\n * @return {number}\r\n */\r\nexport function changeSign(data: number[], sign: number): number[] {\r\n  sign = getSign(sign);\r\n  data.forEach((d, i) => {\r\n    const absolute = Math.abs(d);\r\n    data[i] = absolute * sign;\r\n  });\r\n  return data;\r\n}\r\n\r\n/**\r\n * checks if 3 2D points are colinear\r\n * @param {number} x1\r\n * @param {number} y1\r\n * @param {number} x2\r\n * @param {number} y2\r\n * @param {number} x3\r\n * @param {number} y3\r\n * @return {boolean}\r\n */\r\nexport function collinear2D(x1: number, y1: number,\r\n    x2: number, y2: number,\r\n    x3: number, y3: number): boolean {\r\n  const a = x1 * (y2 - y3) +\r\n            x2 * (y3 - y1) +\r\n            x3 * (y1 - y2);\r\n  return a === 0;\r\n}\r\n\r\n/**\r\n * Calculates center point of given points\r\n * @param {Point[]} points\r\n * @return {Point}\r\n */\r\nexport function calculateCenterPoint(points: Point[]): Point {\r\n  let x = 0;\r\n  let y = 0;\r\n  let z = 0;\r\n  points.map((p) => {\r\n    x += p.getCords()[0];\r\n    y += p.getCords()[1];\r\n    z += p.getCords()[2];\r\n  });\r\n  x = x/points.length;\r\n  y = y/points.length;\r\n  z = z/points.length;\r\n  return new Point(vec3.fromValues(x, y, z));\r\n}\r\n","import {mat4, vec3} from 'gl-matrix';\r\nimport {calculateTransformationMatrix,\r\n  normalizeAngle} from 'WebGL/utils.ts/Math';\r\n\r\n/**\r\n * Transform class\r\n */\r\nexport class Transform {\r\n  private positionInParent: vec3;\r\n  private orientationInParent: vec3;\r\n  private scaleInParent: vec3;\r\n\r\n  private transformationMatrix: mat4;\r\n\r\n  /**\r\n   * Creates new transform\r\n   * @param {vec3} positionInParent\r\n   * @param {vec3} orientationInParent\r\n   * @param {vec3} scaleInParent\r\n   */\r\n  constructor(positionInParent: vec3 = [0, 0, 0],\r\n      orientationInParent: vec3 = [0, 0, 0],\r\n      scaleInParent: vec3 = [1, 1, 1]) {\r\n    this.positionInParent = positionInParent;\r\n    this.orientationInParent = orientationInParent;\r\n    this.scaleInParent = scaleInParent;\r\n    this.transformationMatrix = calculateTransformationMatrix(\r\n        positionInParent, orientationInParent, scaleInParent);\r\n  }\r\n\r\n  /**\r\n   * Recalculate transform matrix\r\n   */\r\n  private updateTransformMatrix(): void {\r\n    this.transformationMatrix = calculateTransformationMatrix(\r\n        this.positionInParent, this.orientationInParent, this.scaleInParent);\r\n  }\r\n\r\n  /**\r\n   * get position in parent space\r\n   * @return {vec3}\r\n   */\r\n  public getPositionInParent(): vec3 {\r\n    return this.positionInParent;\r\n  }\r\n\r\n  /**\r\n   * get orientation in parent space\r\n   * @return {vec3}\r\n   */\r\n  public getOrientationInParent(): vec3 {\r\n    return this.orientationInParent;\r\n  }\r\n\r\n  /**\r\n   * get scale in parent space\r\n   * @return {vec3}\r\n   */\r\n  public getScaleInParent(): vec3 {\r\n    return this.scaleInParent;\r\n  }\r\n\r\n  /**\r\n   * set position in parent space\r\n   * @param {vec3} position\r\n   * @return {Transform}\r\n   */\r\n  public setPositionInParent(position: vec3): Transform {\r\n    vec3.copy(this.positionInParent, position);\r\n    this.updateTransformMatrix();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * set orientation in parent space\r\n   * @param {vec3} orientation\r\n   * @return {Transform}\r\n   */\r\n  public setOrientationInParent(orientation: vec3): Transform {\r\n    vec3.copy(this.orientationInParent, orientation);\r\n    /* for (let i = 0; i < 3; i++) {\r\n      this.orientationInParent[i] = normalizeAngle(this.orientationInParent[i]);\r\n    }*/\r\n    this.updateTransformMatrix();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * set scale in parent space\r\n   * @param {vec3} scale\r\n   * @return {Transform}\r\n   */\r\n  public setScaleInParent(scale: vec3): Transform {\r\n    vec3.copy(this.scaleInParent, scale);\r\n    this.updateTransformMatrix();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * get Transformation matrix in parent\r\n   * @return {vec3}\r\n   */\r\n  public getTransformationMatrix(): mat4 {\r\n    return this.transformationMatrix;\r\n  }\r\n}\r\n","import {mat4, vec2, vec3, vec4} from 'gl-matrix';\r\nimport Object3D, {ObjectRaycastHit} from 'WebGL/Objects/Object3D';\r\nimport Camera from '../Camera/Camera';\r\n\r\nexport interface RayCastable {\r\n  raycast(raycaster: RayCaster, transform: mat4): void;\r\n}\r\n\r\nexport enum RayCasterMode {\r\n  hitbox = 0,\r\n  face = 1 << 0,\r\n  edge = 1 << 1,\r\n  point = 1 << 2,\r\n}\r\n\r\n/**\r\n * RayCaster class\r\n */\r\nexport default class RayCaster {\r\n  private ray: Ray;\r\n  private obj: Object3D | RayCastable;\r\n  private mode: RayCasterMode;\r\n  private recursion: boolean;\r\n  private areaRange: number;\r\n  public static readonly STANDARD_AREA_RANGE = 0.1;\r\n\r\n  /**\r\n   * Creates new RayCaster\r\n   * @param {Ray} ray\r\n   * @param {Object3D | RayCastable} obj\r\n   * @param {RayCasterMode} mode\r\n   * @param {boolean} recursion\r\n   * @param {number} areaRange\r\n   */\r\n  constructor(ray: Ray, obj: Object3D | RayCastable,\r\n      mode: RayCasterMode = RayCasterMode.hitbox,\r\n      recursion = true, areaRange = 0.1) {\r\n    this.ray = ray;\r\n    this.obj = obj;\r\n    this.mode = mode;\r\n    this.recursion = recursion;\r\n    this.areaRange = areaRange;\r\n  }\r\n\r\n\r\n  /**\r\n   * Cast set ray\r\n   * @param {mat4} initMatrix\r\n   * @return {ObjectRaycastHit[] | null}\r\n   */\r\n  public cast(initMatrix?: mat4 | undefined): ObjectRaycastHit[] | null {\r\n    if (this.obj instanceof Object3D) {\r\n      const t = mat4.create();\r\n      if (initMatrix !== undefined) mat4.copy(t, initMatrix);\r\n      else mat4.copy(t, this.obj.getTransform().getTransformationMatrix());\r\n      const hits = this.castObject3D(this.obj, t);\r\n      return hits.filter((h): h is ObjectRaycastHit => h !== null);\r\n    } else {\r\n      console.log('not');\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cast in case of Object3D\r\n   * @param {Object3D} o\r\n   * @param {mat4} transformMat\r\n   * @return {(ObjectRaycastHit | null)[]}\r\n   */\r\n  private castObject3D(o: Object3D, transformMat: mat4):\r\n      (ObjectRaycastHit | null)[] {\r\n    let outArray: (ObjectRaycastHit | null)[] = [];\r\n    outArray.push(o.raycast(this, transformMat));\r\n\r\n    if (this.recursion) {\r\n      o.getChildrenList().forEach((child) => {\r\n        const tmpMat = mat4.create();\r\n        mat4.mul(tmpMat, transformMat,\r\n            child.getTransform().getTransformationMatrix());\r\n        outArray = outArray.concat(this.castObject3D(child, tmpMat));\r\n      });\r\n    }\r\n    return outArray;\r\n  }\r\n\r\n  /**\r\n   * Get mode of raycaster\r\n   * @return {RayCasterMode}\r\n   */\r\n  public getMode(): RayCasterMode {\r\n    return this.mode;\r\n  }\r\n\r\n  /**\r\n   * Set mode of raycaster\r\n   * @param {RayCasterMode} mode\r\n   */\r\n  public setMode(mode: RayCasterMode): void {\r\n    this.mode= mode;\r\n  }\r\n\r\n  /**\r\n   * Get ray\r\n   * @return {Ray}\r\n   */\r\n  public getRay(): Ray {\r\n    return this.ray;\r\n  }\r\n\r\n  /**\r\n   * Set ray\r\n   * @param {Ray} ray\r\n   */\r\n  public setRay(ray: Ray): void {\r\n    this.ray = ray;\r\n  }\r\n\r\n  /**\r\n   * Get raycastable object\r\n   * @return {Ray}\r\n   */\r\n  public getRaycastable(): Object3D | RayCastable {\r\n    return this.obj;\r\n  }\r\n\r\n  /**\r\n   * Set raycastable object\r\n   * @param {Object3D | RayCastable} obj\r\n   */\r\n  public setRaycastable(obj: Object3D | RayCastable): void {\r\n    this.obj = obj;\r\n  }\r\n\r\n  /**\r\n   * Get area range of ray\r\n   * @return {Ray}\r\n   */\r\n  public getAreaRange(): number {\r\n    return this.areaRange;\r\n  }\r\n\r\n  /**\r\n   * Set area range of ray\r\n   * @param {number} areaRange\r\n   */\r\n  public setAreaRange(areaRange: number): void {\r\n    this.areaRange = areaRange;\r\n  }\r\n}\r\n\r\n/**\r\n * Ray class\r\n */\r\nexport class Ray {\r\n  private origin: vec3;\r\n  private direction: vec3;\r\n\r\n  /**\r\n   * Creates Ray\r\n   * @param {vec3} origin\r\n   * @param {vec3} direction\r\n   */\r\n  constructor(origin: vec3 = [0, 0, 0], direction: vec3 = [1, 1, 1]) {\r\n    this.origin = origin;\r\n    this.direction = direction;\r\n  }\r\n\r\n  /**\r\n   * Return origin of ray\r\n   * @return {vec3}\r\n   */\r\n  public getOrigin(): vec3 {\r\n    return this.origin;\r\n  }\r\n\r\n  /**\r\n   * Return direction of ray\r\n   * @return {vec3}\r\n   */\r\n  public getDirection(): vec3 {\r\n    return this.direction;\r\n  }\r\n}\r\n\r\n/**\r\n * Creates ray from camera perspective\r\n * @param {vec2} screenCords\r\n * @param {Camera} camera\r\n * @return {Ray}\r\n */\r\nexport function createRayFromCamera(screenCords: vec2, camera: Camera): Ray {\r\n  const origin = camera.getPosition();\r\n\r\n  // const direction = vec3.fromValues(screenCords[0], screenCords[1], 0.5);\r\n  const direction4 = vec4.fromValues(screenCords[0], screenCords[1], 1, 1);\r\n  vec4.transformMat4(direction4, direction4, camera.getUnProjectMatrix());\r\n  const w = direction4[3] ? direction4[3] : 1;\r\n  const direction = vec3.fromValues(\r\n      direction4[0]/w,\r\n      direction4[1]/w,\r\n      direction4[2]/w);\r\n\r\n  vec3.sub(direction, direction, origin);\r\n  vec3.normalize(direction, direction);\r\n  return new Ray(origin, direction);\r\n}\r\n","const ShaderUniformsLocations = {\r\n  POSITION: 'position',\r\n  TEXTURE_COORDS: 'textureCoords',\r\n  NORMAL: 'normal',\r\n  TRANSFORMATION_MATRIX: 'transformationMatrix',\r\n  ALBEDO: 'albedo',\r\n  VIEW_MATRIX: 'viewMatrix',\r\n  PROJECTION_MATRIX: 'projectionMatrix',\r\n  LIGHT_POSITION: 'lightPosition',\r\n  LIGHT_COLOR: 'lightColor',\r\n  LIGHT_AMBIENT: 'lightAmbient',\r\n  DIFFUSE_TEXTURE: 'diffuseTexture',\r\n  HAS_DIFFUSE_TEXTURE: 'hasDiffuseTexture',\r\n};\r\n\r\nexport default ShaderUniformsLocations;\r\n","import WebGLU from 'WebGL/WebGlUtils';\r\nimport {mat4, vec4} from 'gl-matrix';\r\nimport ShaderUniformsLocations from './ShadersUniformLocations';\r\n\r\nexport const basicVertexShader = `\r\n  precision mediump float;\r\n  attribute vec3 ${ShaderUniformsLocations.POSITION};\r\n\r\n  varying vec3 surfaceNormal;\r\n  varying vec3 lightVector;\r\n\r\n  uniform mat4 ${ShaderUniformsLocations.TRANSFORMATION_MATRIX};\r\n  uniform mat4 ${ShaderUniformsLocations.VIEW_MATRIX};\r\n  uniform mat4 ${ShaderUniformsLocations.PROJECTION_MATRIX};\r\n  uniform vec3 ${ShaderUniformsLocations.LIGHT_POSITION};\r\n\r\n  vec4 getWorldPosition() {\r\n    return ${ShaderUniformsLocations.PROJECTION_MATRIX} *\r\n      ${ShaderUniformsLocations.VIEW_MATRIX} *\r\n      ${ShaderUniformsLocations.TRANSFORMATION_MATRIX} *\r\n      vec4(${ShaderUniformsLocations.POSITION}, 1.0);\r\n  }\r\n\r\n  void main(void) {\r\n    gl_Position = getWorldPosition();\r\n    gl_PointSize = 5.0;\r\n  }\r\n`;\r\n\r\nexport const basicFragmentShader = `\r\n  precision mediump float;\r\n\r\n  varying vec3 surfaceNormal;\r\n  varying vec3 lightVector;\r\n\r\n  uniform float ${ShaderUniformsLocations.LIGHT_AMBIENT};\r\n  uniform vec3 ${ShaderUniformsLocations.LIGHT_COLOR};\r\n\r\n  uniform vec4 ${ShaderUniformsLocations.ALBEDO};\r\n\r\n  float normalizedDot() {\r\n    vec3 unitNormal = normalize(surfaceNormal);\r\n    vec3 unitLightVector = normalize(lightVector);\r\n    return dot(unitNormal, unitLightVector);\r\n  }\r\n\r\n  vec4 getDiffuseTexture(){\r\n    return ${ShaderUniformsLocations.ALBEDO};\r\n    // return vec4(1.0, 1.0, 1.0, 1.0);\r\n  }\r\n\r\n  vec4 diffuseLighting(){\r\n    float brightness = max(normalizedDot(), \r\n      ${ShaderUniformsLocations.LIGHT_AMBIENT});\r\n    return vec4(${ShaderUniformsLocations.LIGHT_COLOR}.rgb * brightness, 1.0);\r\n  }\r\n\r\n  void main(void) {\r\n    gl_FragColor = getDiffuseTexture();\r\n  }\r\n\r\n`;\r\n\r\n/**\r\n * BasicShader\r\n */\r\nexport default class BasicShader {\r\n  private program: WebGLProgram | null = null;\r\n  private positionAttribute = -1;\r\n  private transformationMatrixUniform!: WebGLUniformLocation | null;\r\n  private viewMatrixUniform!: WebGLUniformLocation | null;\r\n  private projectionMatrixUniform!: WebGLUniformLocation | null;\r\n  private albedoUniform!: WebGLUniformLocation | null;\r\n  private lightPositionUniform!: WebGLUniformLocation | null;\r\n  private lightAmbientUniform!: WebGLUniformLocation | null;\r\n  private lightColorUniform!: WebGLUniformLocation | null;\r\n\r\n  /**\r\n   * BasicShader constructor\r\n   */\r\n  constructor() {\r\n    const vertexShader = WebGLU.createVertexShader();\r\n    if (!vertexShader) {\r\n      return;\r\n    }\r\n    WebGLU.addShaderSource(vertexShader, basicVertexShader);\r\n    WebGLU.compileShader(vertexShader);\r\n    this.compileStatus(vertexShader);\r\n\r\n    const fragmentShader = WebGLU.createFragmentShader();\r\n    if (!fragmentShader) {\r\n      return;\r\n    }\r\n    WebGLU.addShaderSource(fragmentShader, basicFragmentShader);\r\n    WebGLU.compileShader(fragmentShader);\r\n    this.compileStatus(fragmentShader);\r\n\r\n    const program = WebGLU.createShaderProgram();\r\n    if (!program) {\r\n      return;\r\n    }\r\n    WebGLU.attachShaderToProgram(program, vertexShader);\r\n    WebGLU.attachShaderToProgram(program, fragmentShader);\r\n    WebGLU.linkProgram(program);\r\n    this.program = program;\r\n\r\n    this.positionAttribute =\r\n      WebGLU.getAttribLocation(program, ShaderUniformsLocations.POSITION);\r\n\r\n    this.transformationMatrixUniform =\r\n      WebGLU.getUniformLocation(program,\r\n          ShaderUniformsLocations.TRANSFORMATION_MATRIX);\r\n    this.viewMatrixUniform =\r\n      WebGLU.getUniformLocation(program, ShaderUniformsLocations.VIEW_MATRIX);\r\n    this.projectionMatrixUniform =\r\n      WebGLU.getUniformLocation(program,\r\n          ShaderUniformsLocations.PROJECTION_MATRIX);\r\n    this.lightPositionUniform =\r\n      WebGLU.getUniformLocation(program,\r\n          ShaderUniformsLocations.LIGHT_POSITION);\r\n    this.lightColorUniform =\r\n      WebGLU.getUniformLocation(program, ShaderUniformsLocations.LIGHT_COLOR);\r\n    this.lightAmbientUniform =\r\n      WebGLU.getUniformLocation(program, ShaderUniformsLocations.LIGHT_AMBIENT);\r\n\r\n    this.albedoUniform =\r\n      WebGLU.getUniformLocation(program, ShaderUniformsLocations.ALBEDO);\r\n  }\r\n  /**\r\n   * Use this shader\r\n   * @return {void}\r\n   */\r\n  use(): void {\r\n    if (!this.program) {\r\n      return;\r\n    }\r\n    WebGLU.useProgram(this.program);\r\n  }\r\n\r\n  /**\r\n   * Prints shader compilation status\r\n   * @param {WebGLShader} shader\r\n   * @return {void}\r\n   */\r\n  compileStatus(shader: WebGLShader): void {\r\n    const gl = WebGLU.returnWebGLContext();\r\n    if (!gl) {\r\n      return;\r\n    }\r\n\r\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n      console.error(gl.getShaderInfoLog(shader));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @return {void}\r\n   */\r\n  enablePosition(): void {\r\n    WebGLU.enableVertexAttribArray(this.positionAttribute);\r\n    WebGLU.pointToAttribute(this.positionAttribute, 3);\r\n  }\r\n\r\n  /**\r\n   * enables given transformation matrix\r\n   * @param {mat4} matrix\r\n   */\r\n  enableTransformationMatrix(matrix: mat4): void {\r\n    WebGLU.uploadMatrix4fv(this.transformationMatrixUniform, matrix);\r\n  }\r\n\r\n  /**\r\n   * enable given projection matrix and view view matrix\r\n   * for this shader\r\n   * @param {mat4} view\r\n   * @param {mat4} projection\r\n   */\r\n  enableViewProjectionMatrices(view: mat4, projection: mat4): void {\r\n    WebGLU.uploadMatrix4fv(this.viewMatrixUniform, view);\r\n    WebGLU.uploadMatrix4fv(this.projectionMatrixUniform, projection);\r\n  }\r\n\r\n  /**\r\n   * Enables albedo\r\n   * @param {vec4} color\r\n   */\r\n  enableAlbedo(color: vec4): void {\r\n    WebGLU.uploadVec4f(this.albedoUniform, color);\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @return {WebGLProgram | null}\r\n   */\r\n  getProgram(): WebGLProgram | null {\r\n    return this.program;\r\n  }\r\n}\r\n/*\r\nexport const basicVertexShader = `\r\n  precision mediump float;\r\n  attribute vec3 ${ShaderUniformsLocations.POSITION};\r\n\r\n  varying vec3 surfaceNormal;\r\n  varying vec3 lightVector;\r\n\r\n  uniform mat4 ${ShaderUniformsLocations.TRANSFORMATION_MATRIX};\r\n  uniform mat4 ${ShaderUniformsLocations.VIEW_MATRIX};\r\n  uniform mat4 ${ShaderUniformsLocations.PROJECTION_MATRIX};\r\n  uniform vec3 ${ShaderUniformsLocations.LIGHT_POSITION};\r\n\r\n  vec4 getWorldPosition() {\r\n    return ${ShaderUniformsLocations.PROJECTION_MATRIX} *\r\n      ${ShaderUniformsLocations.VIEW_MATRIX} *\r\n      ${ShaderUniformsLocations.TRANSFORMATION_MATRIX} *\r\n      vec4(${ShaderUniformsLocations.POSITION}, 1.0);\r\n  }\r\n  vec3 getSurfaceNormal() {\r\n    return (${ShaderUniformsLocations.PROJECTION_MATRIX} *\r\n      ${ShaderUniformsLocations.VIEW_MATRIX} *\r\n      ${ShaderUniformsLocations.TRANSFORMATION_MATRIX} *\r\n      vec4(${ShaderUniformsLocations.NORMAL}, 0.0)).xyz;\r\n  }\r\n\r\n\r\n  void main(void) {\r\n    surfaceNormal = getSurfaceNormal();\r\n    lightVector = ${ShaderUniformsLocations.LIGHT_POSITION} - worldPos.xyz;\r\n    gl_Position = getWorldPosition();\r\n  }\r\n\r\n`;\r\n\r\nexport const basicFragmentShader = `\r\n  precision mediump float;\r\n  uniform float ${ShaderUniformsLocations.LIGHT_AMBIENT};\r\n  uniform vec3 ${ShaderUniformsLocations.LIGHT_COLOR};\r\n\r\n  float normalizedDot() {\r\n    vec3 unitNormal = normalize(surfaceNormal);\r\n    vec3 unitLightVector = normalize(lightVector);\r\n    return dot(unitNormal, unitLightVector);\r\n  }\r\n\r\n  vec4 getDiffuseTexture(){\r\n    return vec4(0.4, 0.4, 0.4, 1.0);\r\n  }\r\n\r\n  vec4 diffuseLighting(){\r\n    float brightness = max(normalizedDotnDot(),\r\n      ${ShaderUniformsLocations.LIGHT_AMBIENT});\r\n    return vec4(${ShaderUniformsLocations.LIGHT_COLOR}.rgb * brightness, 1.0);\r\n  }\r\n\r\n  void main(void) {\r\n    gl_FragColor = getDiffuseTexture() * diffuseLighting();\r\n  }\r\n\r\n`;*/\r\n","import {vec4} from 'gl-matrix';\r\nimport BasicShader from 'WebGL/Shaders/BasicShader';\r\n\r\n/**\r\n * Material class\r\n */\r\nexport default class ObjectMaterial {\r\n  private faceMaterial: Material;\r\n  private edgeMaterial: Material;\r\n  private pointMaterial: Material;\r\n\r\n  /**\r\n   * Creates new material\r\n   * @param {Material} faceMaterial\r\n   * @param {Material} edgeMaterial\r\n   * @param {Material} pointMaterial\r\n   */\r\n  constructor(faceMaterial = new Material(),\r\n      edgeMaterial = new Material(),\r\n      pointMaterial = new Material()) {\r\n    this.faceMaterial = faceMaterial;\r\n    this.edgeMaterial = edgeMaterial;\r\n    this.pointMaterial = pointMaterial;\r\n  }\r\n\r\n  /**\r\n   * Returns face material\r\n   * @return {Material}\r\n   */\r\n  public getFaceMaterial(): Material {\r\n    return this.faceMaterial;\r\n  }\r\n\r\n  /**\r\n   * Sets new face material\r\n   * @param {Material} mat\r\n   */\r\n  public setFaceMaterial(mat: Material): void {\r\n    this.faceMaterial = mat;\r\n  }\r\n\r\n  /**\r\n   * Returns edge material\r\n   * @return {Material}\r\n   */\r\n  public getEdgeMaterial(): Material {\r\n    return this.edgeMaterial;\r\n  }\r\n\r\n  /**\r\n   * Sets new edge material\r\n   * @param {Material} mat\r\n   */\r\n  public setEdgeMaterial(mat: Material): void {\r\n    this.edgeMaterial = mat;\r\n  }\r\n\r\n  /**\r\n   * Returns point material\r\n   * @return {Material}\r\n   */\r\n  public getPointMaterial(): Material {\r\n    return this.pointMaterial;\r\n  }\r\n\r\n  /**\r\n   * Sets new point material\r\n   * @param {Material} mat\r\n   */\r\n  public setPointMaterial(mat: Material): void {\r\n    this.pointMaterial = mat;\r\n  }\r\n}\r\n\r\n/**\r\n * CLass representing subMaterial so mesh can have\r\n *  access to different materials\r\n */\r\nexport class Material {\r\n  private shader: BasicShader;\r\n  private color: vec4;\r\n\r\n  /**\r\n   * Creates new material\r\n   * @param {BasicShader} shader\r\n   * @param {vec4} color\r\n   */\r\n  constructor(shader: BasicShader = new BasicShader(),\r\n      color: vec4 =[1.0, 1.0, 1.0, 1.0]) {\r\n    this.shader = shader;\r\n    this.color = color;\r\n  }\r\n\r\n  /**\r\n   * enables material\r\n   */\r\n  public enableMaterial(): void {\r\n    this.shader.enableAlbedo(this.color);\r\n  }\r\n\r\n  /**\r\n   * Get shader\r\n   * @return {BasicShader}\r\n   */\r\n  public getShader(): BasicShader {\r\n    return this.shader;\r\n  }\r\n\r\n  /**\r\n   * Sets color\r\n   * @param {vec4} color\r\n   */\r\n  public setColor(color: vec4): void {\r\n    this.color = color;\r\n  }\r\n  /**\r\n   * Gets color\r\n   * @return {vec4}\r\n   */\r\n  public getColor(): vec4 {\r\n    return this.color;\r\n  }\r\n}\r\n\r\n/**\r\n *\r\n */\r\nclass SpecialMaterials {\r\n  private selectedObjMat: ObjectMaterial | null = null;\r\n  private selectedFaceMat: ObjectMaterial | null = null;\r\n  private selectedEdgeMat: ObjectMaterial | null = null;\r\n  private selectedPointMat: ObjectMaterial | null = null;\r\n\r\n  private editingModeObjectMat: ObjectMaterial | null = null;\r\n\r\n\r\n  /**\r\n   * Inits predefined materials\r\n   */\r\n  public init() {\r\n    this.selectedObjMat = new ObjectMaterial();\r\n    this.selectedObjMat.getFaceMaterial()\r\n        .setColor([255/255, 158/255, 89/255, 1]);\r\n    this.selectedObjMat.getEdgeMaterial().setColor([214/255, 89/255, 0, 1]);\r\n\r\n    this.selectedFaceMat = new ObjectMaterial();\r\n    this.selectedFaceMat.getFaceMaterial()\r\n        .setColor([255/255, 158/255, 89/255, 1]);\r\n\r\n    this.selectedEdgeMat = new ObjectMaterial();\r\n    this.selectedEdgeMat.getEdgeMaterial().setColor([214/255, 89/255, 0, 1]);\r\n\r\n    this.selectedPointMat = new ObjectMaterial();\r\n    this.selectedPointMat.getPointMaterial()\r\n        .setColor([186/255, 105/255, 47/255, 1]);\r\n\r\n\r\n    this.editingModeObjectMat = new ObjectMaterial();\r\n    this.editingModeObjectMat.getFaceMaterial().setColor([1, 1, 1, 1]);\r\n    this.editingModeObjectMat.getEdgeMaterial().setColor([0.5, 0.5, 0.5, 1]);\r\n    this.editingModeObjectMat.getPointMaterial().setColor([0, 0, 0, 1]);\r\n  }\r\n\r\n  /**\r\n   * Returns material which colors selected object\r\n   * @return {ObjectMaterial | null}\r\n   */\r\n  public getSelectedObjectMaterial(): ObjectMaterial | null {\r\n    return this.selectedObjMat;\r\n  }\r\n\r\n  /**\r\n   * Returns material which colors selected face\r\n   * @return {ObjectMaterial | null}\r\n   */\r\n  public getSelectedFaceMaterial(): ObjectMaterial | null {\r\n    return this.selectedFaceMat;\r\n  }\r\n\r\n  /**\r\n   * Returns material which colors selected edge\r\n   * @return {ObjectMaterial | null}\r\n   */\r\n  public getSelectedEdgeMaterial(): ObjectMaterial | null {\r\n    return this.selectedEdgeMat;\r\n  }\r\n\r\n  /**\r\n   * Returns material which colors selected point\r\n   * @return {ObjectMaterial | null}\r\n   */\r\n  public getSelectedPointMaterial(): ObjectMaterial | null {\r\n    return this.selectedPointMat;\r\n  }\r\n\r\n  /**\r\n   * Returns material wto display in edit mode\r\n   * @return {ObjectMaterial | null}\r\n   */\r\n  public getEditModeObjectMaterial(): ObjectMaterial | null {\r\n    return this.editingModeObjectMat;\r\n  }\r\n}\r\n\r\nexport const SPECIAL_MATERIALS = new SpecialMaterials();\r\n","/**\r\n * Returns string builded from random characters\r\n * @param {number} length\r\n * @return {string}\r\n */\r\nexport function makeId(length: number): string {\r\n  let result = '';\r\n  const characters =\r\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n  const charactersLength = characters.length;\r\n  for ( let i = 0; i < length; i++ ) {\r\n    result += characters.charAt(Math.floor(Math.random() *\r\n        charactersLength));\r\n  }\r\n  return result;\r\n}\r\n","import {Renderable} from 'WebGL/Renderers/Renderer';\r\nimport {vec3, mat4} from 'gl-matrix';\r\nimport Mesh, {MeshRaycastHits} from './Mesh';\r\nimport Camera from 'WebGL/Camera/Camera';\r\nimport WebGLU from 'WebGL/WebGlUtils';\r\nimport BasicShader from 'WebGL/Shaders/BasicShader';\r\nimport CubeInst from './BasicMeshes/Cube';\r\nimport CylinderInst from './BasicMeshes/Cylinder';\r\nimport ConeInst from './BasicMeshes/Cone';\r\nimport TorusInst from './BasicMeshes/Torus';\r\nimport CircleInst from './BasicMeshes/Circle';\r\nimport {Transform} from 'WebGL/Objects/Transform';\r\nimport RayCaster, {RayCasterMode} from 'WebGL/Raycast/RayCaster';\r\nimport ObjectMaterial, {Material, SPECIAL_MATERIALS} from './Material';\r\nimport {makeId} from 'WebGL/utils.ts/stringUtils';\r\n\r\nexport type ObjectRaycastHit = {\r\n  hittedObject: Object3D,\r\n  hits: MeshRaycastHits,\r\n}\r\n\r\n/**\r\n * Class representing 3D object to render\r\n */\r\nexport default class Object3D implements Renderable {\r\n  private parent: Object3D | null;\r\n  private children: Object3D[];\r\n\r\n  private transform: Transform;\r\n\r\n  private material: ObjectMaterial;\r\n  private mesh: Mesh | null;\r\n\r\n  private isSelected = false;\r\n\r\n  private id: string;\r\n  private name: string;\r\n\r\n  /**\r\n   * Create 3D object\r\n   * @param {Transform} transform\r\n   * @param {Object3D | null} parent\r\n   * @param {Mesh | null} mesh\r\n   */\r\n  constructor(transform = new Transform(),\r\n      parent: Object3D | null = null, mesh: Mesh | null = null) {\r\n    this.parent = parent;\r\n    this.children = [];\r\n    this.transform = transform;\r\n\r\n    this.material = new ObjectMaterial();\r\n    this.material.getEdgeMaterial().setColor([0.5, 0.5, 0.5, 1]);\r\n    this.material.getPointMaterial().setColor([0, 0, 0, 1]);\r\n    // this.mesh = new Mesh();\r\n    // this.mesh = new Mesh(CubeInst);\r\n    // this.mesh = new Mesh(CylinderInst);\r\n    // this.mesh = new Mesh(ConeInst);\r\n    // this.mesh = new Mesh(TorusInst);\r\n    // this.mesh = new Mesh(CircleInst);\r\n    this.mesh = mesh;\r\n\r\n    this.id = Date.now() + ' ' + makeId(10);\r\n    this.name = makeId(10);\r\n  }\r\n\r\n  /**\r\n   * Return name of object\r\n   * @return {string}\r\n   */\r\n  public getName(): string {\r\n    return this.name;\r\n  }\r\n\r\n  /**\r\n   * Sets new name of object\r\n   * @param {string} newName\r\n   */\r\n  public setName(newName: string): void {\r\n    this.name = newName;\r\n  }\r\n\r\n  /**\r\n   * Return id of object\r\n   * @return {string}\r\n   */\r\n  public getId(): string {\r\n    return this.id;\r\n  }\r\n\r\n  /**\r\n   * CHanges state to selected\r\n   */\r\n  public select(): void {\r\n    this.isSelected = true;\r\n  }\r\n\r\n  /**\r\n   * Changes state to unselected\r\n   */\r\n  public unselect(): void {\r\n    this.isSelected = false;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {RayCaster} raycaster\r\n   * @param {mat4} transformMat\r\n   * @return {ObjectRaycastHit | null}\r\n   */\r\n  raycast(raycaster: RayCaster, transformMat: mat4): ObjectRaycastHit | null {\r\n    if (raycaster.getMode() === RayCasterMode.hitbox) {\r\n      console.log('Implement hitbox on Obejct3D raycast');\r\n      return null;\r\n    } else {\r\n      if (this.mesh !== null) {\r\n        const h = {\r\n          hittedObject: this,\r\n          hits:\r\n            this.mesh.raycastMesh(raycaster, transformMat),\r\n        };\r\n        return h.hits.pointsHits.length <= 0 &&\r\n            h.hits.edgesHits.length <= 0 &&\r\n            h.hits.facesHits.length <= 0 ? null : h;\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Adds object as a child of this object\r\n   * Sets parent of added object to this object\r\n   * @param {Object3D} object\r\n   */\r\n  public addChild(object: Object3D): void {\r\n    this.children.push(object);\r\n    object.setParent(this);\r\n  }\r\n\r\n  /**\r\n   * Removes object from this objects children list.\r\n   * If object was a child then parent of removed object is set to null;\r\n   * @param {Object3D} object\r\n   */\r\n  public removeChild(object: Object3D): void {\r\n    const index = this.children.indexOf(object);\r\n    if (index !== -1) {\r\n      this.children.splice(index, 1);\r\n      object.setParent(null);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns children list\r\n   * @return {Object3D[]}\r\n   */\r\n  public getChildrenList(): Object3D[] {\r\n    return this.children;\r\n  }\r\n\r\n  /**\r\n   * sets parent of this object\r\n   * @param {Object3D | null} object\r\n   */\r\n  public setParent(object: Object3D | null): void {\r\n    this.parent = object;\r\n  }\r\n\r\n  /**\r\n   * Returns object's parent\r\n   * @return {Object3D[]}\r\n   */\r\n  public getParent(): Object3D | null {\r\n    return this.parent;\r\n  }\r\n\r\n  /**\r\n   * Returns object's transformation matrix in world space\r\n   * @return {mat4}\r\n   */\r\n  public getWorldTransformMatrix(): mat4 {\r\n    const localTransform = this.transform.getTransformationMatrix();\r\n    if (this.parent === null) {\r\n      return localTransform;\r\n    } else {\r\n      const o = this.parent.getWorldTransformMatrix();\r\n      const out = mat4.create();\r\n      return mat4.multiply(out, o, localTransform);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Sets new mesh for object\r\n   * @param {Mesh} mesh\r\n   */\r\n  public setMesh(mesh: Mesh): void {\r\n    this.mesh = mesh;\r\n  }\r\n\r\n  /**\r\n   * Returns mesh for this object\r\n   * @return {Mesh | null}\r\n   */\r\n  public getMesh(): Mesh | null {\r\n    return this.mesh;\r\n  }\r\n\r\n  /**\r\n   * Sets new material for object\r\n   * @param {ObjectMaterial} material\r\n   */\r\n  public setMaterial(material: ObjectMaterial): void {\r\n    this.material = material;\r\n  }\r\n\r\n  /**\r\n   * Returns material for this object\r\n   * @return {ObjectMaterial}\r\n   */\r\n  public getMaterial(): ObjectMaterial {\r\n    return this.material;\r\n  }\r\n\r\n  /**\r\n   * Sets new transform for object\r\n   * @param {Transform} transform\r\n   */\r\n  public setTransform(transform: Transform): void {\r\n    this.transform = transform;\r\n  }\r\n\r\n  /**\r\n   * Returns transform for this object\r\n   * @return {Transform}\r\n   */\r\n  public getTransform(): Transform {\r\n    return this.transform;\r\n  }\r\n\r\n  /**\r\n   * Render this object\r\n   * @param {Camera} camera\r\n   * @param {mat4} transformationMatrixFromParent\r\n   * @param {boolean} drawEdges\r\n   */\r\n  public renderObj(camera: Camera, transformationMatrixFromParent: mat4,\r\n      drawEdges = true): void {\r\n    const transform = mat4.create();\r\n    mat4.multiply(transform,\r\n        transformationMatrixFromParent,\r\n        this.transform.getTransformationMatrix());\r\n\r\n    let mat: ObjectMaterial | null = this.material;\r\n    if (this.isSelected) mat = SPECIAL_MATERIALS.getSelectedObjectMaterial();\r\n    if (this.mesh && this.mesh.isEnabled() && mat) {\r\n      WebGLU.enablePolygonOffset(0.1, 1.0);\r\n      const shaderF = mat.getFaceMaterial().getShader();\r\n      this.setUpShader(shaderF, camera, transform);\r\n      mat.getFaceMaterial().enableMaterial();\r\n      this.mesh.drawFaces(shaderF);\r\n      WebGLU.disablePolygonOffset();\r\n\r\n      if (drawEdges) {\r\n        const shaderE = mat.getEdgeMaterial().getShader();\r\n        this.setUpShader(shaderE, camera, transform);\r\n        mat.getEdgeMaterial().enableMaterial();\r\n        this.mesh.drawEdges(shaderE);\r\n      }\r\n    }\r\n\r\n    this.children.forEach((c) => {\r\n      c.renderObj(camera, transform, drawEdges);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * enables shader and load matrices\r\n   * @param {BasicShader} shader\r\n   * @param {Camera} camera\r\n   * @param {mat4} t\r\n   */\r\n  private setUpShader(shader: BasicShader, camera: Camera, t: mat4): void {\r\n    shader.use();\r\n    shader.enableViewProjectionMatrices(\r\n        camera.getLookAtMatrix(),\r\n        camera.getProjectionMatrix());\r\n    shader.enableTransformationMatrix(t);\r\n  }\r\n}\r\n","import {Edge, Face, Point} from './MeshUtils';\r\n\r\nexport interface GeometryProvider {\r\n  getPoints(): Point[];\r\n  getEdges(): Edge[];\r\n  getFaces(): Face[];\r\n}\r\n\r\nexport interface GeometryBuilder {\r\n  build(): GeometryProvider;\r\n}\r\n\r\n/**\r\n * Simple geometry provide class\r\n */\r\nexport class SimpleProvider implements GeometryProvider {\r\n  private points: Point[];\r\n  private edges: Edge[];\r\n  private faces: Face[];\r\n\r\n  /**\r\n   * Simple geometry constructor\r\n   * @param {Point[]} points\r\n   * @param {Edge[]} edges\r\n   * @param {Face[]} faces\r\n   */\r\n  constructor(points: Point[], edges: Edge[], faces: Face[]) {\r\n    this.points = points;\r\n    this.edges = edges;\r\n    this.faces = faces;\r\n  }\r\n\r\n  /**\r\n   * @return {Point[]}\r\n   */\r\n  getPoints(): Point[] {\r\n    return this.points;\r\n  }\r\n\r\n  /**\r\n   * @return {Edge[]}\r\n   */\r\n  getEdges(): Edge[] {\r\n    return this.edges;\r\n  }\r\n\r\n  /**\r\n   * @return {Face[]}\r\n   */\r\n  getFaces(): Face[] {\r\n    return this.faces;\r\n  }\r\n}\r\n","import {mat4, vec3} from 'gl-matrix';\r\nimport RayCaster, {RayCastable, RayCasterMode} from 'WebGL/Raycast/RayCaster';\r\nimport BasicShader from 'WebGL/Shaders/BasicShader';\r\nimport WebGLU from 'WebGL/WebGlUtils';\r\nimport CircleInst from './BasicMeshes/Circle';\r\nimport ConeInst from './BasicMeshes/Cone';\r\nimport CubeInst from './BasicMeshes/Cube';\r\nimport CylinderInst from './BasicMeshes/Cylinder';\r\nimport {GeometryProvider, SimpleProvider} from './BasicMeshes/GeometryProvider';\r\nimport {Face, Edge, Point, PointHit, EdgeHit, FaceHit}\r\n  from './BasicMeshes/MeshUtils';\r\nimport TorusInst from './BasicMeshes/Torus';\r\n\r\nexport type MeshRaycastHits = {\r\n  pointsHits: PointHit[],\r\n  edgesHits: EdgeHit[],\r\n  facesHits: FaceHit[],\r\n}\r\n\r\n\r\n/**\r\n * Mesh class\r\n */\r\nexport default class Mesh {\r\n  private enabled: boolean;\r\n  protected faces: Face[] = [];\r\n  protected edges: Edge[] = [];\r\n  protected points: Point[] = [];\r\n\r\n  private verticesBuffer : WebGLBuffer | null = null;\r\n  private indicesBuffer : WebGLBuffer | null = null;\r\n  private vertices: number[] = [];\r\n  private indicesFaces: number[] = [];\r\n  private indicesEdges: number[] = [];\r\n  private indicesPoints: number[] = [];\r\n\r\n  /**\r\n   * Creates new Mesh instance\r\n   * @param {GeometryProvider} geometryProvider\r\n   */\r\n  constructor(geometryProvider: GeometryProvider = CubeInst) {\r\n    // const outVert = CubeInst.generateWebglVertexes();\r\n    // const outVert = CylinderInst.generateWebglVertexes();\r\n    // const outVert = TorusInst.generateWebglVertexes();\r\n    // const outVert = ConeInst.generateWebglVertexes();\r\n    // const outVert = CircleInst.generateWebglVertexes();\r\n    this.enabled = true;\r\n    this.points = geometryProvider.getPoints();\r\n    this.edges = geometryProvider.getEdges();\r\n    this.faces = geometryProvider.getFaces();\r\n    this.verticesBuffer = WebGLU.createBuffer();\r\n    this.indicesBuffer = WebGLU.createBuffer();\r\n    this.generateWebglVertexes();\r\n    this.loadVerticesBuffer();\r\n    this.loadIndicesBuffer();\r\n  }\r\n\r\n  /**\r\n   * Generates new vertices buffer\r\n   * @return {void}\r\n   */\r\n  private loadVerticesBuffer(): void {\r\n    if (this.verticesBuffer) {\r\n      WebGLU.uploadDataToBuffer(this.verticesBuffer, this.vertices);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generates new indices buffer\r\n   * @return {void}\r\n   */\r\n  private loadIndicesBuffer(): void {\r\n    if (this.indicesBuffer) {\r\n      WebGLU.uploadElementDataToBuffer(this.indicesBuffer, this.indicesFaces);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * activates this mesh\r\n   * @param {BasicShader} shader\r\n   */\r\n  public useFaces(shader: BasicShader): void {\r\n    if (this.verticesBuffer && this.indicesBuffer) {\r\n      WebGLU.bindArrayBuffer(this.verticesBuffer);\r\n      shader.enablePosition();\r\n      WebGLU.bindElementArrayBuffer(this.indicesBuffer);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Return length of indices array\r\n   * @return {number}\r\n   */\r\n  public getIndicesLength(): number {\r\n    // console.log(this.indicesPoints, this.vertices);\r\n    return this.indicesFaces ? this.indicesFaces.length : 0;\r\n  }\r\n\r\n  /**\r\n   * Generate indices and vertexes from face-edge-point hierarchy\r\n   * @return {[number[], number[]]}\r\n   */\r\n  private generateWebglVertexes(): [number[], number[]] {\r\n    const vertices: Array<number[]> = [];\r\n    let indices: Array<number> = [];\r\n    const points: Array<Point> = [];\r\n    const indicesDrawLine: Array<number> = [];\r\n\r\n    this.faces.forEach((face) => {\r\n      const pointsInEdges: Array<Point> = [];\r\n      const indicesInEdges: Array<number> = [];\r\n\r\n      face.getEdges().forEach((edge) => {\r\n        const [p1, p2] = edge.getPoints();\r\n        let findP1 = points.find((p) => p === p1);\r\n        let findP2 = points.find((p) => p === p2);\r\n        if (!findP1) {\r\n          points.push(p1);\r\n          findP1 = p1;\r\n        }\r\n        if (!findP2) {\r\n          points.push(p2);\r\n          findP2 = p2;\r\n        }\r\n\r\n        if (pointsInEdges.length === 0) {\r\n          pointsInEdges.push(findP1);\r\n          indicesInEdges.push(points.indexOf(findP1));\r\n          pointsInEdges.push(findP2);\r\n          indicesInEdges.push(points.indexOf(findP2));\r\n          return;\r\n        }\r\n\r\n        if (findP1 === pointsInEdges[0] &&\r\n            findP2 !== pointsInEdges[pointsInEdges.length - 1]) {\r\n          pointsInEdges.unshift(findP2);\r\n          indicesInEdges.unshift(points.indexOf(findP2));\r\n        } else if (findP1 === pointsInEdges[pointsInEdges.length - 1] &&\r\n            findP2 !== pointsInEdges[0]) {\r\n          pointsInEdges.push(findP2);\r\n          indicesInEdges.push(points.indexOf(findP2));\r\n        } else if (findP2 === pointsInEdges[0] &&\r\n            findP1 !== pointsInEdges[pointsInEdges.length - 1]) {\r\n          pointsInEdges.unshift(findP1);\r\n          indicesInEdges.unshift(points.indexOf(findP1));\r\n        } else if (findP2 === pointsInEdges[pointsInEdges.length - 1] &&\r\n            findP1 !== pointsInEdges[0]) {\r\n          pointsInEdges.push(findP1);\r\n          indicesInEdges.push(points.indexOf(findP1));\r\n        }\r\n      });\r\n      indices = indices.concat(indicesInEdges);\r\n    });\r\n\r\n    this.edges.forEach((e) => {\r\n      const [p1, p2] = e.getPoints();\r\n\r\n      let findP1 = points.find((p) => p === p1);\r\n      let findP2 = points.find((p) => p === p2);\r\n      if (!findP1) {\r\n        points.push(p1);\r\n        findP1 = p1;\r\n      }\r\n      if (!findP2) {\r\n        points.push(p2);\r\n        findP2 = p2;\r\n      }\r\n\r\n      indicesDrawLine.push(points.indexOf(findP1));\r\n      indicesDrawLine.push(points.indexOf(findP2));\r\n    });\r\n\r\n    points.forEach((p) => {\r\n      const vec = p.getCords();\r\n      vertices.push([vec[0], vec[1], vec[2]]);\r\n    });\r\n    const flatten = vertices.flat();\r\n\r\n    this.vertices = flatten;\r\n    this.indicesFaces = indices;\r\n    this.indicesEdges = indicesDrawLine;\r\n    this.indicesPoints = Array.from(Array(points.length).keys());\r\n    return [flatten, indices];\r\n  }\r\n\r\n  /**\r\n   * Copies this mesh as a new obj\r\n   * @return {Mesh}\r\n   */\r\n  public copy(): Mesh {\r\n    const newPoints: Point[] = [];\r\n    const newEdges: Edge[] = [];\r\n    const newFaces: Face[] = [];\r\n\r\n    this.points.forEach((p) => {\r\n      const po = vec3.create();\r\n      vec3.copy(po, p.getCords());\r\n      newPoints.push(new Point(po));\r\n    });\r\n\r\n    this.edges.forEach((e) => {\r\n      const p1 = this.points.find((p) =>\r\n        p === e.getPoints[0],\r\n      );\r\n      const p2 = newPoints.find((p) =>\r\n        p === e.getPoints[1],\r\n      );\r\n\r\n      if (p1 && p2) {\r\n        const i1 = this.points.indexOf(p1);\r\n        const i2 = this.points.indexOf(p2);\r\n        if (i1 >= 0 && i2 >= 0) {\r\n          newEdges.push(new Edge(newPoints[i1], newPoints[i2]));\r\n        }\r\n      }\r\n    });\r\n\r\n    this.faces.forEach((f) => {\r\n      const edgesIndexes: number[] = [];\r\n      f.getEdges().forEach((e) => {\r\n        const oldEdge = this.edges.find((oe) => oe === e);\r\n        if (oldEdge) {\r\n          const oldIndex = this.edges.indexOf(oldEdge);\r\n          if (oldIndex >= 0) {\r\n            edgesIndexes.push(oldIndex);\r\n          }\r\n        }\r\n      });\r\n      const newEdgesInFace = edgesIndexes.map((i) => {\r\n        return newEdges[i];\r\n      });\r\n      newFaces.push(new Face([newEdgesInFace[0], newEdgesInFace[1],\r\n        newEdgesInFace[2]]));\r\n    });\r\n    return new Mesh(new SimpleProvider(newPoints, newEdges, newFaces));\r\n  }\r\n\r\n  /**\r\n   * @param {RayCaster} raycaster\r\n   * @param {mat4} transformMatrix\r\n   * @return {MeshRaycastHits}\r\n   */\r\n  raycastMesh(raycaster: RayCaster, transformMatrix: mat4): MeshRaycastHits {\r\n    const pointsHits: (PointHit | null)[] = [];\r\n    const edgesHits: (EdgeHit | null)[] = [];\r\n    const facesHits: (FaceHit | null)[] = [];\r\n    if (this.enabled) {\r\n      if (raycaster.getMode() & RayCasterMode.face) {\r\n        this.faces.forEach((f) => {\r\n          facesHits.push(f.raycastFace(raycaster, transformMatrix));\r\n        });\r\n      }\r\n      if (raycaster.getMode() & RayCasterMode.edge) {\r\n        this.edges.forEach((e) => {\r\n          edgesHits.push(e.raycastEdge(raycaster, transformMatrix));\r\n        });\r\n      }\r\n      if (raycaster.getMode() & RayCasterMode.point) {\r\n        this.points.forEach((p) => {\r\n          pointsHits.push(p.raycastPoint(raycaster, transformMatrix));\r\n        });\r\n      }\r\n    }\r\n\r\n    return {\r\n      pointsHits: pointsHits.filter((p): p is PointHit => p !== null),\r\n      edgesHits: edgesHits.filter((e): e is EdgeHit => e !== null),\r\n      facesHits: facesHits.filter((f): f is FaceHit => f !== null),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * draws all points of mesh\r\n   * @param {BasicShader} shader\r\n   */\r\n  public drawPoints(shader: BasicShader): void {\r\n    if (this.verticesBuffer) {\r\n      shader.use();\r\n      WebGLU.bindArrayBuffer(this.verticesBuffer);\r\n      shader.enablePosition();\r\n      WebGLU.drawArraysPoint(this.points.length);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Draw edges of this mesh\r\n   * @param {BasicShader} shader\r\n   */\r\n  public drawEdges(shader: BasicShader): void {\r\n    if (this.verticesBuffer && this.indicesBuffer) {\r\n      shader.use();\r\n      WebGLU.bindArrayBuffer(this.verticesBuffer);\r\n      shader.enablePosition();\r\n      WebGLU.uploadElementDataToBuffer(this.indicesBuffer, this.indicesEdges);\r\n      WebGLU.bindElementArrayBuffer(this.indicesBuffer);\r\n      WebGLU.drawElementsEdge(this.indicesEdges.length);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Draws faces of this mesh\r\n   * @param {BasicShader} shader\r\n   */\r\n  public drawFaces(shader: BasicShader): void {\r\n    if (this.verticesBuffer && this.indicesBuffer) {\r\n      shader.use();\r\n      WebGLU.bindArrayBuffer(this.verticesBuffer);\r\n      shader.enablePosition();\r\n      WebGLU.uploadElementDataToBuffer(this.indicesBuffer, this.indicesFaces);\r\n      WebGLU.bindElementArrayBuffer(this.indicesBuffer);\r\n      WebGLU.drawElementsTriangle(this.indicesFaces.length);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Refreshes buffers of mesh\r\n   */\r\n  public refreshBuffers(): void {\r\n    this.generateWebglVertexes();\r\n    this.loadVerticesBuffer();\r\n  }\r\n\r\n  /**\r\n   * Returns all mesh's points\r\n   * @return {Point[]}\r\n   */\r\n  public getPoints(): Point[] {\r\n    return this.points;\r\n  }\r\n\r\n  /**\r\n   * Returns all mesh's edges\r\n   * @return {Point[]}\r\n   */\r\n  public getEdges(): Edge[] {\r\n    return this.edges;\r\n  }\r\n\r\n  /**\r\n   * Returns all mesh's faces\r\n   * @return {Point[]}\r\n   */\r\n  public getFaces(): Face[] {\r\n    return this.faces;\r\n  }\r\n\r\n  /**\r\n   * Enables mesh\r\n   */\r\n  public enable(): void {\r\n    this.enabled = true;\r\n  }\r\n\r\n  /**\r\n   * Disables mesh\r\n   */\r\n  public disable(): void {\r\n    this.enabled = true;\r\n  }\r\n\r\n  /**\r\n   * Enables or disables mesh based on parameter\r\n   * @param {boolean} newState\r\n   */\r\n  public enableDisable(newState: boolean): void {\r\n    this.enabled = newState;\r\n  }\r\n\r\n  /**\r\n   * Check if mesh is enabled\r\n   * @return {boolean}\r\n   */\r\n  public isEnabled(): boolean {\r\n    return this.enabled;\r\n  }\r\n}\r\n","import {createContext} from 'react';\r\n\r\nexport interface RefreshMechanismInt {\r\n  value: boolean;\r\n}\r\nexport const RefreshMechanism = createContext<RefreshMechanismInt | null>(null);\r\n\r\nexport interface RefresherInt {\r\n  refresh: () => void;\r\n}\r\nexport const Refresher = createContext<RefresherInt | null>(null);\r\n","import {isNaN, re} from 'mathjs';\r\nimport GLOBAL_COMPONENTS_REFRESH_EVENT from 'utils/RefreshEvent';\r\nimport {SimpleProvider} from 'WebGL/Objects/BasicMeshes/GeometryProvider';\r\nimport {Edge, Face, Point} from 'WebGL/Objects/BasicMeshes/MeshUtils';\r\nimport Mesh from 'WebGL/Objects/Mesh';\r\nimport Object3D from 'WebGL/Objects/Object3D';\r\nimport STATE from 'WebGL/State';\r\nimport earcut from 'earcut';\r\nimport {mat4, vec3} from 'gl-matrix';\r\nimport {collinear2D} from 'WebGL/utils.ts/Math';\r\n\r\n/**\r\n * Parses text from .obj format to Object3D. Returns null if format was invalid\r\n * @param {string} text\r\n * @return {Object3D[]}\r\n */\r\nexport function textToObject3D(text: string): Object3D[] {\r\n  const lines = text.split(/\\r\\n|\\n/);\r\n  const vertexes : Point[] = [];\r\n  let currVertexes : Point[] = [];\r\n  const edges : Edge[] = [];\r\n  let currEdges : Edge[] = [];\r\n  const faces : Face[] = [];\r\n  let currFaces : Face[] = [];\r\n  const processedEdgesIndices: number[][] = [];\r\n\r\n  const objectList: Object3D[] = [];\r\n  let currentObject: Object3D | null = null;\r\n  let skipObject = false;\r\n  let falseCnt = 0;\r\n\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const line = lines[i].trim();\r\n    const lineParts = line.split(/\\s+/);\r\n\r\n    // create new object\r\n    if (lineParts[0] === 'o') {\r\n      if (skipObject) {\r\n        falseCnt++;\r\n      } else if (currentObject) {\r\n        currentObject.setMesh(\r\n            new Mesh(new SimpleProvider(currVertexes, currEdges, currFaces)),\r\n        );\r\n        objectList.push(currentObject);\r\n      }\r\n      currVertexes = [];\r\n      currEdges = [];\r\n      currFaces = [];\r\n      skipObject = false;\r\n      currentObject = new Object3D();\r\n      if (lineParts[1]) currentObject.setName(lineParts[1]);\r\n    }\r\n\r\n    // read vertices\r\n    if ((lineParts.length === 4 || lineParts.length === 5) &&\r\n        lineParts[0] === 'v' && !skipObject) {\r\n      let normalizeCords = 1;\r\n      if (lineParts.length === 5) normalizeCords = parseFloat(lineParts[4]);\r\n      if (isNaN(normalizeCords) || normalizeCords === 0) {\r\n        skipObject = true;\r\n        break;\r\n      }\r\n\r\n      const normalizeX = parseFloat(lineParts[1])/normalizeCords;\r\n      const normalizeY = parseFloat(lineParts[2])/normalizeCords;\r\n      const normalizeZ = parseFloat(lineParts[3])/normalizeCords;\r\n      if (isNaN(normalizeX) ||\r\n          isNaN(normalizeY) ||\r\n          isNaN(normalizeZ)) {\r\n        skipObject = true;\r\n        break;\r\n      }\r\n      const p = new Point([normalizeX, normalizeY, normalizeZ]);\r\n      vertexes.push(p);\r\n      currVertexes.push(p);\r\n    }\r\n\r\n    // read faces\r\n    if (lineParts[0] === 'f' && !skipObject) {\r\n      const faceIndices = lineParts.slice(1);\r\n      const facePointsIndices = faceIndices.map((fi) => {\r\n        return parseInt(fi.split('/')[0]);\r\n      });\r\n\r\n      let triples: number[][] = [];\r\n      if (facePointsIndices.length === 3) {\r\n        // triangles case\r\n        triples = [facePointsIndices];\r\n      } else {\r\n        // polygon case\r\n        const facePoints = facePointsIndices.map((fp) => vertexes[fp - 1]);\r\n        if (facePoints.length > 3) {\r\n          const mappedToZPlane = facePoints.map((fp) => {\r\n            const cords = fp.getCords();\r\n            return [cords[0], cords[1]];\r\n          });\r\n          const p1Z = mappedToZPlane[0];\r\n          const p2Z = mappedToZPlane[1];\r\n          const isLineInZPlane = mappedToZPlane.map((mp, i) => {\r\n            if (i < 2) return true;\r\n            return collinear2D(p1Z[0], p1Z[1], p2Z[0], p2Z[1], mp[0], mp[1]);\r\n          }).reduce((pv, cv) => pv && cv, true);\r\n\r\n          // handle case when polygon mapped to Z plane ia a line\r\n          // TODO into one loop??\r\n          let internalTriangulatedIndices: number[] = [];\r\n          if (isLineInZPlane) {\r\n            for (let i = 0; i < 2; i++) {\r\n              const pointsOnPlane = facePoints.map((p) => {\r\n                const cords = p.getCords();\r\n                return [cords[0 + i], cords[2]];\r\n              });\r\n              internalTriangulatedIndices = earcut(\r\n                  pointsOnPlane.flat(), [], 2);\r\n              if (internalTriangulatedIndices.length > 0) break;\r\n            }\r\n          } else {\r\n            internalTriangulatedIndices = earcut(\r\n                facePoints.map((fp) => fp.getCords()).flat(), [], 3);\r\n          }\r\n          const externalTriangulatedIndices =\r\n          internalTriangulatedIndices.map((iti) =>\r\n            vertexes.indexOf(facePoints[iti]) + 1);\r\n\r\n          const finalIndices: number[][] = [];\r\n          while (externalTriangulatedIndices.length) {\r\n            finalIndices.push(externalTriangulatedIndices.splice(0, 3));\r\n          }\r\n          triples = finalIndices;\r\n        }\r\n      }\r\n\r\n      triples.forEach((triple) => {\r\n        const faceEdges: Edge[] = [];\r\n        for (let searchingIndex = 0;\r\n          searchingIndex < triple.length; searchingIndex++) {\r\n          const p1I = triple[searchingIndex];\r\n          const p2I = triple[\r\n              (searchingIndex + 1) % triple.length\r\n          ];\r\n\r\n          if (p1I < 1 || p2I < 1) return null;\r\n\r\n          const edgeIndex = triple.find((ei) => {\r\n            return (ei[0] === p1I && ei[1] === p2I) ||\r\n              (ei[0] === p2I && ei[1] === p1I);\r\n          });\r\n\r\n          if (edgeIndex) {\r\n            faceEdges.push(edges[edgeIndex[2]]);\r\n          } else {\r\n            const edge = new Edge(vertexes[p1I - 1], vertexes[p2I - 1]);\r\n            processedEdgesIndices.push([p1I, p2I, edges.length]);\r\n            edges.push(edge);\r\n            currEdges.push(edge);\r\n            faceEdges.push(edge);\r\n          }\r\n        }\r\n        const f = new Face(faceEdges as [Edge, Edge, Edge]);\r\n        faces.push(f);\r\n        currFaces.push(f);\r\n      });\r\n    }\r\n  }\r\n\r\n  if (skipObject) {\r\n    falseCnt++;\r\n  } else if (currentObject) {\r\n    currentObject.setMesh(\r\n        new Mesh(new SimpleProvider(currVertexes, currEdges, currFaces)),\r\n    );\r\n    objectList.push(currentObject);\r\n  }\r\n  return objectList;\r\n}\r\n\r\n/**\r\n * @param {Object3D} obj\r\n * @param {boolean} isRecursive\r\n * @return {string}\r\n */\r\nexport function object3DToString(\r\n    obj: Object3D, isRecursive = false,\r\n): string {\r\n  const vertices: Point[] = [];\r\n  const t = mat4.create();\r\n  mat4.identity(t);\r\n  return parseObjWithTransform(obj, t, vertices, isRecursive);\r\n}\r\n\r\n/**\r\n * @param {Object3D} obj\r\n * @param {mat4} transform\r\n * @param {Point[] | undefined} vertexes\r\n * @param {boolean} isRecursive\r\n * @return {string}\r\n */\r\nexport function parseObjWithTransform(\r\n    obj: Object3D, transform: mat4,\r\n    vertexes: Point[] | undefined, isRecursive = false,\r\n): string {\r\n  let usedVertexes: Point[] = [];\r\n  if (vertexes) usedVertexes = vertexes;\r\n\r\n  const parsedObj = parseObject(obj, transform, usedVertexes);\r\n  let parsedChildren: string[] = [];\r\n\r\n  if (isRecursive) {\r\n    parsedChildren = obj.getChildrenList().map((o) => {\r\n      const childrenTransform = mat4.create();\r\n      mat4.mul(childrenTransform,\r\n          transform, o.getTransform().getTransformationMatrix());\r\n      return parseObjWithTransform(\r\n          o, childrenTransform, usedVertexes, isRecursive);\r\n    });\r\n  }\r\n  return [parsedObj].concat(parsedChildren).join('\\n');\r\n}\r\n\r\n/**\r\n * Parses Object to text in .obj format\r\n * @param {Object3D} obj\r\n * @param {mat4} transform\r\n * @param {Point[]} vertexes\r\n * @return {string}\r\n */\r\nfunction parseObject(\r\n    obj: Object3D, transform: mat4, vertexes: Point[]): string {\r\n  const mesh = obj.getMesh();\r\n  let errorOccurred = false;\r\n  if (!mesh) return '';\r\n\r\n  // create point format\r\n  const objVertexes = mesh.getPoints();\r\n  vertexes.push(...objVertexes);\r\n  const vertexFormatArr = objVertexes.map((v) => {\r\n    const transformedCords = vec3.create();\r\n    vec3.transformMat4(transformedCords, v.getCords(), transform);\r\n    return 'v ' + transformedCords.join(' ');\r\n  });\r\n\r\n  // create face format\r\n  const objFaces = mesh.getFaces();\r\n  const faceFormatArr = objFaces.map((face) => {\r\n    if (errorOccurred) return '';\r\n    const points = face.getPoints();\r\n\r\n    const indices = points.map((point) =>{\r\n      const index = vertexes.indexOf(point);\r\n      if (index < 0) {\r\n        errorOccurred = true;\r\n        return 0;\r\n      }\r\n      return index + 1;\r\n    });\r\n    return 'f ' + indices.join(' ');\r\n  });\r\n  if (errorOccurred) return '';\r\n  const formattedObj = [`o ${obj.getName()}`]\r\n      .concat(vertexFormatArr, faceFormatArr);\r\n  return formattedObj.join('\\n');\r\n}\r\n","import ModalSystemContext from 'contexts/ModalSystemContext';\r\nimport {Refresher} from 'contexts/RefresherContext';\r\nimport React, {useContext, useEffect, useRef, useState} from 'react';\r\nimport {MdArrowUpward} from 'react-icons/md';\r\nimport {Button, DropdownItem, FormFeedback, FormGroup, FormText, Input,\r\n  Label} from 'reactstrap';\r\nimport {GUIButton} from 'utils/GUI/GUIUtils';\r\nimport GLOBAL_COMPONENTS_REFRESH_EVENT from 'utils/RefreshEvent';\r\nimport {textToObject3D}\r\n  from 'WebGL/Editor/FileParsers/ObjFormatParsingFunctions';\r\nimport Object3D from 'WebGL/Objects/Object3D';\r\nimport STATE from 'WebGL/State';\r\nimport saveFileWorker\r\n  from 'worker-loader!webWorkers/guiWorkers/saveObjectWorker';\r\n\r\nconst ImportObjButton = (): JSX.Element => {\r\n  const modalSystem = useContext(ModalSystemContext);\r\n  const refresher = useContext(Refresher);\r\n  const [isFileChooserDisplayed, setIsFileChooserDisplayed] = useState(false);\r\n\r\n  const [currFile, setCurrFile] = useState<File | null>(null);\r\n  const [invalidInput, setInvalidInput] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (modalSystem?.isOpen && isFileChooserDisplayed) {\r\n      refreshChosenFileModal();\r\n    }\r\n  }, [currFile, modalSystem?.isOpen, isFileChooserDisplayed]);\r\n\r\n  useEffect(() => {\r\n    if (isFileChooserDisplayed) {\r\n      setIsFileChooserDisplayed(modalSystem ? modalSystem.isOpen : false);\r\n    }\r\n  }, [modalSystem?.isOpen]);\r\n\r\n  const refreshChosenFileModal = () => {\r\n    modalSystem?.setModalData({\r\n      header: 'Import object',\r\n      body: (\r\n        <FormGroup>\r\n          <Input\r\n            type='file'\r\n            name='file'\r\n            accept='.obj'\r\n            onChange={(e) => {\r\n              setCurrFile(e.target.files && e.target.files.length > 0 ?\r\n                e.target.files['0'] : null);\r\n              setInvalidInput(e.target.files && e.target.files.length > 0 ?\r\n                false : true);\r\n            }}\r\n            invalid={invalidInput}\r\n          />\r\n          <FormFeedback className='input-error'>\r\n            File is not chosen\r\n          </FormFeedback>\r\n        </FormGroup>\r\n      ),\r\n      onOk: () => {\r\n        console.log(currFile);\r\n        if (!currFile) {\r\n          return false;\r\n        }\r\n        const reader = new FileReader();\r\n        reader.onload = function(e) {\r\n          // console.log(e && e.target ? e.target.result : 'null');\r\n          if (e && e.target && e.target.result) {\r\n            const fileName = currFile.name;\r\n            /*\r\n            const savingWorker = new Worker(\r\n                new URL('webWorkers/guiWorkers/saveObjectWorker',\r\n                    import.meta.url)\r\n                , {type: 'module'},\r\n            );\r\n            savingWorker.onmessage = (event) => {\r\n              console.log(event.data);\r\n            };\r\n            savingWorker.postMessage('init');\r\n            */\r\n\r\n            const objList = textToObject3D(e.target.result as string);\r\n            if (objList.length === 0) return;\r\n\r\n            const obj = new Object3D();\r\n\r\n            // setName\r\n            const name = fileName.split('.')[0];\r\n            obj.setName(name);\r\n\r\n            let parentObj = STATE.getSelectedObject();\r\n            if (!parentObj) {\r\n              parentObj = STATE.getWorld();\r\n            }\r\n            parentObj?.addChild(obj);\r\n            obj.setParent(parentObj);\r\n            objList.forEach((o) => {\r\n              o.setParent(obj);\r\n              obj.addChild(o);\r\n            });\r\n            GLOBAL_COMPONENTS_REFRESH_EVENT.refresh();\r\n          }\r\n        };\r\n        reader.readAsText(currFile);\r\n        return true;\r\n      },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <GUIButton\r\n      text='Import OBJ file'\r\n      ico={<MdArrowUpward/>}\r\n      onClick={() => {\r\n        setCurrFile(null);\r\n        setInvalidInput(true);\r\n        modalSystem?.open();\r\n        setIsFileChooserDisplayed(true);\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ImportObjButton;\r\n","import React from 'react';\r\nimport {DropdownItem} from 'reactstrap';\r\nimport {saveFile} from 'utils/functions';\r\nimport {object3DToString}\r\n  from 'WebGL/Editor/FileParsers/ObjFormatParsingFunctions';\r\nimport STATE from 'WebGL/State';\r\nimport {ExportChildrenProps} from './ExportObjDropdown';\r\n\r\nconst ExportToObj = (props: ExportChildrenProps): JSX.Element => {\r\n  return (\r\n    <DropdownItem\r\n      onClick={() => {\r\n        let obj = STATE.getSelectedObject();\r\n        if (!obj) obj = STATE.getWorld();\r\n        if (obj) {\r\n          saveFile(\r\n              `${obj.getName()}.obj`,\r\n              object3DToString(obj, props.exportChildren),\r\n          );\r\n        }\r\n      }}\r\n    >\r\n      Export to OBJ\r\n    </DropdownItem>\r\n  );\r\n};\r\n\r\nexport default ExportToObj;\r\n","/**\r\n * Saves file to disk. Data is passed as string\r\n * @param {string} filename\r\n * @param {string}data\r\n */\r\nexport function saveFile(filename, data) {\r\n  const blob = new Blob([data], {type: 'text/csv'});\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  const navigator: any = window.navigator;\r\n  if (navigator.msSaveOrOpenBlob) {\r\n    navigator.msSaveBlob(blob, filename);\r\n  } else {\r\n    const elem = window.document.createElement('a');\r\n    elem.href = window.URL.createObjectURL(blob);\r\n    elem.download = filename;\r\n    document.body.appendChild(elem);\r\n    elem.click();\r\n    document.body.removeChild(elem);\r\n  }\r\n}\r\n","import React, {useState} from 'react';\r\nimport {Dropdown, DropdownItem, Input, Label} from 'reactstrap';\r\nimport {ExportObjItemProps} from '../MainNavBar';\r\nimport ExportToObj from './ExportToObj';\r\n\r\nexport interface ExportChildrenProps {\r\n  exportChildren: boolean;\r\n}\r\n\r\nexport interface ExportSettingsProps {\r\n  exportChildren: boolean;\r\n  changeExportChildren: React.Dispatch<React.SetStateAction<boolean>>;\r\n}\r\n\r\nconst ExportObjDropdown = (props: ExportSettingsProps): JSX.Element => {\r\n  return (\r\n    <>\r\n      <DropdownItem\r\n        header\r\n      >\r\n        Settings\r\n      </DropdownItem>\r\n      <DropdownItem\r\n        toggle={false}\r\n        onClick={() => {\r\n          props.changeExportChildren(!props.exportChildren);\r\n        }}\r\n      >\r\n        <Label>Save children &nbsp;</Label>\r\n        <Input\r\n          type='checkbox'\r\n          checked={props.exportChildren}\r\n        />\r\n      </DropdownItem>\r\n\r\n      <DropdownItem\r\n        header\r\n      >\r\n        Actions\r\n      </DropdownItem>\r\n      <ExportActions exportChildren={props.exportChildren}/>\r\n    </>\r\n  );\r\n};\r\n\r\nconst ExportActions = (props: ExportChildrenProps): JSX.Element => {\r\n  return (\r\n    <>\r\n      <ExportToObj exportChildren={props.exportChildren}/>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ExportObjDropdown;\r\n","import {List} from '@mui/material';\r\nimport ModalSystemContext from 'contexts/ModalSystemContext';\r\nimport React, {useContext} from 'react';\r\nimport {DropdownItem, Form, Label} from 'reactstrap';\r\n\r\n\r\nconst MainInstruction = (): JSX.Element=> {\r\n  const modalSystem = useContext(ModalSystemContext);\r\n\r\n  const setUpInstruction = () => {\r\n    modalSystem?.setModalData({\r\n      header: 'Instruction',\r\n      body: <InstructionBody/>,\r\n    });\r\n    modalSystem?.open();\r\n  };\r\n\r\n  return (\r\n    <DropdownItem\r\n      onClick={setUpInstruction}\r\n    >\r\n      Instruction\r\n    </DropdownItem>\r\n  );\r\n};\r\n\r\nexport default MainInstruction;\r\n\r\n\r\nconst InstructionBody = (): JSX.Element => {\r\n  return (\r\n    <Form>\r\n      <h3>Camera</h3>\r\n      <List>\r\n        <p>\r\n          When you hold down C key, the camera is in Orbiting mode,\r\n          where you can change viewing angles by moving around\r\n          mouse while holding left mouse button.\r\n        </p>\r\n        <p>\r\n          When you hold down Shift key,\r\n          the camera is in Flying mode, where you can\r\n          move the camera position by holding down W, A, S, D keys.\r\n        </p>\r\n        <p>\r\n          When holding C key or Shift key you can zoom in\r\n          or zoom out by using mouse scroll\r\n        </p>\r\n      </List>\r\n\r\n      <h3>Views</h3>\r\n      <p>\r\n        There is a predefined set of tools for each view.\r\n        There are currently 2 views in the application:\r\n        <ul>\r\n          <li>\r\n            Layout view\r\n          </li>\r\n          <li>\r\n           Edit view\r\n          </li>\r\n        </ul>\r\n      </p>\r\n\r\n      <h5>Layout view</h5>\r\n      <p>\r\n        In layout view, you can manipulate position of an object\r\n        in space in relation to other objects. In this view you can also\r\n        select an object, that can be used in other views.\r\n        Objects are selected with the left mouse button.\r\n      </p>\r\n      <h5>Edit view</h5>\r\n      <p>\r\n        In edit view, you can manipulate positions and other properties of\r\n        the vertices, edges and faces of the selected object.\r\n        To switch between editing modes, use the menu\r\n        in upper left corner of the viewport.\r\n      </p>\r\n\r\n      <h3>\r\n        Tools\r\n      </h3>\r\n      <p>\r\n        There is a toolbox in the upper left section of the browser.\r\n        In toolbox, you can change selected tool, that\r\n        can be used to manipulate objects. Selected tool is highlighted.\r\n      </p>\r\n\r\n      <h3>Tool properties</h3>\r\n      <p>\r\n        There is a tool&apos;s properties window in the bottom\r\n        left section of the browser.\r\n        In this window you can manipulate tool&apos;s properties,\r\n        for example, speed change factor.\r\n        Some properties are global and other are common to given set of tools.\r\n      </p>\r\n\r\n      <h3>Navigation tree</h3>\r\n      <p>\r\n        There is a navigation tree window in the\r\n        upper right section of the browser.\r\n        In this window you can manipulate object\r\n        in render queue hierarchy by dragging objects over another object.\r\n        In this window you can an select object\r\n        or you can delete an object.\r\n        Position of object in space is computed relative to its parent.\r\n        For this reason, when you change the tree hierarchy\r\n        some objects may change their position in space.\r\n      </p>\r\n\r\n      <h3>Object properties</h3>\r\n      <p>\r\n        There is an object properties window in the\r\n        bottom right section of the browser.\r\n        In this window, you can manipulate object properties such as position.\r\n        Note that presented in this window position,\r\n        orientation and scale are relative to its parent.\r\n      </p>\r\n\r\n      <h3>Adding new objects</h3>\r\n      <p>\r\n        To add new object to the scene, you need to open\r\n        <q>Menu</q> drop-down and select <q>Add Object</q>.\r\n        There you can select the type of\r\n        mesh and set its properties such as height.\r\n        To confirm the new object, press <q>Ok</q> button.\r\n        The new object will be added as a child of selected object\r\n        or as a child of root element if no object is selected.\r\n      </p>\r\n\r\n      <h3>Importing existing object</h3>\r\n      <p>\r\n        To import an object from a file, click the <q>Import</q> button.\r\n        In the window that appears,\r\n        select the object to be imported, and then confirm.\r\n        The imported object will be added as a child of selected object\r\n        or as a child of root element if no object is selected.\r\n      </p>\r\n\r\n      <h3>Exporting object</h3>\r\n      To export an object to a file, open the <q>Export</q>\r\n      drop-down menu and select file extension.\r\n      In the menu that opens, there is an option\r\n      to change the behavior of the export mechanism.\r\n      You can either export one object or export an entire\r\n      subtree of objects into.\r\n      The selected object will be exported or root element\r\n      if no object is selected.\r\n\r\n    </Form>\r\n  );\r\n};\r\n","import React, {useRef, useState, useEffect} from 'react';\r\nimport {useContext} from 'react';\r\nimport {DropdownItem} from 'reactstrap';\r\nimport Frame from 'utils/Frame';\r\nimport ColorModeContext from 'contexts/ColorModeContext';\r\nimport {GUIDropdown} from 'utils/GUI/GUIUtils';\r\nimport {MdArrowDownward, MdDehaze} from 'react-icons/md';\r\nimport ViewManagerInst from 'WebGL/Views/ViewManager';\r\nimport ModalSystemContext from 'contexts/ModalSystemContext';\r\nimport AddObjectModal from './addObjects/AddObjectModal';\r\nimport {GeometryBuilder} from 'WebGL/Objects/BasicMeshes/GeometryProvider';\r\nimport STATE from 'WebGL/State';\r\nimport Object3D from 'WebGL/Objects/Object3D';\r\nimport Mesh from 'WebGL/Objects/Mesh';\r\nimport {Refresher} from 'contexts/RefresherContext';\r\nimport ImportObjButton from './import/ImportObj';\r\nimport ExportObjDropdown from './export/ExportObjDropdown';\r\nimport MainInstruction from './instructions/MainInstruction';\r\n\r\nexport interface ExportObjItemProps {\r\n  toggleMenu: () => void;\r\n}\r\n\r\nconst MainNavBar = (): JSX.Element => {\r\n  const color = useContext(ColorModeContext);\r\n  const modalSystem = useContext(ModalSystemContext);\r\n  const refresher = useContext(Refresher);\r\n\r\n  const error = useRef(false);\r\n  const currentBuilderRef =\r\n    useRef<GeometryBuilder | null | undefined>(undefined);\r\n\r\n  const [exportChildren, setExportChildren] = useState(false);\r\n\r\n  return (\r\n    <Frame\r\n      backgroundColor={color?.colorMode.backgroundColor}\r\n      borderColor={color?.colorMode.accentColor}\r\n      borderWidth={2}>\r\n      <GUIDropdown\r\n        text={'Menu'}\r\n        ico={<MdDehaze/>}\r\n      >\r\n        <DropdownItem\r\n          onClick={() => {\r\n            modalSystem?.setModalData({\r\n              header: 'Add Object',\r\n              body: (\r\n                <AddObjectModal\r\n                  markError={(e: boolean) => error.current = e}\r\n                  currentBuilderRef={currentBuilderRef}\r\n                />\r\n              ),\r\n              onOk: () => {\r\n                if (!error.current && currentBuilderRef.current !== undefined) {\r\n                  let parent: Object3D | null= null;\r\n                  const sObj = STATE.getSelectedObject();\r\n                  const world = STATE.getWorld();\r\n                  const newObj = new Object3D();\r\n                  if (currentBuilderRef.current) {\r\n                    newObj.setMesh(new Mesh(currentBuilderRef.current.build()));\r\n                  }\r\n                  if (sObj) {\r\n                    parent = sObj;\r\n                  } else if (world) {\r\n                    parent = world;\r\n                  }\r\n                  if (parent) {\r\n                    parent.addChild(newObj);\r\n                    newObj.setParent(parent);\r\n                    refresher?.refresh();\r\n                  }\r\n                }\r\n                return !error.current;\r\n              },\r\n            });\r\n            modalSystem?.open();\r\n          }}\r\n        >\r\n          Add Object\r\n        </DropdownItem>\r\n        <MainInstruction/>\r\n      </GUIDropdown>\r\n      <ImportObjButton/>\r\n      <GUIDropdown\r\n        text={'Export'}\r\n        ico={<MdArrowDownward/>}\r\n      >\r\n        <ExportObjDropdown\r\n          exportChildren={exportChildren}\r\n          changeExportChildren={setExportChildren}/>\r\n      </GUIDropdown>\r\n    </Frame>\r\n  );\r\n};\r\n\r\nexport default MainNavBar;\r\n","import {createContext} from 'react';\r\nimport {EditViewMode} from 'WebGL/Views/EditView';\r\n\r\nexport interface EditModeContextInt {\r\n  editMode: EditViewMode,\r\n  setEditMode: React.Dispatch<React.SetStateAction<EditViewMode>>\r\n}\r\nconst EditModeContext = createContext<EditModeContextInt | null>(null);\r\n\r\nexport default EditModeContext;\r\n","import {vec3, mat4} from 'gl-matrix';\r\nimport {CanvasEvent, CanvasListener} from 'WebGL/Listeners/CanvasEvent';\r\nimport {normalizeAngle, toRadians} from 'WebGL/utils.ts/Math';\r\nimport WebGLU from 'WebGL/WebGlUtils';\r\n/**\r\n * Standard camera class\r\n */\r\nexport default class Camera implements CanvasListener {\r\n  private azAngle: number;\r\n  private elAngle: number;\r\n  private distanceToLookingPoint: number;\r\n  private position: vec3;\r\n  private pointToLook: vec3;\r\n  private lookAtMatrix: mat4;\r\n  private invertedLookAtMatrix: mat4;\r\n  private projectionMatrix: mat4;\r\n  private fov: number;\r\n  private isCameraUpSideDown = false;\r\n\r\n  private screenWidth = 0;\r\n  private screenHeight = 0;\r\n\r\n  private canvasEvent: CanvasEvent | null = null;\r\n\r\n  /**\r\n   * create camera with lookAtMatrix\r\n   * @param {number} azAngle in radians\r\n   * @param {number} elAngle in radians\r\n   * @param {number} distanceToLookingPoint\r\n   *  distance between position and lookAtpoint\r\n   * @param {vec3} pointToLook point to look at\r\n   * @param {number} fov field of view\r\n   */\r\n  public constructor(azAngle = 0, elAngle = 0,\r\n      distanceToLookingPoint = 5, pointToLook: vec3 = [0, 0, 0], fov = 60) {\r\n    this.azAngle = azAngle;\r\n    this.elAngle = elAngle;\r\n    this.distanceToLookingPoint = distanceToLookingPoint;\r\n    this.pointToLook = pointToLook;\r\n    this.position = this.updatePosition();\r\n    this.invertedLookAtMatrix = mat4.create();\r\n    this.lookAtMatrix = this.calcLookAt();\r\n    this.fov = fov;\r\n    this.projectionMatrix = mat4.create();\r\n    const c = WebGLU.returnCanvas();\r\n    if (c) {\r\n      this.screenHeight = c.height;\r\n      this.screenWidth = c.width;\r\n\r\n      const ratio = c.width / c.height;\r\n      if (!this.projectionMatrix) {\r\n        this.projectionMatrix = mat4.create();\r\n      }\r\n      mat4.perspective(this.projectionMatrix,\r\n          toRadians(this.fov/ratio), ratio, 0.1, 100);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @param {number} width\r\n   * @param {number} height\r\n   * @param {string} id\r\n   */\r\n  onResize(x: number, y: number,\r\n      width: number, height: number): void {\r\n    this.screenHeight = height;\r\n    this.screenWidth = width;\r\n\r\n    const ratio = width / height;\r\n    if (!this.projectionMatrix) {\r\n      this.projectionMatrix = mat4.create();\r\n    }\r\n    mat4.perspective(this.projectionMatrix,\r\n        toRadians(this.fov/ratio), ratio, 0.1, 100000);\r\n  }\r\n\r\n  /**\r\n   * Recalculates position of camera based on distance and angles\r\n   * @return {vec3}\r\n   */\r\n  private updatePosition(): vec3 {\r\n    this.position = [\r\n      this.distanceToLookingPoint *\r\n        Math.cos(this.azAngle) * Math.cos(this.elAngle),\r\n      this.distanceToLookingPoint * Math.sin(this.elAngle),\r\n      this.distanceToLookingPoint *\r\n        Math.sin(this.azAngle) * Math.cos(this.elAngle),\r\n    ];\r\n    vec3.add(this.position, this.position, this.pointToLook);\r\n    return this.position;\r\n  }\r\n\r\n  /**\r\n   * Returns viewport dimensions\r\n   * @return {[number, number]}\r\n   */\r\n  public getScreenDimensions(): [number, number] {\r\n    return [this.screenWidth, this.screenHeight];\r\n  }\r\n\r\n  /**\r\n   * @return {mat4}\r\n   */\r\n  private calcLookAt(): mat4 {\r\n    const vecUp: vec3 = [0, 1, 0];\r\n    this.isCameraUpSideDown = false;\r\n    if ((this.elAngle > Math.PI/2) || (this.elAngle <= -(Math.PI/2))) {\r\n      vecUp[1] = -1;\r\n      this.isCameraUpSideDown = true;\r\n    }\r\n    this.lookAtMatrix = mat4.create();\r\n    this.lookAtMatrix = mat4.lookAt(this.lookAtMatrix,\r\n        this.position, this.pointToLook, vecUp);\r\n    mat4.invert(this.invertedLookAtMatrix, this.lookAtMatrix);\r\n    return this.lookAtMatrix;\r\n  }\r\n  /**\r\n   * @return {mat4}\r\n   */\r\n  public getLookAtMatrix(): mat4 {\r\n    const out = mat4.create();\r\n    mat4.copy(out, this.lookAtMatrix);\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * @return {mat4}\r\n   */\r\n  public getCameraToWorldMatrix(): mat4 {\r\n    const out = mat4.create();\r\n    mat4.copy(out, this.invertedLookAtMatrix);\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Returns projection matrix\r\n   * @return {mat4}\r\n   */\r\n  public getProjectionMatrix(): mat4 {\r\n    const out = mat4.create();\r\n    mat4.copy(out, this.projectionMatrix);\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Checks if camera is upside down\r\n   * @return {boolean}\r\n   */\r\n  public checkIfCameraUpSideDown(): boolean {\r\n    return this.isCameraUpSideDown;\r\n  }\r\n\r\n  /**\r\n   * Return distance beetween camera and point to look at.\r\n   * @return {number}\r\n   */\r\n  public getRadius(): number {\r\n    return this.distanceToLookingPoint;\r\n  }\r\n\r\n  /**\r\n   * Set istance beetween camera and point to look at.\r\n   * @param {number} radius\r\n   */\r\n  public setRadius(radius: number): void {\r\n    this.distanceToLookingPoint = radius;\r\n    this.updatePosition();\r\n    this.calcLookAt();\r\n  }\r\n\r\n  /**\r\n   * Return azimut angle.\r\n   * @return {number}\r\n   */\r\n  public getAzimutAngle(): number {\r\n    return this.azAngle;\r\n  }\r\n\r\n  /**\r\n   * Set azimut angle.\r\n   * @param {number} angle\r\n   */\r\n  public setAzimutAngle(angle: number): void {\r\n    this.azAngle = normalizeAngle(angle);\r\n    this.updatePosition();\r\n    this.calcLookAt();\r\n  }\r\n\r\n  /**\r\n   * Return elevation angle.\r\n   * @return {number}\r\n   */\r\n  public getElevationAngle(): number {\r\n    return this.elAngle;\r\n  }\r\n\r\n  /**\r\n   * Set elevation angle.\r\n   * @param {number} angle\r\n   */\r\n  public setElevationAngle(angle: number): void {\r\n    this.elAngle = normalizeAngle(angle);\r\n    this.updatePosition();\r\n    this.calcLookAt();\r\n  }\r\n\r\n  /**\r\n   * Return current position.\r\n   * @return {vec3}\r\n   */\r\n  public getPosition(): vec3 {\r\n    const out = vec3.create();\r\n    vec3.copy(out, this.position);\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Sets new position.\r\n   * @param {vec3} point\r\n   * @return {void}\r\n   */\r\n  public setPointToLookAt(point: vec3): void {\r\n    vec3.copy(this.pointToLook, point);\r\n    this.updatePosition();\r\n    this.calcLookAt();\r\n  }\r\n\r\n  /**\r\n   * Returns position on which camera is looking\r\n   * @return {vec3}\r\n   */\r\n  public getPointToLookAt(): vec3 {\r\n    const out = vec3.create();\r\n    vec3.copy(out, this.pointToLook);\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Sets canvas event, subscirbes to it and usubscribes from old one\r\n   * @param {CanvasEvent | null} canvasEvent\r\n   */\r\n  public setCanvasEvent(canvasEvent: CanvasEvent | null): void {\r\n    if (this.canvasEvent) {\r\n      this.canvasEvent.unsubscribe(this);\r\n    }\r\n    this.canvasEvent = canvasEvent;\r\n    if (this.canvasEvent) {\r\n      this.canvasEvent.subscribe(this);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns matrix used to calculate points from screen cords to world cords.\r\n   * @return {mat4}\r\n   */\r\n  public getUnProjectMatrix(): mat4 {\r\n    const out = mat4.create();\r\n    const camModMat = mat4.create();\r\n    mat4.copy(out, mat4.invert(out, this.getProjectionMatrix()));\r\n    mat4.multiply(out, mat4.invert(camModMat, this.getLookAtMatrix()), out);\r\n    return out;\r\n  }\r\n}\r\n","import WebGLEvent from 'WebGL/Listeners/WebGLEvent';\r\n\r\nexport interface KeyboardListener {\r\n  onKeyDown(event: globalThis.KeyboardEvent);\r\n  onKeyUp(event: globalThis.KeyboardEvent);\r\n}\r\n\r\n/**\r\n * Class representing mouse events\r\n */\r\nexport class KeyboardEvent extends WebGLEvent<KeyboardListener> {\r\n  /**\r\n   *\r\n   */\r\n  init(): void {\r\n    document.onkeydown = (e) => {\r\n      this.getListeners().forEach((el) => {\r\n        el.onKeyDown(e);\r\n      });\r\n      this.refresh();\r\n    };\r\n\r\n    document.onkeyup = (e) => {\r\n      this.getListeners().forEach((el) => {\r\n        el.onKeyUp(e);\r\n      });\r\n      this.refresh();\r\n    };\r\n  }\r\n}\r\n\r\nconst WebGLKeyboardEvent = new KeyboardEvent();\r\n\r\nexport default WebGLKeyboardEvent;\r\n","import WebGLU from 'WebGL/WebGlUtils';\r\nimport WebGLEvent from 'WebGL/Listeners/WebGLEvent';\r\n\r\nexport interface MouseListener {\r\n  onWheel(event: WheelEvent): void;\r\n  onMouseMove(event: globalThis.MouseEvent, dx: number, dy: number): void;\r\n  onMouseDown(event: globalThis.MouseEvent): void;\r\n  onMouseUp(event: globalThis.MouseEvent): void;\r\n  onMouseClick(event: globalThis.MouseEvent): void;\r\n}\r\n\r\n/**\r\n * Class representing mouse events\r\n */\r\nexport class MouseEvent extends WebGLEvent<MouseListener> {\r\n  private x = 0;\r\n  private y = 0;\r\n  private isPressed = false;\r\n\r\n  /**\r\n   *\r\n   */\r\n  init(): void {\r\n    const gl: WebGLRenderingContext | null = WebGLU.returnWebGLContext();\r\n    if (!gl) {\r\n      return;\r\n    }\r\n\r\n    const canvas = gl.canvas as HTMLCanvasElement;\r\n\r\n\r\n    canvas.onwheel = (e) => {\r\n      this.getListeners().forEach((el) => {\r\n        el.onWheel(e);\r\n      });\r\n      this.refresh();\r\n    };\r\n\r\n    canvas.onmousemove = (e) => {\r\n      const dx = e.clientX - this.x;\r\n      const dy = e.clientY - this.y;\r\n      this.x = e.clientX;\r\n      this.y = e.clientY;\r\n      this.getListeners().forEach((el) => {\r\n        el.onMouseMove(e, dx, dy);\r\n      });\r\n      this.refresh();\r\n    };\r\n\r\n    canvas.onmousedown = (e) => {\r\n      this.x = e.clientX;\r\n      this.y = e.clientY;\r\n      this.isPressed = true;\r\n      this.getListeners().forEach((el) => {\r\n        el.onMouseDown(e);\r\n      });\r\n      this.refresh();\r\n    };\r\n\r\n    canvas.onmouseup = (e) => {\r\n      this.isPressed = false;\r\n      this.getListeners().forEach((el) => {\r\n        el.onMouseUp(e);\r\n      });\r\n      this.refresh();\r\n    };\r\n\r\n    canvas.onclick = (e) => {\r\n      this.getListeners().forEach((el) => {\r\n        el.onMouseClick(e);\r\n      });\r\n      this.refresh();\r\n    };\r\n  }\r\n}\r\n\r\nconst WebGLMouseEvent = new MouseEvent();\r\n\r\nexport default WebGLMouseEvent;\r\n","import {vec2, vec3, vec4} from 'gl-matrix';\r\nimport WebGLKeyboardEvent, {KeyboardListener}\r\n  from 'WebGL/Listeners/KeyboardEvent';\r\nimport WebGLMouseEvent, {MouseListener} from 'WebGL/Listeners/MouseEvent';\r\nimport RayCaster, {createRayFromCamera} from 'WebGL/Raycast/RayCaster';\r\nimport WebGLU from 'WebGL/WebGlUtils';\r\nimport Camera from './Camera';\r\n\r\n/**\r\n * Camera controller\r\n */\r\nexport default class CameraController implements MouseListener,\r\n    KeyboardListener {\r\n  private camera: Camera;\r\n  private raycaster: RayCaster;\r\n\r\n  private isActive = false;\r\n  private blockedBy = 0;\r\n  private isInFlyingMode = false;\r\n  private isInOrbitMode = false;\r\n\r\n  private zoomScale = 0.01;\r\n  private pix2angle = 0.2;\r\n  private angleSpeed = 0.02;\r\n  private cameraMotionSpeed = 0.1;\r\n\r\n  private isLeftActive = false;\r\n  private isRightActive = false;\r\n  private isMiddleActive = false;\r\n  private cameraCanvasWidth: number;\r\n  private keysPressed = {};\r\n\r\n  private signAzimut = -1;\r\n  private signElevation = -1;\r\n\r\n  /**\r\n   * @param {Camera} camera camera to controll\r\n   * @param {RayCaster} raycaster\r\n   */\r\n  constructor(camera: Camera, raycaster: RayCaster) {\r\n    this.camera = camera;\r\n    this.raycaster = raycaster;\r\n    WebGLKeyboardEvent.subscribe(this);\r\n    WebGLMouseEvent.subscribe(this);\r\n    this.cameraCanvasWidth = this.camera.getScreenDimensions()[0];\r\n    this.pix2angle = 180 / this.cameraCanvasWidth;\r\n  }\r\n\r\n  /**\r\n   * Check if camera is controlled at the moment\r\n   * @return {boolean}\r\n   */\r\n  public isCameraActive(): boolean {\r\n    return this.isActive;\r\n  }\r\n\r\n  /**\r\n   * Check by how many objects camera is blocked\r\n   * @return {boolean}\r\n   */\r\n  public isCameraBlocked(): boolean {\r\n    return this.blockedBy !== 0;\r\n  }\r\n\r\n  /**\r\n   * Block camera by caller\r\n   */\r\n  public block(): void {\r\n    this.blockedBy++;\r\n  }\r\n\r\n  /**\r\n   * Unblock camera by caller\r\n   */\r\n  public unblock(): void {\r\n    if (this.blockedBy > 0) this.blockedBy--;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {KeyboardEvent} event\r\n   */\r\n  onKeyDown(event: KeyboardEvent): void {\r\n    if (this.blockedBy) return;\r\n    if (event.key === 'c' || event.key === 'C') {\r\n      this.isActive = true;\r\n      this.isInOrbitMode = true;\r\n      this.keysPressed['c'] = true;\r\n    }\r\n    if (event.shiftKey) {\r\n      this.isInFlyingMode = true;\r\n      this.isActive = true;\r\n      this.keysPressed['shift'] = true;\r\n    }\r\n\r\n    if (event.key === 'a' || event.key === 'A') {\r\n      this.keysPressed['a'] = true;\r\n    }\r\n    if (event.key === 's' || event.key === 'S') {\r\n      this.keysPressed['s'] = true;\r\n    }\r\n    if (event.key === 'd' || event.key === 'D') {\r\n      this.keysPressed['d'] = true;\r\n    }\r\n    if (event.key === 'w' || event.key === 'W') {\r\n      this.keysPressed['w'] = true;\r\n    }\r\n    this.updatePosInFlyingMode();\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {KeyboardEvent} event\r\n   */\r\n  onKeyUp(event: KeyboardEvent): void {\r\n    if (this.blockedBy) return;\r\n    if (event.key === 'c' || event.key === 'C') {\r\n      this.isInOrbitMode = false;\r\n      this.keysPressed['c'] = false;\r\n    }\r\n    if (!event.shiftKey) {\r\n      this.isInFlyingMode = false;\r\n      this.keysPressed['shift'] = false;\r\n    }\r\n    if (event.key === 'a' || event.key === 'A') {\r\n      this.keysPressed['a'] = false;\r\n    }\r\n    if (event.key === 's' || event.key === 'S') {\r\n      this.keysPressed['s'] = false;\r\n    }\r\n    if (event.key === 'd' || event.key === 'D') {\r\n      this.keysPressed['d'] = false;\r\n    }\r\n    if (event.key === 'w' || event.key === 'W') {\r\n      this.keysPressed['w'] = false;\r\n    }\r\n\r\n    if (!(this.keysPressed['c'] || this.keysPressed['shift'])) {\r\n      this.isActive = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {WheelEvent} event\r\n   */\r\n  onWheel(event: WheelEvent): void {\r\n    if (this.blockedBy) return;\r\n    if (this.isActive) {\r\n      const newRadius = this.camera.getRadius() + event.deltaY * this.zoomScale;\r\n      if (newRadius > 0.1) {\r\n        this.camera.setRadius(newRadius);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {MouseEvent} event\r\n   * @param {number} dx\r\n   * @param {number} dy\r\n   */\r\n  onMouseMove(event: MouseEvent, dx: number, dy: number): void {\r\n    const camW = this.camera.getScreenDimensions()[0];\r\n    if (camW !== this.cameraCanvasWidth) {\r\n      this.pix2angle = 180 / camW;\r\n      this.cameraCanvasWidth = camW;\r\n    }\r\n\r\n    if (this.blockedBy) return;\r\n    if (this.isActive) {\r\n      if (this.isInOrbitMode && this.isLeftActive) {\r\n      // const signElevation = -1;\r\n      // const signAzimut = this.camera.checkIfCameraUpSideDown() ? 1 : -1;\r\n      // const signAzimut = -1;\r\n        this.camera.setAzimutAngle(\r\n            this.camera.getAzimutAngle() + this.signAzimut *\r\n          this.pix2angle * this.angleSpeed * -dx);\r\n        this.camera.setElevationAngle(\r\n            this.camera.getElevationAngle() + this.signElevation *\r\n          this.pix2angle * this.angleSpeed * -dy);\r\n      } else if (this.isInFlyingMode && this.isLeftActive) {\r\n        '';\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {MouseEvent} event\r\n   */\r\n  onMouseDown(event: MouseEvent): void {\r\n    if (this.blockedBy) return;\r\n    if (event.button === 0) {\r\n      this.isLeftActive = true;\r\n    }\r\n    if (event.button === 1) {\r\n      this.isMiddleActive = true;\r\n    }\r\n    if (event.button === 2) {\r\n      this.isRightActive = true;\r\n    }\r\n    this.signAzimut = this.camera.checkIfCameraUpSideDown() ? 1 : -1;\r\n  }\r\n\r\n  /**\r\n   * @param {MouseEvent} event\r\n   */\r\n  onMouseUp(event: MouseEvent): void {\r\n    if (this.blockedBy) return;\r\n    if (event.button === 0) {\r\n      this.isLeftActive = false;\r\n    }\r\n    if (event.button === 1) {\r\n      this.isMiddleActive = false;\r\n    }\r\n    if (event.button === 2) {\r\n      this.isRightActive = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {MouseEvent} event\r\n   */\r\n  onMouseClick(event: MouseEvent): void {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   */\r\n  cleanUp(): void {\r\n    WebGLMouseEvent.unsubscribe(this);\r\n    WebGLKeyboardEvent.unsubscribe(this);\r\n  }\r\n\r\n  /**\r\n   */\r\n  private updatePosInFlyingMode(): void {\r\n    if (!this.isActive || !this.isInFlyingMode) return;\r\n    const dirVec = vec3.create();\r\n    vec3.zero(dirVec);\r\n    if (this.keysPressed['d']) {\r\n      vec3.add(dirVec, dirVec, [1, 0, 0]);\r\n    }\r\n    if (this.keysPressed['a']) {\r\n      vec3.add(dirVec, dirVec, [-1, 0, 0]);\r\n    }\r\n    if (this.keysPressed['s']) {\r\n      vec3.add(dirVec, dirVec, [0, 0, 1]);\r\n    }\r\n    if (this.keysPressed['w']) {\r\n      vec3.add(dirVec, dirVec, [0, 0, -1]);\r\n    }\r\n\r\n    if (vec3.length(dirVec) <= 0) return;\r\n    vec3.normalize(dirVec, dirVec);\r\n    const dirVec4 = vec4.fromValues(dirVec[0], dirVec[1], dirVec[2], 0);\r\n    const worldDirVec4 = vec4.create();\r\n    vec4.transformMat4(worldDirVec4,\r\n        dirVec4, this.camera.getCameraToWorldMatrix());\r\n    const w = worldDirVec4[3] ? worldDirVec4[3] : 1;\r\n    const worldDirVec = vec3.fromValues(\r\n        worldDirVec4[0]/w, worldDirVec4[1]/w, worldDirVec4[2]/w);\r\n\r\n    vec3.normalize(worldDirVec, worldDirVec);\r\n    vec3.scale(worldDirVec, worldDirVec, this.cameraMotionSpeed);\r\n    const newPos = vec3.create();\r\n    vec3.add(newPos, this.camera.getPointToLookAt(), worldDirVec);\r\n    this.camera.setPointToLookAt(newPos);\r\n  }\r\n}\r\n","import {EdgeHit, FaceHit, PointHit} from 'WebGL/Objects/BasicMeshes/MeshUtils';\r\nimport {MeshRaycastHits} from 'WebGL/Objects/Mesh';\r\nimport {ObjectRaycastHit} from 'WebGL/Objects/Object3D';\r\n\r\n/**\r\n * Returns FaceHit which is the closest of object\r\n * @param {MeshRaycastHits} hit\r\n * @return {FaceHit | null}\r\n */\r\nexport function getClosestFaceOfObj(hit: MeshRaycastHits): FaceHit | null {\r\n  let closestFace: FaceHit | null = null;\r\n  hit.facesHits.forEach((fh) => {\r\n    if (!closestFace) {\r\n      closestFace = fh;\r\n    } else if (fh.distance < closestFace.distance) {\r\n      closestFace = fh;\r\n    }\r\n  });\r\n  return closestFace;\r\n}\r\n\r\n/**\r\n * Returns FaceHit which is the closest of object\r\n * @param {MeshRaycastHits} hit\r\n * @return {EdgeHit | null}\r\n */\r\nexport function getClosestEdgeOfObj(hit: MeshRaycastHits): EdgeHit | null {\r\n  let closestEdge: EdgeHit | null = null;\r\n  hit.edgesHits.forEach((eh) => {\r\n    if (!closestEdge) {\r\n      closestEdge = eh;\r\n    } else if (eh.distance < closestEdge.distance) {\r\n      closestEdge = eh;\r\n    }\r\n  });\r\n  return closestEdge;\r\n}\r\n\r\n\r\n/**\r\n * Returns FaceHit which is the closest of object\r\n * @param {MeshRaycastHits} hit\r\n * @return {PointHit | null}\r\n */\r\nexport function getClosestPointOfObj(hit: MeshRaycastHits): PointHit | null {\r\n  let closestPoint: PointHit | null = null;\r\n  hit.pointsHits.forEach((ph) => {\r\n    if (!closestPoint) {\r\n      closestPoint = ph;\r\n    } else if (ph.distance < closestPoint.distance) {\r\n      closestPoint = ph;\r\n    }\r\n  });\r\n  return closestPoint;\r\n}\r\n\r\n/**\r\n   * @param {ObjectRaycastHit[] | null} arr\r\n   * @return {PH}\r\n   */\r\nexport function getClosestObj(arr: ObjectRaycastHit[] | null):\r\n    [ObjectRaycastHit | null, FaceHit | null] {\r\n  if (!arr) return [null, null];\r\n\r\n  let closestObj: ObjectRaycastHit | null = null;\r\n  let closestObjF: FaceHit | null = null;\r\n  arr.forEach((h) => {\r\n    if (!closestObj) {\r\n      const closestFace = getClosestFaceOfObj(h.hits);\r\n      if (closestFace) {\r\n        closestObj = h;\r\n        closestObjF = closestFace;\r\n      }\r\n    } else {\r\n      const closestFace = getClosestFaceOfObj(h.hits);\r\n      if (closestFace && closestObjF &&\r\n          closestFace.distance > closestObjF.distance) {\r\n        closestObj = h;\r\n        closestObjF = closestFace;\r\n      }\r\n    }\r\n  });\r\n  return [closestObj, closestObjF];\r\n}\r\n","import {vec4} from 'gl-matrix';\r\nimport {ConeBuilder} from 'WebGL/Objects/BasicMeshes/Cone';\r\nimport {CubeBuilder} from 'WebGL/Objects/BasicMeshes/Cube';\r\nimport {CylinderBuilder} from 'WebGL/Objects/BasicMeshes/Cylinder';\r\nimport {TorusBuilder} from 'WebGL/Objects/BasicMeshes/Torus';\r\nimport ObjectMaterial, {Material} from 'WebGL/Objects/Material';\r\nimport Mesh from 'WebGL/Objects/Mesh';\r\nimport Object3D from 'WebGL/Objects/Object3D';\r\nimport {Transform} from 'WebGL/Objects/Transform';\r\nimport BasicShader from 'WebGL/Shaders/BasicShader';\r\n\r\n/**\r\n * Creates arrow for gizmo move\r\n * @param {number} cylinderHeight\r\n * @param {number} cylinderRadius\r\n * @param {number} coneHeight\r\n * @param {number} coneRadius\r\n * @param {number} precision\r\n * @param {vec4} color\r\n * @return {Object3D}\r\n */\r\nexport function buildMoveGizmoDir(cylinderHeight: number,\r\n    cylinderRadius: number, coneHeight: number,\r\n    coneRadius: number, precision: number, color: vec4): Object3D {\r\n  const coneBuilder = new ConeBuilder();\r\n  const cylinderBuilder = new CylinderBuilder();\r\n\r\n  const cylinder = cylinderBuilder.setHeight(cylinderHeight)\r\n      .setRadiusBottom(cylinderRadius).setRadiusTop(cylinderRadius)\r\n      .setRadialSegments(precision).build();\r\n  const cone = coneBuilder.setRadius(coneRadius).setHeight(coneHeight)\r\n      .setRadialSegments(precision).build();\r\n\r\n  const cylinderObj = new Object3D();\r\n  const coneObj = new Object3D();\r\n\r\n  const cylinderT = new Transform();\r\n  cylinderObj.setMesh(new Mesh(cylinder));\r\n  cylinderObj.setMaterial(\r\n      new ObjectMaterial(new Material(new BasicShader(), color)));\r\n  cylinderT.setPositionInParent([0, cylinderHeight/2, 0]);\r\n  cylinderObj.setTransform(cylinderT);\r\n\r\n  const coneT = new Transform();\r\n  coneObj.setMesh(new Mesh(cone));\r\n  coneObj.setMaterial(\r\n      new ObjectMaterial(new Material(new BasicShader(), color)));\r\n  coneT.setPositionInParent([0, cylinderHeight + coneHeight/2, 0]);\r\n  coneObj.setTransform(coneT);\r\n\r\n  const obj = new Object3D();\r\n  obj.addChild(cylinderObj);\r\n  obj.addChild(coneObj);\r\n\r\n  return obj;\r\n}\r\n\r\n\r\n/**\r\n * Creates circle for gizmo rotate\r\n * @param {number} outerRadius\r\n * @param {number} innerRadius\r\n * @param {number} outerPrecision\r\n * @param {number} innerPrecision\r\n * @param {vec4} color\r\n * @return {Object3D}\r\n */\r\nexport function buildRotateGizmoDir(outerRadius: number,\r\n    innerRadius: number, outerPrecision: number,\r\n    innerPrecision: number, color: vec4): Object3D {\r\n  const torusBuilder = new TorusBuilder();\r\n\r\n  const torus = torusBuilder.setRadius(outerRadius)\r\n      .setTube(innerRadius).setRadialSegments(innerPrecision)\r\n      .setTubularSegments(outerPrecision).build();\r\n\r\n  const torusObj = new Object3D();\r\n\r\n  const torusT = new Transform();\r\n  torusObj.setMesh(new Mesh(torus));\r\n  torusObj.setMaterial(\r\n      new ObjectMaterial(new Material(new BasicShader(), color)));\r\n  torusObj.setTransform(torusT);\r\n\r\n  const obj = new Object3D();\r\n  obj.addChild(torusObj);\r\n\r\n  return obj;\r\n}\r\n\r\n\r\n/**\r\n * Creates handle for gizmo scale\r\n * @param {number} cylinderHeight\r\n * @param {number} cylinderRadius\r\n * @param {number} cubeScale\r\n * @param {number} precision\r\n * @param {vec4} color\r\n * @return {Object3D}\r\n */\r\nexport function buildScaleGizmoDir(cylinderHeight: number,\r\n    cylinderRadius: number,\r\n    cubeScale: number, precision: number, color: vec4): Object3D {\r\n  const cubeBuilder = new CubeBuilder();\r\n  const cylinderBuilder = new CylinderBuilder();\r\n\r\n  const cubeHalfWidth = 1;\r\n  const cylinder = cylinderBuilder.setHeight(cylinderHeight)\r\n      .setRadiusBottom(cylinderRadius).setRadiusTop(cylinderRadius)\r\n      .setRadialSegments(precision).build();\r\n  const cube = cubeBuilder.setXHalfWidth(cubeHalfWidth)\r\n      .setYHalfWidth(cubeHalfWidth).setZHalfWidth(cubeHalfWidth).build();\r\n\r\n  const cylinderObj = new Object3D();\r\n  const cubeObj = new Object3D();\r\n\r\n  const cylinderT = new Transform();\r\n  cylinderObj.setMesh(new Mesh(cylinder));\r\n  cylinderObj.setMaterial(\r\n      new ObjectMaterial(new Material(new BasicShader(), color)));\r\n  cylinderT.setPositionInParent([0, cylinderHeight/2, 0]);\r\n  cylinderObj.setTransform(cylinderT);\r\n\r\n  const cubeT = new Transform();\r\n  cubeObj.setMesh(new Mesh(cube));\r\n  cubeObj.setMaterial(\r\n      new ObjectMaterial(new Material(new BasicShader(), color)));\r\n  cubeT.setPositionInParent([0, cylinderHeight + cubeScale*cubeHalfWidth, 0]);\r\n  cubeT.setScaleInParent([cubeScale, cubeScale, cubeScale]);\r\n  cubeObj.setTransform(cubeT);\r\n\r\n  const obj = new Object3D();\r\n  obj.addChild(cylinderObj);\r\n  obj.addChild(cubeObj);\r\n\r\n  return obj;\r\n}\r\n","/* eslint-disable prefer-const */\r\nimport {ConeBuilder} from 'WebGL/Objects/BasicMeshes/Cone';\r\nimport {CylinderBuilder} from 'WebGL/Objects/BasicMeshes/Cylinder';\r\nimport Mesh from 'WebGL/Objects/Mesh';\r\nimport Object3D from 'WebGL/Objects/Object3D';\r\nimport {Transform} from 'WebGL/Objects/Transform';\r\nimport {toRadians} from 'WebGL/utils.ts/Math';\r\nimport {buildMoveGizmoDir, buildRotateGizmoDir,\r\n  buildScaleGizmoDir} from './GizmoUtils';\r\n\r\n/**\r\n * Gizmo move class\r\n */\r\nexport class GizmoMove {\r\n  private gizmoX: Object3D;\r\n  private gizmoY: Object3D;\r\n  private gizmoZ: Object3D;\r\n\r\n  private main: Object3D;\r\n\r\n  /**\r\n   *\r\n   */\r\n  constructor() {\r\n    this.main = new Object3D();\r\n\r\n    this.gizmoX = buildMoveGizmoDir(2.5, 0.25, 1.25, 0.5, 12, [1, 0, 0, 1]);\r\n    this.gizmoY = buildMoveGizmoDir(2.5, 0.25, 1.25, 0.5, 12, [0, 1, 0, 1]);\r\n    this.gizmoZ = buildMoveGizmoDir(2.5, 0.25, 1.25, 0.5, 12, [0, 0, 1, 1]);\r\n\r\n    let t = new Transform();\r\n    t.setOrientationInParent([0, 0, toRadians(-90)]);\r\n    this.gizmoX.setTransform(t);\r\n    this.main.addChild(this.gizmoX);\r\n\r\n    t = new Transform();\r\n    t.setOrientationInParent([0, toRadians(90), 0]);\r\n    this.gizmoY.setTransform(t);\r\n    this.main.addChild(this.gizmoY);\r\n\r\n    t = new Transform();\r\n    t.setOrientationInParent([toRadians(90), 0, 0]);\r\n    this.gizmoZ.setTransform(t);\r\n    this.main.addChild(this.gizmoZ);\r\n  }\r\n\r\n  /**\r\n   * Returns gizmo 3D object\r\n   * @return {Object3D}\r\n   */\r\n  public getGizmo(): Object3D {\r\n    return this.main;\r\n  }\r\n\r\n  /**\r\n   * Returns gizmoX 3D object\r\n   * @return {Object3D}\r\n   */\r\n  public getGizmoX(): Object3D {\r\n    return this.gizmoX;\r\n  }\r\n\r\n  /**\r\n   * Returns gizmoY 3D object\r\n   * @return {Object3D}\r\n   */\r\n  public getGizmoY(): Object3D {\r\n    return this.gizmoY;\r\n  }\r\n\r\n  /**\r\n   * Returns gizmoZ 3D object\r\n   * @return {Object3D}\r\n   */\r\n  public getGizmoZ(): Object3D {\r\n    return this.gizmoZ;\r\n  }\r\n}\r\n\r\n/**\r\n * Gizmo rotate class\r\n */\r\nexport class GizmoRotate {\r\n  private gizmoX: Object3D;\r\n  private gizmoY: Object3D;\r\n  private gizmoZ: Object3D;\r\n\r\n  private main: Object3D;\r\n\r\n  /**\r\n   *\r\n   */\r\n  constructor() {\r\n    this.main = new Object3D();\r\n\r\n    this.gizmoX = buildRotateGizmoDir(5, 0.25, 26, 5, [1, 0, 0, 1]);\r\n    this.gizmoY = buildRotateGizmoDir(5, 0.25, 26, 5, [0, 1, 0, 1]);\r\n    this.gizmoZ = buildRotateGizmoDir(5, 0.25, 26, 5, [0, 0, 1, 1]);\r\n\r\n    let t = new Transform();\r\n    t.setOrientationInParent([0, toRadians(-90), 0]);\r\n    this.gizmoX.setTransform(t);\r\n    this.main.addChild(this.gizmoX);\r\n\r\n    t = new Transform();\r\n    t.setOrientationInParent([toRadians(90), 0, 0]);\r\n    this.gizmoY.setTransform(t);\r\n    this.main.addChild(this.gizmoY);\r\n\r\n    t = new Transform();\r\n    t.setOrientationInParent([0, 0, toRadians(90)]);\r\n    this.gizmoZ.setTransform(t);\r\n    this.main.addChild(this.gizmoZ);\r\n  }\r\n\r\n  /**\r\n   * Returns gizmo 3D object\r\n   * @return {Object3D}\r\n   */\r\n  public getGizmo(): Object3D {\r\n    return this.main;\r\n  }\r\n\r\n  /**\r\n   * Returns gizmoX 3D object\r\n   * @return {Object3D}\r\n   */\r\n  public getGizmoX(): Object3D {\r\n    return this.gizmoX;\r\n  }\r\n\r\n  /**\r\n   * Returns gizmoY 3D object\r\n   * @return {Object3D}\r\n   */\r\n  public getGizmoY(): Object3D {\r\n    return this.gizmoY;\r\n  }\r\n\r\n  /**\r\n   * Returns gizmoZ 3D object\r\n   * @return {Object3D}\r\n   */\r\n  public getGizmoZ(): Object3D {\r\n    return this.gizmoZ;\r\n  }\r\n}\r\n/**\r\n * Gizmo scale class\r\n */\r\nexport class GizmoScale {\r\n  private gizmoX: Object3D;\r\n  private gizmoY: Object3D;\r\n  private gizmoZ: Object3D;\r\n\r\n  private main: Object3D;\r\n\r\n  /**\r\n   *\r\n   */\r\n  constructor() {\r\n    this.main = new Object3D();\r\n\r\n    this.gizmoX = buildScaleGizmoDir(2.5, 0.25, 0.5, 12, [1, 0, 0, 1]);\r\n    this.gizmoY = buildScaleGizmoDir(2.5, 0.25, 0.5, 12, [0, 1, 0, 1]);\r\n    this.gizmoZ = buildScaleGizmoDir(2.5, 0.25, 0.5, 12, [0, 0, 1, 1]);\r\n\r\n    let t = new Transform();\r\n    t.setOrientationInParent([0, 0, toRadians(-90)]);\r\n    this.gizmoX.setTransform(t);\r\n    this.main.addChild(this.gizmoX);\r\n\r\n    t = new Transform();\r\n    t.setOrientationInParent([0, toRadians(90), 0]);\r\n    this.gizmoY.setTransform(t);\r\n    this.main.addChild(this.gizmoY);\r\n\r\n    t = new Transform();\r\n    t.setOrientationInParent([toRadians(90), 0, 0]);\r\n    this.gizmoZ.setTransform(t);\r\n    this.main.addChild(this.gizmoZ);\r\n  }\r\n\r\n  /**\r\n   * Returns gizmo 3D object\r\n   * @return {Object3D}\r\n   */\r\n  public getGizmo(): Object3D {\r\n    return this.main;\r\n  }\r\n\r\n  /**\r\n   * Returns gizmoX 3D object\r\n   * @return {Object3D}\r\n   */\r\n  public getGizmoX(): Object3D {\r\n    return this.gizmoX;\r\n  }\r\n\r\n  /**\r\n   * Returns gizmoY 3D object\r\n   * @return {Object3D}\r\n   */\r\n  public getGizmoY(): Object3D {\r\n    return this.gizmoY;\r\n  }\r\n\r\n  /**\r\n   * Returns gizmoZ 3D object\r\n   * @return {Object3D}\r\n   */\r\n  public getGizmoZ(): Object3D {\r\n    return this.gizmoZ;\r\n  }\r\n}\r\n","import {mat4, vec3, vec4} from 'gl-matrix';\r\nimport {abs} from 'mathjs';\r\nimport Camera from 'WebGL/Camera/Camera';\r\nimport CameraController from 'WebGL/Camera/CameraController';\r\nimport WebGLMouseEvent, {MouseListener} from 'WebGL/Listeners/MouseEvent';\r\nimport {Point} from 'WebGL/Objects/BasicMeshes/MeshUtils';\r\nimport Object3D from 'WebGL/Objects/Object3D';\r\nimport RayCaster, {Ray, RayCasterMode} from 'WebGL/Raycast/RayCaster';\r\nimport {getClosestObj} from 'WebGL/Raycast/RayCastUtils';\r\nimport {WebGL} from 'WebGL/WebGl';\r\nimport WebGLU from 'WebGL/WebGlUtils';\r\nimport {GizmoMove, GizmoRotate, GizmoScale} from './Gizmo';\r\nimport {GizmoManipEvent, GizmoManipListener} from './GizmoManipEvent';\r\n\r\nexport enum GizmoModes {\r\n  move,\r\n  rotate,\r\n  scale,\r\n  gizmoUnused,\r\n}\r\n\r\n/**\r\n * Gizmo manager class\r\n */\r\nexport default class GizmoManager implements MouseListener {\r\n  private moveGizmo: GizmoMove;\r\n  private rotateGizmo: GizmoRotate;\r\n  private scaleGizmo: GizmoScale;\r\n\r\n  private camera: Camera;\r\n  private cameraController: CameraController;\r\n\r\n  private isActive = false;\r\n  private mode: GizmoModes;\r\n  private activeSubGizmo: 'x' | 'y' | 'z' | 'none' = 'none';\r\n  private gizmoEvent = new GizmoManipEvent()\r\n\r\n  private point: vec3;\r\n  private distPointCam = 0;\r\n  private raycaster: RayCaster;\r\n\r\n\r\n  /**\r\n   * Gizmo manager constructor\r\n   * @param {Camera} camera\r\n   * @param {CameraController} cameraController\r\n   */\r\n  constructor(camera: Camera, cameraController: CameraController) {\r\n    this.moveGizmo = new GizmoMove();\r\n    this.rotateGizmo = new GizmoRotate();\r\n    this.scaleGizmo = new GizmoScale();\r\n    this.camera = camera;\r\n    this.cameraController = cameraController;\r\n    this.point = vec3.fromValues(0, 0, 0);\r\n    this.mode = GizmoModes.move;\r\n    this.raycaster = new RayCaster(new Ray(), this.moveGizmo.getGizmo(),\r\n        RayCasterMode.face, true);\r\n    WebGLMouseEvent.subscribe(this);\r\n  }\r\n\r\n  /**\r\n   * Activates gizmo\r\n   */\r\n  public activate(): void {\r\n    this.isActive = true;\r\n  }\r\n\r\n  /**\r\n   * Subscribes to this gizmo's events\r\n   * @param {GizmoManipListener} l\r\n   */\r\n  public subscribeToGizmo(l: GizmoManipListener): void {\r\n    this.gizmoEvent.subscribe(l);\r\n  }\r\n\r\n  /**\r\n   * Unsubscribes from this gizmo's events\r\n   * @param {GizmoManipListener} l\r\n   */\r\n  public unsubscribeToGizmo(l: GizmoManipListener): void {\r\n    this.gizmoEvent.unsubscribe(l);\r\n  }\r\n\r\n  /**\r\n   * Inactivates gizmo\r\n   */\r\n  public inactivate(): void {\r\n    this.isActive = false;\r\n  }\r\n\r\n  /**\r\n   * Sets new gizmo's starting position\r\n   * @param {vec3} p\r\n   */\r\n  public setPoint(p: vec3): void {\r\n    this.point = p;\r\n  }\r\n\r\n  /**\r\n   * Sets gizmo's mode\r\n   * @param {GizmoModes} m\r\n   */\r\n  public setMode(m: GizmoModes): void {\r\n    this.mode = m;\r\n  }\r\n\r\n  /**\r\n   * Gets gizmo's mode\r\n   * @return {GizmoModes}\r\n   */\r\n  public getMode(): GizmoModes {\r\n    return this.mode;\r\n  }\r\n\r\n  /**\r\n   * Renders gizmo\r\n   */\r\n  public render(): void {\r\n    if (!this.isActive || this.mode === GizmoModes.gizmoUnused) return;\r\n    WebGLU.clearDepthBuffer();\r\n    let toDraw = new Object3D();\r\n    switch (this.mode) {\r\n      case GizmoModes.move: {\r\n        toDraw = this.moveGizmo.getGizmo();\r\n        break;\r\n      }\r\n      case GizmoModes.rotate: {\r\n        toDraw = this.rotateGizmo.getGizmo();\r\n        break;\r\n      }\r\n      case GizmoModes.scale: {\r\n        toDraw = this.scaleGizmo.getGizmo();\r\n        break;\r\n      }\r\n    }\r\n    const matrix = mat4.create();\r\n    mat4.fromTranslation(matrix, this.point);\r\n    const distV = vec3.create();\r\n    vec3.sub(distV, this.camera.getPosition(), this.point);\r\n    this.distPointCam = vec3.len(distV);\r\n    const mDist = this.distPointCam*0.025;\r\n    toDraw.getTransform().setScaleInParent([mDist, mDist, mDist]);\r\n    toDraw.renderObj(this.camera, matrix, false);\r\n  }\r\n\r\n  /**\r\n   * Raycasts gizmo to trigger event if active\r\n   * @param {Ray} ray\r\n   * @return {boolean}\r\n   */\r\n  public raycastGizmo(ray: Ray): boolean {\r\n    if (!this.isActive || this.mode === GizmoModes.gizmoUnused) return false;\r\n    this.raycaster.setRay(ray);\r\n\r\n    let gizX = this.moveGizmo.getGizmoX();\r\n    let gizY = this.moveGizmo.getGizmoY();\r\n    let gizZ = this.moveGizmo.getGizmoZ();\r\n    const obj = new Object3D();\r\n    obj.getTransform().setPositionInParent(this.point);\r\n    switch (this.mode) {\r\n      case GizmoModes.move: {\r\n        // this.raycaster.setRaycastable(this.moveGizmo.getGizmo());\r\n        obj.addChild(this.moveGizmo.getGizmo());\r\n        gizX = this.moveGizmo.getGizmoX();\r\n        gizY = this.moveGizmo.getGizmoY();\r\n        gizZ = this.moveGizmo.getGizmoZ();\r\n        break;\r\n      }\r\n      case GizmoModes.rotate: {\r\n        // this.raycaster.setRaycastable(this.rotateGizmo.getGizmo());\r\n        obj.addChild(this.rotateGizmo.getGizmo());\r\n        gizX = this.rotateGizmo.getGizmoX();\r\n        gizY = this.rotateGizmo.getGizmoY();\r\n        gizZ = this.rotateGizmo.getGizmoZ();\r\n        break;\r\n      }\r\n      case GizmoModes.scale: {\r\n        // this.raycaster.setRaycastable(this.scaleGizmo.getGizmo());\r\n        obj.addChild(this.scaleGizmo.getGizmo());\r\n        gizX = this.scaleGizmo.getGizmoX();\r\n        gizY = this.scaleGizmo.getGizmoY();\r\n        gizZ = this.scaleGizmo.getGizmoZ();\r\n        break;\r\n      }\r\n    }\r\n    const root = new Object3D();\r\n    root.addChild(obj);\r\n    this.raycaster.setRaycastable(root);\r\n    const h = getClosestObj(this.raycaster.cast());\r\n\r\n    if (!h[0]?.hittedObject) return false;\r\n\r\n    let targetGizmoObj: Object3D | null= h[0]?.hittedObject;\r\n    if (targetGizmoObj) {\r\n      targetGizmoObj = targetGizmoObj.getParent();\r\n    }\r\n    console.log(gizX, targetGizmoObj);\r\n    if (gizX === targetGizmoObj) this.activeSubGizmo = 'x';\r\n    else if (gizY === targetGizmoObj) this.activeSubGizmo = 'y';\r\n    else this.activeSubGizmo = 'z';\r\n\r\n    this.cameraController.block();\r\n    this.gizmoEvent.onStart();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Distinguish directions and actions on move gizmos\r\n   * @param {number} dx\r\n   * @param {number} dy\r\n   */\r\n  private handleCastMoveGizmo(dx: number, dy: number): void {\r\n    const actDx = dx;\r\n    const actDy = -dy;\r\n\r\n    const moveDirVec = vec3.fromValues(0, 0, 0);\r\n\r\n    if (this.activeSubGizmo === 'x') moveDirVec[0] = 1;\r\n    else if (this.activeSubGizmo === 'y') moveDirVec[1] = 1;\r\n    else if (this.activeSubGizmo === 'z') moveDirVec[2] = 1;\r\n\r\n    let actModifier = actDx;\r\n    if (Math.abs(actDy) > Math.abs(actDx)) actModifier = actDy;\r\n\r\n    vec3.scale(moveDirVec, moveDirVec, this.distPointCam*0.001*actModifier);\r\n    this.gizmoEvent.onMove(moveDirVec[0], moveDirVec[1], moveDirVec[2]);\r\n  }\r\n\r\n  /**\r\n   * Distinguish directions and actions on rotate gizmos\r\n   * @param {number} dx\r\n   * @param {number} dy\r\n   */\r\n  private handleCastRotateGizmo(dx: number, dy: number): void {\r\n    const actDx = dx;\r\n    const actDy = -dy;\r\n\r\n    const rotateDirVec = vec3.fromValues(0, 0, 0);\r\n\r\n    if (this.activeSubGizmo === 'x') rotateDirVec[0] = 1;\r\n    else if (this.activeSubGizmo === 'y') rotateDirVec[1] = 1;\r\n    else if (this.activeSubGizmo === 'z') rotateDirVec[2] = 1;\r\n\r\n    let actModifier = actDx;\r\n    if (Math.abs(actDy) > Math.abs(actDx)) actModifier = actDy;\r\n\r\n    vec3.scale(rotateDirVec, rotateDirVec, 0.01*actModifier);\r\n    this.gizmoEvent.onRotate(rotateDirVec[0], rotateDirVec[1], rotateDirVec[2]);\r\n  }\r\n\r\n  /**\r\n   * Distinguish directions and actions on scale gizmos\r\n   * @param {number} dx\r\n   * @param {number} dy\r\n   */\r\n  private handleCastScaleGizmo(dx: number, dy: number): void {\r\n    const actDx = dx;\r\n    const actDy = -dy;\r\n\r\n    const scaleDirVec = vec3.fromValues(0, 0, 0);\r\n\r\n    if (this.activeSubGizmo === 'x') scaleDirVec[0] = 1;\r\n    else if (this.activeSubGizmo === 'y') scaleDirVec[1] = 1;\r\n    else if (this.activeSubGizmo === 'z') scaleDirVec[2] = 1;\r\n\r\n    const cameraInScaleDirVec =\r\n      vec4.fromValues(1, 0, 0, 0);\r\n    const im = mat4.create();\r\n    mat4.invert(im, this.camera.getLookAtMatrix());\r\n    const w = cameraInScaleDirVec[3] ? cameraInScaleDirVec[3] : 1;\r\n    vec4.transformMat4(cameraInScaleDirVec,\r\n        cameraInScaleDirVec, im);\r\n    const cameraOutScaleDirVec = vec3.fromValues(cameraInScaleDirVec[0]/w,\r\n        cameraInScaleDirVec[1]/w, cameraInScaleDirVec[2]/w);\r\n    vec3.normalize(cameraOutScaleDirVec, cameraOutScaleDirVec);\r\n\r\n    const dot = vec3.dot(scaleDirVec, cameraOutScaleDirVec);\r\n\r\n    /* if (dot < 0) {\r\n      vec3.negate(scaleDirVec, scaleDirVec);\r\n    } */\r\n\r\n    let actModifier = actDx;\r\n    if (Math.abs(actDy) > Math.abs(actDx)) actModifier = actDy;\r\n    vec3.scale(scaleDirVec, scaleDirVec, this.distPointCam*0.001*actModifier);\r\n    this.gizmoEvent.onScale(scaleDirVec[0], scaleDirVec[1], scaleDirVec[2]);\r\n  }\r\n\r\n  /**\r\n   * @param {WheelEvent} event\r\n   */\r\n  onWheel(event: WheelEvent): void {\r\n    return;\r\n  }\r\n  /**\r\n   * @param {MouseEvent} event\r\n   * @param {number} dx\r\n   * @param {number} dy\r\n   */\r\n  onMouseMove(event: MouseEvent, dx: number, dy: number): void {\r\n    if (this.activeSubGizmo === 'none' || !this.isActive ) return;\r\n\r\n    switch (this.mode) {\r\n      case GizmoModes.move: {\r\n        this.handleCastMoveGizmo(dx, dy);\r\n        break;\r\n      }\r\n      case GizmoModes.rotate: {\r\n        this.handleCastRotateGizmo(dx, dy);\r\n        break;\r\n      }\r\n      case GizmoModes.scale: {\r\n        this.handleCastScaleGizmo(dx, dy);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * @param {MouseEvent} event\r\n   */\r\n  onMouseDown(event: MouseEvent): void {\r\n    return;\r\n  }\r\n  /**\r\n   * @param {MouseEvent} event\r\n   */\r\n  onMouseUp(event: MouseEvent): void {\r\n    this.activeSubGizmo = 'none';\r\n    this.cameraController.unblock();\r\n    this.gizmoEvent.onFinish();\r\n  }\r\n  /**\r\n   * @param {MouseEvent} event\r\n   */\r\n  onMouseClick(event: MouseEvent): void {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   */\r\n  cleanUp(): void {\r\n    WebGLMouseEvent.unsubscribe(this);\r\n  }\r\n}\r\n","import WebGLEvent from 'WebGL/Listeners/WebGLEvent';\r\n\r\nexport interface GizmoManipListener {\r\n  onMove(dx: number, dy: number, dz: number): void;\r\n  onRotate(dx: number, dy: number, dz: number): void;\r\n  onScale(dx: number, dy: number, dz: number): void;\r\n  onStart(): void;\r\n  onFinish(): void;\r\n}\r\n\r\n/**\r\n * Gizmo Manip Event\r\n */\r\nexport class GizmoManipEvent extends WebGLEvent<GizmoManipListener> {\r\n  /**\r\n   * @param {number} dx\r\n   * @param {number} dy\r\n   * @param {number} dz\r\n   */\r\n  public onMove(dx: number, dy: number, dz: number) : void {\r\n    this.getListeners().forEach((el) => {\r\n      el.onMove(dx, dy, dz);\r\n    });\r\n  }\r\n  /**\r\n   * @param {number} dx\r\n   * @param {number} dy\r\n   * @param {number} dz\r\n   */\r\n  public onRotate(dx: number, dy: number, dz: number) : void {\r\n    this.getListeners().forEach((el) => {\r\n      el.onRotate(dx, dy, dz);\r\n    });\r\n  }\r\n  /**\r\n   * @param {number} dx\r\n   * @param {number} dy\r\n   * @param {number} dz\r\n   */\r\n  public onScale(dx: number, dy: number, dz: number) : void {\r\n    this.getListeners().forEach((el) => {\r\n      el.onScale(dx, dy, dz);\r\n    });\r\n  }\r\n  /**\r\n   *\r\n   */\r\n  public onStart() : void {\r\n    this.getListeners().forEach((el) => {\r\n      el.onStart();\r\n    });\r\n  }\r\n  /**\r\n   *\r\n   */\r\n  public onFinish() : void {\r\n    this.getListeners().forEach((el) => {\r\n      el.onFinish();\r\n    });\r\n  }\r\n}\r\n","import {mat4} from 'gl-matrix';\r\nimport Camera from 'WebGL/Camera/Camera';\r\nimport BasicShader from './BasicShader';\r\n\r\n/**\r\n   * enables shader and load matrices\r\n   * @param {BasicShader} shader\r\n   * @param {Camera} camera\r\n   * @param {mat4} t\r\n   */\r\nexport function setUpShader(shader: BasicShader, camera: Camera, t: mat4):\r\n  void {\r\n  shader.use();\r\n  shader.enableViewProjectionMatrices(\r\n      camera.getLookAtMatrix(),\r\n      camera.getProjectionMatrix());\r\n  shader.enableTransformationMatrix(t);\r\n}\r\n","import {mat4} from 'gl-matrix';\r\nimport Camera from 'WebGL/Camera/Camera';\r\nimport {Point, Edge, Face} from 'WebGL/Objects/BasicMeshes/MeshUtils';\r\nimport {SPECIAL_MATERIALS} from 'WebGL/Objects/Material';\r\nimport Object3D from 'WebGL/Objects/Object3D';\r\nimport {setUpShader} from 'WebGL/Shaders/ShaderUtils';\r\nimport WebGLU from 'WebGL/WebGlUtils';\r\n\r\n\r\n/**\r\n * Edit renderer used in edit mode\r\n */\r\nexport default class EditRenderer {\r\n  private camera: Camera;\r\n  private objToRender: Object3D;\r\n\r\n  private selectedPoint: Point | null = null;\r\n  private selectedEdge: Edge | null = null;\r\n  private selectedFace: Face | null = null;\r\n\r\n  /**\r\n   * Creates standard renderer\r\n   * @param {Camera} camera\r\n   * @param {Object3D} objToRender\r\n   */\r\n  constructor(camera: Camera, objToRender: Object3D) {\r\n    this.camera = camera;\r\n    this.objToRender = objToRender;\r\n  }\r\n\r\n  /**\r\n   * selects given point in renderer\r\n   * @param {Point} p\r\n   */\r\n  public selectPoint(p: Point): void {\r\n    this.selectedPoint = p;\r\n  }\r\n  /**\r\n   * None point is selected in renderer\r\n   */\r\n  public unselectPoint(): void {\r\n    this.selectedPoint = null;\r\n  }\r\n\r\n  /**\r\n   * selects given edge in renderer\r\n   * @param {Edge} e\r\n   */\r\n  public selectEdge(e: Edge): void {\r\n    this.selectedEdge = e;\r\n  }\r\n  /**\r\n   * None edge is selected in renderer\r\n   */\r\n  public unselectEdge(): void {\r\n    this.selectedEdge = null;\r\n  }\r\n\r\n  /**\r\n   * selects given face in renderer\r\n   * @param {Face} f\r\n   */\r\n  public selectFace(f: Face): void {\r\n    this.selectedFace = f;\r\n  }\r\n  /**\r\n   * None face is selected in renderer\r\n   */\r\n  public unselectFace(): void {\r\n    this.selectedFace = null;\r\n  }\r\n\r\n  /**\r\n   * Renders new frame for edit mode\r\n   */\r\n  public renderFrame(): void {\r\n    WebGLU.clear(0, 0, 0, 0.3);\r\n    WebGLU.viewport();\r\n    WebGLU.enableDepthTest(true);\r\n    this.renderObject();\r\n  }\r\n\r\n  /**\r\n   * Setups object to render\r\n   */\r\n  private renderObject(): void {\r\n    const transform = mat4.create();\r\n    /* mat4.copy(transform,\r\n        this.objToRender.getTransform().getTransformationMatrix());*/\r\n    mat4.identity(transform);\r\n    const mesh = this.objToRender.getMesh();\r\n    if (mesh) {\r\n      if (this.selectedPoint) {\r\n        const materialP = SPECIAL_MATERIALS.getSelectedPointMaterial();\r\n        if (materialP) {\r\n          const shaderP = materialP.getPointMaterial().getShader();\r\n          setUpShader(shaderP, this.camera, transform);\r\n          materialP.getPointMaterial().enableMaterial();\r\n          this.selectedPoint.drawPoint(shaderP);\r\n        }\r\n      }\r\n\r\n      if (this.selectedEdge) {\r\n        const materialE = SPECIAL_MATERIALS.getSelectedEdgeMaterial();\r\n        if (materialE) {\r\n          const shaderE = materialE.getEdgeMaterial().getShader();\r\n          setUpShader(shaderE, this.camera, transform);\r\n          materialE.getEdgeMaterial().enableMaterial();\r\n          this.selectedEdge.drawEdge(shaderE);\r\n        }\r\n      }\r\n\r\n      if (this.selectedFace) {\r\n        const materialF = SPECIAL_MATERIALS.getSelectedFaceMaterial();\r\n        if (materialF) {\r\n          WebGLU.enablePolygonOffset(0.1, 1.0);\r\n          const shaderF = materialF.getFaceMaterial().getShader();\r\n          setUpShader(shaderF, this.camera, transform);\r\n          materialF.getFaceMaterial().enableMaterial();\r\n          this.selectedFace.drawFace(shaderF);\r\n          WebGLU.disablePolygonOffset();\r\n        }\r\n      }\r\n\r\n\r\n      let material = SPECIAL_MATERIALS.getEditModeObjectMaterial();\r\n      if (!material) {\r\n        material = this.objToRender.getMaterial();\r\n      }\r\n      if (material) {\r\n        WebGLU.enablePolygonOffset(0.1, 1.0);\r\n        const shaderF = material.getFaceMaterial().getShader();\r\n        setUpShader(shaderF, this.camera, transform);\r\n        material.getFaceMaterial().enableMaterial();\r\n        mesh.drawFaces(shaderF);\r\n        // mesh.getFaces().forEach((face) => face.drawFace(shaderF));\r\n        WebGLU.disablePolygonOffset();\r\n\r\n        const shaderE = material.getEdgeMaterial().getShader();\r\n        setUpShader(shaderE, this.camera, transform);\r\n        material.getEdgeMaterial().enableMaterial();\r\n        mesh.drawEdges(shaderE);\r\n        // mesh.getEdges().forEach((edge) => edge.drawEdge(shaderE));\r\n\r\n        const shaderP = material.getPointMaterial().getShader();\r\n        setUpShader(shaderP, this.camera, transform);\r\n        material.getPointMaterial().enableMaterial();\r\n        mesh.drawPoints(shaderP);\r\n        // mesh.getPoints().forEach((point) => point.drawPoint(shaderP));\r\n      }\r\n    }\r\n  }\r\n}\r\n","import WebGLMouseEvent, {MouseListener} from 'WebGL/Listeners/MouseEvent';\r\n\r\n/**\r\n * Base class of each view\r\n */\r\nexport default abstract class View implements MouseListener {\r\n  /**\r\n   *\r\n   */\r\n  constructor() {\r\n    WebGLMouseEvent.subscribe(this);\r\n  }\r\n\r\n  /**\r\n   * @param {WheelEvent} event\r\n   * @return {void}\r\n   */\r\n  onWheel(event: WheelEvent): void {\r\n    return;\r\n  }\r\n  /**\r\n   * @param {MouseEvent} event\r\n   * @param {number} dx\r\n   * @param {number} dy\r\n   * @return {void}\r\n   */\r\n  onMouseMove(event: MouseEvent, dx: number, dy: number): void {\r\n    return;\r\n  }\r\n  /**\r\n   * @param {MouseEvent} event\r\n   * @return {void}\r\n   */\r\n  onMouseDown(event: MouseEvent): void {\r\n    return;\r\n  }\r\n  /**\r\n   * @param {MouseEvent} event\r\n   * @return {void}\r\n   */\r\n  onMouseUp(event: MouseEvent): void {\r\n    return;\r\n  }\r\n  /**\r\n   * @param {MouseEvent} event\r\n   * @return {void}\r\n   */\r\n  onMouseClick(event: MouseEvent): void {\r\n    return;\r\n  }\r\n\r\n  public abstract renderView(): void;\r\n  public abstract returnOnScreenMenu(): JSX.Element;\r\n\r\n  /**\r\n   * Removes this obj from listeners list\r\n   */\r\n  public unsubscribe(): void {\r\n    WebGLMouseEvent.unsubscribe(this);\r\n  }\r\n}\r\n","import React, {useContext} from 'react';\r\nimport {StandardReactPropsInt} from './Standard';\r\n\r\nimport 'styles/cardBodyStyles.css';\r\nimport ColorModeContext from 'contexts/ColorModeContext';\r\n\r\n\r\nexport interface PanelTitleProps extends StandardReactPropsInt {\r\n  title: string;\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\r\nexport interface PanelBodyProps extends StandardReactPropsInt {\r\n}\r\n\r\nexport interface CardBodyProps extends StandardReactPropsInt {\r\n  title?: string;\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\r\nexport interface CardBodyMainLabelProps extends StandardReactPropsInt {\r\n}\r\n\r\nexport interface PropertyProps extends StandardReactPropsInt {\r\n  label?: string;\r\n}\r\n\r\nexport const PanelTitle = (props: PanelTitleProps):JSX.Element => {\r\n  const colorModeCtx = useContext(ColorModeContext);\r\n  return (\r\n    <div style={{\r\n      display: 'flex',\r\n      backgroundColor: colorModeCtx?.colorMode.secondaryColor,\r\n      height: '40px',\r\n      maxHeight: '40px',\r\n      color: colorModeCtx?.colorMode.accentColor,\r\n      fontStyle: 'italic',\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n      fontSize: '1.2em',\r\n      fontWeight: 'bold',\r\n    }}\r\n    className={props.className}>\r\n      {props.title}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const PanelBody = (props: PanelBodyProps): JSX.Element => {\r\n  const colorModeCtx = useContext(ColorModeContext);\r\n\r\n  return (\r\n    <div className={props.className} style={{\r\n      padding: '1rem',\r\n      backgroundColor: colorModeCtx?.colorMode.backgroundColor,\r\n      ...props.style}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const CardBody = (props: CardBodyProps): JSX.Element => {\r\n  const colorModeCtx = useContext(ColorModeContext);\r\n\r\n  return (\r\n    <fieldset\r\n      style={{\r\n        borderColor: colorModeCtx?.colorMode.accentColor,\r\n        borderWidth: '2px',\r\n        borderStyle: 'solid',\r\n        borderRadius: '0.5rem',\r\n        ...props.style,\r\n      }}\r\n      className={`card-body-frame ${props.className ? props.className : ''}`}\r\n    >\r\n      {props.title && <legend\r\n        className='card-body-frame'\r\n        style={{\r\n          color: colorModeCtx?.colorMode.accentColor,\r\n        }}\r\n      >\r\n        {props.title}\r\n      </legend>}\r\n      {props.children}\r\n    </fieldset>\r\n  );\r\n};\r\n\r\nexport const CardBodyMainLabel =\r\n(props: CardBodyMainLabelProps): JSX.Element => {\r\n  const colorModeCtx = useContext(ColorModeContext);\r\n  return (\r\n    <div\r\n      className={`card-body-label ${props.className ? props.className : ''}`}\r\n      style={{\r\n        backgroundColor: colorModeCtx?.colorMode.accentColor,\r\n        color: colorModeCtx?.colorMode.secondaryColor,\r\n        ...props.style,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const Property = (props: PropertyProps): JSX.Element => {\r\n  const colorModeCtx = useContext(ColorModeContext);\r\n  return (\r\n    <div style={{\r\n      display: 'flex',\r\n      flexWrap: 'wrap',\r\n      paddingTop: '0.5em',\r\n      paddingBottom: '0.5em',\r\n      ...props.style,\r\n    }}\r\n    className={props.className}>\r\n      <span style={{\r\n        display: 'inline-flex',\r\n        alignItems: 'center',\r\n        color: colorModeCtx?.colorMode.primaryColor,\r\n        paddingRight: '1em',\r\n      }}>\r\n        {props.label ? `${props.label}: ` : ' '}\r\n      </span>\r\n      <div style={{\r\n        display: 'flex',\r\n        flexGrow: 1,\r\n      }}>\r\n        {props.children}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, {useState} from 'react';\r\nimport {SliderProperty, SliderWithValueProperty} from 'utils/GUI/GUIUtils';\r\nimport {CardBody, CardBodyMainLabel,\r\n  PanelBody, Property} from 'utils/GUI/Panels';\r\n\r\nexport interface IPropertiesCard {\r\n  drawPropertiesCard(): JSX.Element\r\n}\r\n\r\n/**\r\n * Tool properties class\r\n */\r\nexport abstract class ToolProperties implements IPropertiesCard {\r\n  /**\r\n   * @return {JSX.Element}\r\n   */\r\n  drawPropertiesCard(): JSX.Element {\r\n    return (\r\n      <>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * General transform tools properties class\r\n */\r\nexport class MouseProperties extends ToolProperties {\r\n  private readonly startingVal = 0.1;\r\n  private readonly minVal = 0.01;\r\n  private readonly maxVal = 10;\r\n  private clickRaycastArea: number;\r\n\r\n  /**\r\n   *\r\n   */\r\n  constructor() {\r\n    super();\r\n    this.clickRaycastArea = this.startingVal;\r\n  }\r\n\r\n  /**\r\n   * Returns max range on screen to hit object with raycast\r\n   * @return {number}\r\n   */\r\n  public getClickRaycastArea(): number {\r\n    return this.clickRaycastArea;\r\n  }\r\n\r\n  /**\r\n   * @return {JSX.Element}\r\n   */\r\n  drawPropertiesCard(): JSX.Element {\r\n    const MouseProperties = () => {\r\n      const [value, setValue] = useState(this.clickRaycastArea);\r\n\r\n      const handleChange = (event: Event, newValue: number | number[]) => {\r\n        setValue(newValue as number);\r\n        this.clickRaycastArea = newValue as number;\r\n      };\r\n\r\n      return (\r\n        <CardBody title='Mouse properties'>\r\n          <Property label='mouseRange'>\r\n            <SliderWithValueProperty\r\n              value={value}\r\n              min={this.minVal}\r\n              max={this.maxVal}\r\n              step={this.minVal}\r\n              onChange={handleChange}\r\n              marks={\r\n                [\r\n                  {value: this.minVal, label: this.minVal},\r\n                  {value: this.maxVal, label: this.maxVal},\r\n                ]\r\n              }/>\r\n          </Property>\r\n        </CardBody>\r\n      );\r\n    };\r\n    return (\r\n      <MouseProperties/>\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * General transform tools properties class\r\n */\r\nexport class TransformToolProperties extends ToolProperties {\r\n  private mouseProperties = MousePropertiesInst;\r\n\r\n  private readonly startingVal = 1;\r\n  private readonly minVal = 0.01;\r\n  private readonly maxVal = 10;\r\n  private speedFactor: number;\r\n\r\n  private cardLabel: string\r\n  private speedFactorLabel: string;\r\n\r\n  /**\r\n   * @param {string} cardLabel\r\n   * @param {string} speedFactorLabel\r\n   */\r\n  constructor(cardLabel = 'Transforms Properties',\r\n      speedFactorLabel = 'change factor' ) {\r\n    super();\r\n    this.speedFactor = this.startingVal;\r\n    this.cardLabel = cardLabel;\r\n    this.speedFactorLabel = speedFactorLabel;\r\n  }\r\n\r\n  /**\r\n   * Returns mouse properties\r\n   * @return {MouseProperties}\r\n   */\r\n  getMouseProperties(): MouseProperties {\r\n    return this.mouseProperties;\r\n  }\r\n\r\n  /**\r\n   * @return {JSX.Element}\r\n   */\r\n  drawPropertiesCard(): JSX.Element {\r\n    const TransformProperties = () => {\r\n      const [value, setValue] = useState(this.speedFactor);\r\n\r\n      const handleChange = (event: Event, newValue: number | number[]) => {\r\n        setValue(newValue as number);\r\n        this.speedFactor = newValue as number;\r\n      };\r\n      return (\r\n        <>\r\n          {this.mouseProperties.drawPropertiesCard()}\r\n          <CardBody title={this.cardLabel}>\r\n            <Property label={this.speedFactorLabel}>\r\n              <SliderWithValueProperty\r\n                value={value}\r\n                min={this.minVal}\r\n                max={this.maxVal}\r\n                step={this.minVal}\r\n                onChange={handleChange}\r\n                marks={\r\n                  [\r\n                    {value: this.minVal, label: this.minVal},\r\n                    {value: this.maxVal, label: this.maxVal},\r\n                  ]\r\n                }/>\r\n            </Property>\r\n          </CardBody>\r\n        </>\r\n      );\r\n    };\r\n    return (\r\n      <TransformProperties/>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns change's speed factor\r\n   * @return {number}\r\n   */\r\n  public getSpeedFactor(): number {\r\n    return this.speedFactor;\r\n  }\r\n}\r\n\r\n/**\r\n * General transform tools properties class\r\n */\r\nexport class MoveToolProperties extends TransformToolProperties {\r\n  /**\r\n   *\r\n   */\r\n  constructor() {\r\n    super('Move Properties');\r\n  }\r\n}\r\n\r\n/**\r\n * General transform tools properties class\r\n */\r\nexport class RotateToolProperties extends TransformToolProperties {\r\n  /**\r\n   *\r\n   */\r\n  constructor() {\r\n    super('Rotation Properties');\r\n  }\r\n}\r\n\r\n/**\r\n * General transform tools properties class\r\n */\r\nexport class ScaleToolProperties extends TransformToolProperties {\r\n  /**\r\n   *\r\n   */\r\n  constructor() {\r\n    super('Scale Properties');\r\n  }\r\n}\r\n\r\nexport const MousePropertiesInst = new MouseProperties();\r\nexport const TransformToolPropertiesInst = new TransformToolProperties();\r\nexport const MoveToolPropertiesInst = new MoveToolProperties();\r\nexport const RotateToolPropertiesInst = new RotateToolProperties();\r\nexport const ScaleToolPropertiesInst = new ScaleToolProperties();\r\n","import ToolsManagerInst from 'components/toolsWIndow/ToolsManager';\r\nimport React from 'react';\r\nimport {Edge, Face, Point} from 'WebGL/Objects/BasicMeshes/MeshUtils';\r\nimport Mesh from 'WebGL/Objects/Mesh';\r\nimport Object3D from 'WebGL/Objects/Object3D';\r\nimport {calculateCenterPoint, calculateIntersection} from 'WebGL/utils.ts/Math';\r\nimport {MoveToolProperties, RotateToolProperties,\r\n  ScaleToolProperties,\r\n  ToolProperties} from './ToolsProperties';\r\n\r\nexport interface ITool {\r\n  renderToolPropertiesCard(): JSX.Element;\r\n  onSelectPoint(point: Point, object: Object3D): void;\r\n  onSelectEdge(edge: Edge, object: Object3D): void;\r\n  onSelectFace(face: Face, object: Object3D): void;\r\n  onSelectObject(object: Object3D): void;\r\n  onToolSelect(): void;\r\n  getProperties(): ToolProperties | null;\r\n}\r\n\r\nexport interface IGizmoTool {\r\n  gizmoTool(): void;\r\n}\r\n\r\n/**\r\n * Checks if tool is GizmoTool\r\n * @param {ITool} tool\r\n * @return {boolean}\r\n */\r\nexport function checkIfToolIsGizmoTool(tool: ITool | null): boolean {\r\n  return tool !== null && 'gizmoTool' in tool;\r\n}\r\n\r\n/**\r\n * Base class for tools\r\n */\r\nexport class Tool implements ITool {\r\n  protected properties: ToolProperties | null = null;\r\n  /**\r\n   * return card to render in tool properties window\r\n   * @return {JSX.Element}\r\n   */\r\n  renderToolPropertiesCard(): JSX.Element {\r\n    if (this.properties) return this.properties.drawPropertiesCard();\r\n    return (\r\n      <div/>\r\n    );\r\n  }\r\n  /**\r\n   * method called on point select\r\n   * @param {Point} point\r\n   * @param {Object3D} object\r\n   * @return {void}\r\n   */\r\n  onSelectPoint(point: Point, object: Object3D): void {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * method called on edge select\r\n   * @param {Edge} edge\r\n   * @param {Object3D} object\r\n   * @return {void}\r\n   */\r\n  onSelectEdge(edge: Edge, object: Object3D): void {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * method called on face select\r\n   * @param {Face} face\r\n   * @param {Object3D} object\r\n   * @return {void}\r\n   */\r\n  onSelectFace(face: Face, object: Object3D): void {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * method called on object select\r\n   * @param {Object3D} object\r\n   * @return {void}\r\n   */\r\n  onSelectObject(object: Object3D): void {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * method called ont this tool selection\r\n   * @return {void}\r\n   */\r\n  onToolSelect(): void {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Returns tool properties\r\n   * @return {ToolsProperties | null}\r\n   */\r\n  getProperties(): ToolProperties | null {\r\n    return this.properties;\r\n  }\r\n}\r\n\r\n/**\r\n * Move Tool class\r\n */\r\nexport class MoveTool extends Tool implements IGizmoTool {\r\n  /**\r\n   */\r\n  constructor() {\r\n    super();\r\n    this.properties = new MoveToolProperties();\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  gizmoTool(): void {\r\n    return;\r\n  }\r\n}\r\n\r\n/**\r\n * Rotate Tool class\r\n */\r\nexport class RotateTool extends Tool implements IGizmoTool {\r\n  /**\r\n   */\r\n  constructor() {\r\n    super();\r\n    this.properties = new RotateToolProperties();\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  gizmoTool(): void {\r\n    return;\r\n  }\r\n}\r\n\r\n/**\r\n * Scale Tool class\r\n */\r\nexport class ScaleTool extends Tool implements IGizmoTool {\r\n  /**\r\n   */\r\n  constructor() {\r\n    super();\r\n    this.properties = new ScaleToolProperties();\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  gizmoTool(): void {\r\n    return;\r\n  }\r\n}\r\n\r\n/**\r\n * Surface Subdivision tool class\r\n */\r\nexport class SurfaceSubdivisionTool extends Tool {\r\n  /**\r\n   * @param {Face} face\r\n   */\r\n  onSelectFace(face: Face): void {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Subdivides given face in given mesh into 3 faces\r\n   * @param {Face} face\r\n   * @param {Mesh} mesh\r\n   */\r\n  public subdivideFace(face: Face, mesh: Mesh): void {\r\n    const faces = mesh.getFaces();\r\n    const indexOfDeletedFace = faces.indexOf(face);\r\n    if (indexOfDeletedFace < 0) return;\r\n\r\n    faces.splice(indexOfDeletedFace, 1);\r\n    const newPoint = calculateCenterPoint(face.getPoints());\r\n\r\n    const newEdges = face.getPoints().map((point) =>{\r\n      return new Edge(point, newPoint);\r\n    });\r\n\r\n    const newFaces = face.getEdges().map((edge) => {\r\n      const edgePoints = edge.getPoints();\r\n      const newEdgesInFace: Edge[] = [edge];\r\n      newEdges.forEach((newEdge) => {\r\n        const intersection =\r\n            calculateIntersection(edgePoints, newEdge.getPoints()).length;\r\n        if (intersection > 0) {\r\n          newEdgesInFace.push(newEdge);\r\n        }\r\n      });\r\n      return new Face(newEdgesInFace as [Edge, Edge, Edge]);\r\n    });\r\n\r\n    mesh.getPoints().push(newPoint);\r\n    mesh.getEdges().push(...newEdges);\r\n    faces.push(...newFaces);\r\n\r\n    mesh.refreshBuffers();\r\n  }\r\n}\r\n\r\n\r\n","import {ITool, MoveTool, RotateTool, ScaleTool,\r\n  SurfaceSubdivisionTool} from 'WebGL/Editor/Tools/Tools';\r\n\r\n/**\r\n * Class representing container to store all possible tools\r\n */\r\nclass ToolStorageClass {\r\n  private toolArray: ITool[] = [\r\n    new MoveTool(),\r\n    new RotateTool(),\r\n    new ScaleTool(),\r\n    new SurfaceSubdivisionTool(),\r\n  ]\r\n\r\n\r\n  /**\r\n   * Get tool by type if tool exist in storage, otherwise return null\r\n   * @param {constructor} constructor\r\n   * @return {T | null}\r\n   */\r\n  public getToolByType<T extends ITool>(\r\n      constructor:{new (...args: never[]):T}): T | null {\r\n    const tool = this.toolArray.find(\r\n        (t) => (t && (t instanceof constructor)));\r\n    return tool ? tool as T : null;\r\n  }\r\n}\r\n\r\nconst TOOL_STORAGE = new ToolStorageClass();\r\n\r\nexport default TOOL_STORAGE;\r\n","import React from 'react';\r\nimport {ColorModeContextInt} from 'contexts/ColorModeContext';\r\n\r\nexport const tableRowStyle = (styleRef: ColorModeContextInt | null):\r\n    React.CSSProperties => {\r\n  return {\r\n    borderStyle: 'solid',\r\n    borderWidth: '0.1em 0',\r\n    borderColor: styleRef?.colorMode.accentColor,\r\n  };\r\n};\r\n","import React, {useContext, useEffect, useState} from 'react';\r\nimport {MoveButton, RotateButton, ScaleButton,\r\n  SubdivideButton} from 'utils/GUI/GUIUtils';\r\nimport ViewManagerInst from 'WebGL/Views/ViewManager';\r\nimport MainView from 'WebGL/Views/MainView';\r\nimport {GizmoModes} from 'WebGL/Editor/Gizmos/GizmoManager';\r\nimport {ETools, IViewToolSelector} from 'components/toolsWIndow/ToolsManager';\r\nimport EditView, {EditViewMode} from 'WebGL/Views/EditView';\r\nimport {tableRowStyle} from 'styles/jsStyles';\r\nimport ColorModeContext from 'contexts/ColorModeContext';\r\nimport EditModeContext from 'contexts/EditModeContext';\r\nimport {ITool, MoveTool, RotateTool, ScaleTool,\r\n  SurfaceSubdivisionTool} from 'WebGL/Editor/Tools/Tools';\r\nimport TOOL_STORAGE from './ToolStorage';\r\nimport {Refresher} from 'contexts/RefresherContext';\r\n\r\n/**\r\n * Returns tools table for edit view\r\n * @param {IViewToolSelector} props\r\n * @return {JSX.Element}\r\n */\r\nexport function EditViewToolsSelector(props: IViewToolSelector): JSX.Element {\r\n  const editViewModeCtx = useContext(EditModeContext);\r\n  const [actActive, setActActive] = useState(ETools.move);\r\n  const colorModeCtx = useContext(ColorModeContext);\r\n  const refresher = useContext(Refresher);\r\n\r\n  useEffect(() => {\r\n    setActActive(ETools.move);\r\n    props.updateSelectedTool(TOOL_STORAGE.getToolByType(MoveTool));\r\n  }, [editViewModeCtx]);\r\n\r\n  /**\r\n   * @param {ETools} t\r\n   * @param {boolean} isInit\r\n   * @return {ETools}\r\n   */\r\n  function setTool(t: ETools, isInit = false): ETools {\r\n    let tool: ITool | null = null;\r\n    switch (t) {\r\n      case ETools.move: {\r\n        tool = TOOL_STORAGE.getToolByType(MoveTool);\r\n        break;\r\n      }\r\n      case ETools.rotate: {\r\n        tool = TOOL_STORAGE.getToolByType(RotateTool);\r\n        break;\r\n      }\r\n      case ETools.scale: {\r\n        tool = TOOL_STORAGE.getToolByType(ScaleTool);\r\n        break;\r\n      }\r\n      case ETools.surfaceSubdivision: {\r\n        tool = TOOL_STORAGE.getToolByType(SurfaceSubdivisionTool);\r\n        break;\r\n      }\r\n    }\r\n    props.updateSelectedTool(tool);\r\n    if (!isInit) setActActive(t);\r\n    refresher?.refresh();\r\n    return t;\r\n  }\r\n\r\n  const view = (ViewManagerInst.returnView() as EditView);\r\n  return (\r\n    <tbody>\r\n      {\r\n        (editViewModeCtx && (editViewModeCtx.editMode === EditViewMode.point ||\r\n          editViewModeCtx.editMode === EditViewMode.edge ||\r\n          editViewModeCtx.editMode === EditViewMode.face)) &&\r\n        <tr style={tableRowStyle(colorModeCtx)}>\r\n          <td>\r\n            <MoveButton text={'Move'} onClick={() => {\r\n              if (actActive === ETools.move) return;\r\n              setTool(ETools.move);\r\n              view.setGizmoMode(GizmoModes.move);\r\n            }}\r\n            className='fill-parent-width'\r\n            active={actActive === ETools.move} />\r\n          </td>\r\n        </tr>\r\n      }\r\n      {\r\n        (editViewModeCtx && (editViewModeCtx.editMode === EditViewMode.edge ||\r\n          editViewModeCtx.editMode === EditViewMode.face)) &&\r\n        <tr style={tableRowStyle(colorModeCtx)}>\r\n          <td>\r\n            <RotateButton text={'Rotate'} onClick={() => {\r\n              if (actActive === ETools.rotate) return;\r\n              setTool(ETools.rotate);\r\n              view.setGizmoMode(GizmoModes.rotate);\r\n            }}\r\n            className='fill-parent-width'\r\n            active={actActive === ETools.rotate} />\r\n          </td>\r\n        </tr>\r\n      }\r\n      {\r\n        (editViewModeCtx && (editViewModeCtx.editMode === EditViewMode.edge ||\r\n          editViewModeCtx.editMode === EditViewMode.face)) &&\r\n        <tr style={tableRowStyle(colorModeCtx)}>\r\n          <td>\r\n            <ScaleButton text={'Scale'} onClick={() => {\r\n              if (actActive === ETools.scale) return;\r\n              setTool(ETools.scale);\r\n              view.setGizmoMode(GizmoModes.scale);\r\n            }}\r\n            className='fill-parent-width'\r\n            active={actActive === ETools.scale} />\r\n          </td>\r\n        </tr>\r\n      }\r\n      {\r\n        (editViewModeCtx && (editViewModeCtx.editMode === EditViewMode.face)) &&\r\n        <tr style={tableRowStyle(colorModeCtx)}>\r\n          <td>\r\n            <SubdivideButton text={'Surface Subdivision'} onClick={() => {\r\n              if (actActive === ETools.surfaceSubdivision) return;\r\n              setTool(ETools.surfaceSubdivision);\r\n              view.setGizmoMode(GizmoModes.gizmoUnused);\r\n            }}\r\n            className='fill-parent-width'\r\n            active={actActive === ETools.surfaceSubdivision} />\r\n          </td>\r\n        </tr>\r\n      }\r\n    </tbody>\r\n  );\r\n}\r\n","import React, {useContext, useEffect, useState} from 'react';\r\nimport {MoveButton, RotateButton, ScaleButton} from 'utils/GUI/GUIUtils';\r\nimport ViewManagerInst from 'WebGL/Views/ViewManager';\r\nimport MainView from 'WebGL/Views/MainView';\r\nimport {GizmoModes} from 'WebGL/Editor/Gizmos/GizmoManager';\r\nimport {tableRowStyle} from 'styles/jsStyles';\r\nimport ColorModeContext from 'contexts/ColorModeContext';\r\nimport {ETools, IViewToolSelector} from 'components/toolsWIndow/ToolsManager';\r\nimport {ITool, MoveTool, RotateTool, ScaleTool} from 'WebGL/Editor/Tools/Tools';\r\nimport TOOL_STORAGE from './ToolStorage';\r\nimport {Refresher} from 'contexts/RefresherContext';\r\n\r\n/**\r\n * Returns tools table for main view\r\n * @param {IViewToolSelector} props\r\n * @return {JSX.Element}\r\n */\r\nexport function MainViewToolsSelector(props: IViewToolSelector): JSX.Element {\r\n  const refresher = useContext(Refresher);\r\n\r\n  /**\r\n   * @param {ETools} t\r\n   * @param {boolean} isInit\r\n   * @return {ETools}\r\n   */\r\n  function setTool(t: ETools, isInit = false): ETools {\r\n    let tool: ITool | null = null;\r\n    switch (t) {\r\n      case ETools.move: {\r\n        tool = TOOL_STORAGE.getToolByType(MoveTool);\r\n        break;\r\n      }\r\n      case ETools.rotate: {\r\n        tool = TOOL_STORAGE.getToolByType(RotateTool);\r\n        break;\r\n      }\r\n      case ETools.scale: {\r\n        tool = TOOL_STORAGE.getToolByType(ScaleTool);\r\n        break;\r\n      }\r\n    }\r\n    props.updateSelectedTool(tool);\r\n    if (!isInit) setActActive(t);\r\n    refresher?.refresh();\r\n    return t;\r\n  }\r\n\r\n  const [actActive, setActActive] = useState(ETools.move);\r\n  const colorModeCtx = useContext(ColorModeContext);\r\n\r\n  useEffect(() =>{\r\n    props.updateSelectedTool(TOOL_STORAGE.getToolByType(MoveTool));\r\n  }, []);\r\n\r\n  const view = (ViewManagerInst.returnView() as MainView);\r\n  return (\r\n    <tbody>\r\n      <tr style={tableRowStyle(colorModeCtx)}>\r\n        <td>\r\n          <MoveButton text={'Move'} onClick={() => {\r\n            if (actActive === ETools.move) return;\r\n            setTool(ETools.move);\r\n            view.setGizmoMode(GizmoModes.move);\r\n          }}\r\n          className='fill-parent-width'\r\n          active={actActive === ETools.move} />\r\n        </td>\r\n      </tr>\r\n      <tr style={tableRowStyle(colorModeCtx)}>\r\n        <td>\r\n          <RotateButton text={'Rotate'} onClick={() => {\r\n            if (actActive === ETools.rotate) return;\r\n            setTool(ETools.rotate);\r\n            view.setGizmoMode(GizmoModes.rotate);\r\n          }}\r\n          className='fill-parent-width'\r\n          active={actActive === ETools.rotate} />\r\n        </td>\r\n      </tr>\r\n      <tr style={tableRowStyle(colorModeCtx)}>\r\n        <td>\r\n          <ScaleButton text={'Scale'} onClick={() => {\r\n            if (actActive === ETools.scale) return;\r\n            setTool(ETools.scale);\r\n            view.setGizmoMode(GizmoModes.scale);\r\n          }}\r\n          className='fill-parent-width'\r\n          active={actActive === ETools.scale} />\r\n        </td>\r\n      </tr>\r\n    </tbody>\r\n  );\r\n}\r\n","import {AppMode} from 'components/modeNavBar/ModeNavBar';\r\nimport {createContext} from 'react';\r\n\r\nexport interface AppModeContextInt {\r\n  appMode: AppMode,\r\n  setAppMode: React.Dispatch<React.SetStateAction<AppMode>>\r\n}\r\nconst AppModeContext = createContext<AppModeContextInt | null>(null);\r\n\r\nexport default AppModeContext;\r\n","import {AppMode} from 'components/modeNavBar/ModeNavBar';\r\nimport {EditViewToolsSelector} from 'components/toolsWIndow/EditViewTools';\r\nimport {MainViewToolsSelector} from 'components/toolsWIndow/MainViewTools';\r\nimport EditModeContext from 'contexts/EditModeContext';\r\nimport ModeContext from 'contexts/ModeContext';\r\nimport React, {useContext} from 'react';\r\nimport {ITool} from 'WebGL/Editor/Tools/Tools';\r\n\r\n\r\nexport enum ETools {\r\n  move,\r\n  rotate,\r\n  scale,\r\n  surfaceSubdivision,\r\n}\r\n\r\nexport interface IViewToolSelector {\r\n  updateSelectedTool: (tool: ITool | null) => void;\r\n}\r\n\r\n/**\r\n * ToolsManger class\r\n */\r\nexport class ToolsManager {\r\n  private selectedTool: ITool | null = null;\r\n\r\n  /**\r\n   * Return component with buttons\r\n   * @return {JSX.Element}\r\n   */\r\n  public returnToolsComponent(): JSX.Element {\r\n    const viewModeCtx = useContext(ModeContext);\r\n    const editViewModeCtx = useContext(EditModeContext);\r\n\r\n    if (viewModeCtx?.appMode === AppMode.MainMode) {\r\n      return (\r\n        <MainViewToolsSelector\r\n          updateSelectedTool={this.setSelectedTool.bind(this)}\r\n        />\r\n      );\r\n    } else if (editViewModeCtx && viewModeCtx?.appMode === AppMode.EditMode) {\r\n      return (\r\n        <EditViewToolsSelector\r\n          updateSelectedTool={this.setSelectedTool.bind(this)}\r\n        />\r\n      );\r\n    } else {\r\n      return (<></>);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * gets given tool if its selected, otherwise returns null\r\n   * @param {constructor} constructor\r\n   * @return {T | null}\r\n   */\r\n  public getSelectedToolByType<T extends ITool>(\r\n      constructor:{new (...args: never[]):T}): T | null {\r\n    if (this.selectedTool && (this.selectedTool instanceof constructor)) {\r\n      return this.selectedTool;\r\n    } else return null;\r\n  }\r\n\r\n  /**\r\n   * gets selected tool\r\n   * @return {ITool | null}\r\n   */\r\n  public getSelectedTool(): ITool | null {\r\n    return this.selectedTool;\r\n  }\r\n\r\n  /**\r\n   * sets selected tool\r\n   * @param {ITool | null} tool\r\n   */\r\n  private setSelectedTool(tool : ITool | null): void {\r\n    this.selectedTool = tool;\r\n  }\r\n}\r\n\r\nconst ToolsManagerInst = new ToolsManager();\r\nexport default ToolsManagerInst;\r\n","import EditModeContext from 'contexts/EditModeContext';\r\nimport {mat4, vec2, vec3} from 'gl-matrix';\r\nimport {mode} from 'mathjs';\r\nimport React, {useContext, useEffect, useState} from 'react';\r\nimport {Button, ButtonGroup} from 'reactstrap';\r\nimport {GUIButton} from 'utils/GUI/GUIUtils';\r\nimport Camera from 'WebGL/Camera/Camera';\r\nimport CameraController from 'WebGL/Camera/CameraController';\r\nimport GizmoManager, {GizmoModes} from 'WebGL/Editor/Gizmos/GizmoManager';\r\nimport {GizmoManipListener} from 'WebGL/Editor/Gizmos/GizmoManipEvent';\r\nimport {CanvasEvent} from 'WebGL/Listeners/CanvasEvent';\r\nimport WebGLMouseEvent, {MouseListener} from 'WebGL/Listeners/MouseEvent';\r\nimport {Edge, EdgeHit, Face, FaceHit, Point, PointHit}\r\n  from 'WebGL/Objects/BasicMeshes/MeshUtils';\r\nimport Object3D from 'WebGL/Objects/Object3D';\r\nimport RayCaster, {createRayFromCamera, Ray, RayCasterMode}\r\n  from 'WebGL/Raycast/RayCaster';\r\nimport {getClosestEdgeOfObj, getClosestFaceOfObj, getClosestPointOfObj}\r\n  from 'WebGL/Raycast/RayCastUtils';\r\nimport EditRenderer from 'WebGL/Renderers/EditRenderer';\r\nimport STATE from 'WebGL/State';\r\nimport {calculateCenterPoint, calculateIntersection, rotate,\r\n} from 'WebGL/utils.ts/Math';\r\nimport View from './View';\r\nimport ViewManagerInst from './ViewManager';\r\nimport {AiOutlineLine} from 'react-icons/ai';\r\nimport {GiPlainSquare} from 'react-icons/gi';\r\nimport {HiOutlineDotsHorizontal} from 'react-icons/hi';\r\nimport {checkIfToolIsGizmoTool, IGizmoTool, MoveTool,\r\n  RotateTool, ScaleTool, SurfaceSubdivisionTool,\r\n} from 'WebGL/Editor/Tools/Tools';\r\nimport TOOL_STORAGE from 'components/toolsWIndow/ToolStorage';\r\nimport ToolsManagerInst from 'components/toolsWIndow/ToolsManager';\r\nimport {MoveToolProperties, RotateToolProperties, ScaleToolProperties,\r\n  TransformToolProperties} from 'WebGL/Editor/Tools/ToolsProperties';\r\n\r\nexport enum EditViewMode {\r\n  face = 'face',\r\n  edge = 'edge',\r\n  point = 'point',\r\n}\r\n\r\n/**\r\n * Edit view class\r\n */\r\nexport default class EditView extends View implements GizmoManipListener {\r\n  private obj: Object3D;\r\n  private camera: Camera;\r\n  private canvasEvent: CanvasEvent;\r\n  private raycaster: RayCaster;\r\n  private renderer: EditRenderer;\r\n  private cameraController: CameraController;\r\n\r\n  private gizmo: GizmoManager;\r\n  private gizmoPoint: vec3;\r\n  private leftMouseDown = false;\r\n\r\n  private mode: EditViewMode = EditViewMode.point;\r\n  private selectedPoint: Point | null = null;\r\n  private selectedEdge: Edge | null = null;\r\n  private selectedFace: Face | null = null;\r\n\r\n  private actualScaleFactor: vec3;\r\n  private originalSelectedEdge: Edge | null = null;\r\n  private originalSelectedFace: Face | null = null;\r\n\r\n  private isSelected = false;\r\n\r\n  /**\r\n   * Creates Main View\r\n   * @param {Object3D} obj\r\n   * @param {CanvasEvent} canvasEvent\r\n   */\r\n  constructor(obj: Object3D, canvasEvent: CanvasEvent) {\r\n    super();\r\n    this.canvasEvent = canvasEvent;\r\n    this.obj = obj;\r\n    this.camera = new Camera();\r\n    this.camera.setCanvasEvent(this.canvasEvent);\r\n    this.renderer = new EditRenderer(this.camera, this.obj);\r\n    this.raycaster = new RayCaster(new Ray(), obj, RayCasterMode.point, false);\r\n    this.cameraController =\r\n        new CameraController(this.camera, this.raycaster);\r\n    this.gizmo = new GizmoManager(this.camera, this.cameraController);\r\n    this.gizmo.subscribeToGizmo(this);\r\n    this.gizmoPoint = vec3.fromValues(0, 0, 0);\r\n\r\n    this.actualScaleFactor = vec3.create();\r\n  }\r\n\r\n  /**\r\n   * sets mode of view\r\n   * @param {EditViewMode} mode\r\n   */\r\n  public setMode(mode: EditViewMode): void {\r\n    this.mode = mode;\r\n    this.unselectAll();\r\n    switch (mode) {\r\n      case EditViewMode.point: {\r\n        this.raycaster.setMode(RayCasterMode.point | RayCasterMode.face);\r\n        break;\r\n      }\r\n      case EditViewMode.edge: {\r\n        this.raycaster.setMode(RayCasterMode.edge | RayCasterMode.face);\r\n        break;\r\n      }\r\n      case EditViewMode.face: {\r\n        this.raycaster.setMode(RayCasterMode.face);\r\n        break;\r\n      }\r\n    }\r\n    this.gizmo.setMode(GizmoModes.move);\r\n    this.updateOriginals();\r\n    vec3.set(this.actualScaleFactor, 1, 1, 1);\r\n    this.gizmo.inactivate();\r\n  }\r\n\r\n  /**\r\n   * Sets new gizmo mode for this view\r\n   * @param {GizmoModes} m\r\n   */\r\n  public setGizmoMode(m: GizmoModes): void {\r\n    if (m === GizmoModes.gizmoUnused) this.unselectAll();\r\n    this.gizmo.setMode(m);\r\n    this.updateOriginals();\r\n    vec3.set(this.actualScaleFactor, 1, 1, 1);\r\n  }\r\n\r\n  /**\r\n   * @return {void}\r\n   */\r\n  public renderView(): void {\r\n    this.renderer.renderFrame();\r\n    this.gizmo.render();\r\n  }\r\n  /**\r\n   * @return {JSX.Element}\r\n   */\r\n  public returnOnScreenMenu(): JSX.Element {\r\n    return (<EditOnScreenMenu/>);\r\n  }\r\n\r\n  /**\r\n   * @param {MouseEvent} event\r\n   */\r\n  onMouseDown(event: MouseEvent): void {\r\n    if (this.cameraController.isCameraActive()) return;\r\n    if (this.leftMouseDown) return;\r\n    this.leftMouseDown = true;\r\n    const ind = mat4.create();\r\n    mat4.identity(ind);\r\n\r\n    const screenCords = vec2.fromValues(\r\n        ( event.offsetX / this.camera.getScreenDimensions()[0]) * 2 - 1,\r\n        - ( event.offsetY / this.camera.getScreenDimensions()[1]) * 2 + 1,\r\n    );\r\n    const ray = createRayFromCamera(screenCords, this.camera);\r\n    this.raycaster.setRay(ray);\r\n    this.raycaster.setAreaRange(RayCaster.STANDARD_AREA_RANGE);\r\n\r\n    if (this.gizmo.raycastGizmo(ray)) return;\r\n    if (this.isSelected) return;\r\n\r\n    const props = ToolsManagerInst.getSelectedTool()?.getProperties();\r\n    if (props && props instanceof TransformToolProperties) {\r\n      this.raycaster.setAreaRange(\r\n          props.getMouseProperties().getClickRaycastArea());\r\n    }\r\n\r\n    this.isSelected = true;\r\n    const h = this.raycaster.cast(ind);\r\n\r\n    this.unselectAll();\r\n    this.gizmo.inactivate();\r\n    vec3.set(this.actualScaleFactor, 1, 1, 1);\r\n    if (h && h.length > 0) {\r\n      const o = h[0];\r\n      const f = getClosestFaceOfObj(o.hits);\r\n      switch (this.mode) {\r\n        case EditViewMode.point: {\r\n          const p = getClosestPointOfObj(o.hits);\r\n          this.handlePointHits(p, f, o.hittedObject);\r\n          break;\r\n        }\r\n        case EditViewMode.edge: {\r\n          const e = getClosestEdgeOfObj(o.hits);\r\n          this.handleEdgeHits(e, f, o.hittedObject);\r\n          break;\r\n        }\r\n        case EditViewMode.face: {\r\n          this.handleFaceHits(f, o.hittedObject);\r\n          break;\r\n        }\r\n      }\r\n      this.singleSelect();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {MouseEvent} event\r\n   */\r\n  onMouseUp(event: MouseEvent): void {\r\n    this.leftMouseDown = false;\r\n    this.isSelected = false;\r\n  }\r\n\r\n  /**\r\n   * @param {MouseEvent} event\r\n   */\r\n  singleSelect(): void {\r\n    const st = ToolsManagerInst.getSelectedTool();\r\n    if (!st) return;\r\n\r\n    if (this.mode === EditViewMode.face) {\r\n      if (st instanceof SurfaceSubdivisionTool &&\r\n          this.selectedFace) {\r\n        const mesh = this.obj.getMesh();\r\n        if (mesh) {\r\n          st.subdivideFace(this.selectedFace, mesh);\r\n          this.unselectAll();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unselects all faces, edges, points\r\n   */\r\n  private unselectAll(): void {\r\n    this.selectedPoint = null;\r\n    this.selectedEdge = null;\r\n    this.selectedFace = null;\r\n    this.originalSelectedEdge = null;\r\n    this.originalSelectedFace = null;\r\n    this.renderer.unselectPoint();\r\n    this.renderer.unselectEdge();\r\n    this.renderer.unselectFace();\r\n  }\r\n\r\n  /**\r\n   * selects point\r\n   * @param {PointHit | null} pointH\r\n   * @param {FaceHit | null} faceH\r\n   * @param {Object3D} obj\r\n   */\r\n  private handlePointHits(pointH: PointHit | null,\r\n      faceH: FaceHit | null, obj: Object3D):\r\n      void {\r\n    if (pointH && (!faceH || (faceH && pointH.distance < faceH.distance))) {\r\n      this.selectedPoint = pointH.point;\r\n      ToolsManagerInst.getSelectedTool()\r\n          ?.onSelectPoint(this.selectedPoint, obj);\r\n      this.renderer.selectPoint(pointH.point);\r\n\r\n      if (checkIfToolIsGizmoTool(ToolsManagerInst.getSelectedTool())) {\r\n        this.updateCenterPoint(pointH.point);\r\n        this.gizmo.activate();\r\n      }\r\n    } else {\r\n      this.renderer.unselectPoint();\r\n      this.selectedPoint = null;\r\n      vec3.zero(this.gizmoPoint);\r\n      this.gizmo.inactivate();\r\n    }\r\n    this.gizmo.setPoint(this.gizmoPoint);\r\n  }\r\n\r\n  /**\r\n   * selects edge\r\n   * @param {EdgeHit | null} edgeH\r\n   * @param {FaceHit | null} faceH\r\n   * @param {Object3D} obj\r\n   */\r\n  private handleEdgeHits(edgeH: EdgeHit | null,\r\n      faceH: FaceHit | null, obj: Object3D): void {\r\n    if (edgeH && (!faceH || (faceH && edgeH.distance < faceH.distance))) {\r\n      console.log(edgeH.distance, faceH ? faceH.distance : 'ss');\r\n      this.selectedEdge = edgeH.edge;\r\n      ToolsManagerInst.getSelectedTool()?.onSelectEdge(this.selectedEdge, obj);\r\n      this.renderer.selectEdge(edgeH.edge);\r\n\r\n      if (checkIfToolIsGizmoTool(ToolsManagerInst.getSelectedTool())) {\r\n        this.updateCenterPoint(edgeH.edge);\r\n        this.gizmo.activate();\r\n      }\r\n    } else {\r\n      this.renderer.unselectEdge();\r\n      vec3.zero(this.gizmoPoint);\r\n      this.selectedEdge = null;\r\n      this.gizmo.inactivate();\r\n    }\r\n    this.gizmo.setPoint(this.gizmoPoint);\r\n    this.updateOriginals();\r\n  }\r\n\r\n  /**\r\n   * selects face\r\n   * @param {FaceHit | null} faceH\r\n   * @param {Object3D} obj\r\n   */\r\n  private handleFaceHits(faceH: FaceHit | null, obj: Object3D): void {\r\n    if (faceH) {\r\n      this.selectedFace = faceH.face;\r\n      ToolsManagerInst.getSelectedTool()?.onSelectFace(this.selectedFace, obj);\r\n      this.renderer.selectFace(faceH.face);\r\n\r\n      if (checkIfToolIsGizmoTool(ToolsManagerInst.getSelectedTool())) {\r\n        this.updateCenterPoint(faceH.face);\r\n        this.gizmo.activate();\r\n      }\r\n    } else {\r\n      this.renderer.unselectFace();\r\n      vec3.zero(this.gizmoPoint);\r\n      this.selectedFace = null;\r\n      this.gizmo.inactivate();\r\n    }\r\n    this.gizmo.setPoint(this.gizmoPoint);\r\n    this.updateOriginals();\r\n  }\r\n\r\n  /**\r\n   * Removes this obj from listeners list\r\n   */\r\n  public unsubscribe(): void {\r\n    WebGLMouseEvent.unsubscribe(this);\r\n    this.gizmo.cleanUp();\r\n    this.cameraController.cleanUp();\r\n    // this.camera.setCanvasEvent(null);\r\n  }\r\n\r\n  /**\r\n   * @param {number} dx\r\n   * @param {number} dy\r\n   * @param {number} dz\r\n   * @return {void}\r\n   */\r\n  onMove(dx: number, dy: number, dz: number): void {\r\n    const tmp = vec3.create();\r\n    const change = vec3.fromValues(dx, dy, dz);\r\n    const moveTool = TOOL_STORAGE.getToolByType(MoveTool);\r\n    if (moveTool) {\r\n      const props = moveTool.getProperties() as MoveToolProperties;\r\n      vec3.scale(change, change, props ? props.getSpeedFactor() : 1);\r\n    }\r\n    vec3.add(\r\n        tmp,\r\n        this.gizmoPoint,\r\n        change);\r\n    this.gizmoPoint = tmp;\r\n    this.gizmo.setPoint(tmp);\r\n\r\n    switch (this.mode) {\r\n      case EditViewMode.point: {\r\n        if (this.selectedPoint) {\r\n          console.log('f', this.selectedPoint, tmp);\r\n          this.selectedPoint.setCords(tmp);\r\n          console.log('a', this.selectedPoint);\r\n          const pA = [this.selectedPoint];\r\n          this.refreshMeshBuffer(pA);\r\n        }\r\n        break;\r\n      }\r\n      case EditViewMode.edge: {\r\n        if (this.selectedEdge) {\r\n          const points = this.selectedEdge.getPoints();\r\n          points.forEach((point) => {\r\n            const newC = vec3.create();\r\n            vec3.add(newC, point.getCords(), change);\r\n            point.setCords(newC);\r\n          });\r\n          this.refreshMeshBuffer(points);\r\n        }\r\n        break;\r\n      }\r\n      case EditViewMode.face: {\r\n        if (this.selectedFace) {\r\n          const points = this.selectedFace.getPoints();\r\n          points.forEach((point) => {\r\n            const newC = vec3.create();\r\n            vec3.add(newC, point.getCords(), change);\r\n            point.setCords(newC);\r\n          });\r\n          this.refreshMeshBuffer(points);\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * @param {number} dx\r\n   * @param {number} dy\r\n   * @param {number} dz\r\n   * @return {void}\r\n   */\r\n  onRotate(dx: number, dy: number, dz: number): void {\r\n    const invGP = vec3.create();\r\n    const transInv = mat4.create();\r\n    const trans = mat4.create();\r\n    mat4.fromTranslation(transInv, vec3.negate(invGP, this.gizmoPoint));\r\n    mat4.fromTranslation(trans, this.gizmoPoint);\r\n\r\n    const rotateTool = TOOL_STORAGE.getToolByType(RotateTool);\r\n    const c = vec3.fromValues(dx, dy, dz);\r\n    if (rotateTool) {\r\n      const props = rotateTool.getProperties() as RotateToolProperties;\r\n      vec3.scale(c, c, props ? props.getSpeedFactor() : 1);\r\n    }\r\n\r\n    const rotateMat = rotate(c[0], c[1], c[2]);\r\n\r\n    switch (this.mode) {\r\n      case EditViewMode.edge: {\r\n        if (this.selectedEdge) {\r\n          const points = this.selectedEdge.getPoints();\r\n          points.forEach((point) => {\r\n            const newC = vec3.create();\r\n            const transformedC = vec3.create();\r\n            vec3.transformMat4(transformedC, point.getCords(), transInv);\r\n            vec3.transformMat4(newC, transformedC, rotateMat);\r\n            vec3.transformMat4(newC, newC, trans);\r\n            point.setCords(newC);\r\n          });\r\n          this.refreshMeshBuffer(points);\r\n        }\r\n        break;\r\n      }\r\n      case EditViewMode.face: {\r\n        if (this.selectedFace) {\r\n          const points = this.selectedFace.getPoints();\r\n          points.forEach((point) => {\r\n            const newC = vec3.create();\r\n            const transformedC = vec3.create();\r\n            vec3.transformMat4(transformedC, point.getCords(), transInv);\r\n            vec3.transformMat4(newC, transformedC, rotateMat);\r\n            vec3.transformMat4(newC, newC, trans);\r\n            point.setCords(newC);\r\n          });\r\n          this.refreshMeshBuffer(points);\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * @param {number} dx\r\n   * @param {number} dy\r\n   * @param {number} dz\r\n   * @return {void}\r\n   */\r\n  onScale(dx: number, dy: number, dz: number): void {\r\n    const change = vec3.fromValues(dx, dy, dz);\r\n    const scaleTool = TOOL_STORAGE.getToolByType(ScaleTool);\r\n    if (scaleTool) {\r\n      const props = scaleTool.getProperties() as ScaleToolProperties;\r\n      vec3.scale(change, change, props ? props.getSpeedFactor() : 1);\r\n    }\r\n\r\n    const invGP = vec3.create();\r\n    const transInv = mat4.create();\r\n    const trans = mat4.create();\r\n    const scaleMat = mat4.create();\r\n    mat4.fromTranslation(transInv, vec3.negate(invGP, this.gizmoPoint));\r\n    mat4.fromTranslation(trans, this.gizmoPoint);\r\n\r\n    vec3.add(this.actualScaleFactor, this.actualScaleFactor, change);\r\n    mat4.fromScaling(scaleMat, this.actualScaleFactor);\r\n\r\n    switch (this.mode) {\r\n      case EditViewMode.edge: {\r\n        if (this.originalSelectedEdge && this.selectedEdge) {\r\n          const points = this.originalSelectedEdge.getPoints();\r\n          const actPoints = this.selectedEdge?.getPoints();\r\n          if (!actPoints) return;\r\n          points.forEach((point, i) => {\r\n            const pointToSet = actPoints[i];\r\n            if (!pointToSet) return;\r\n            const newC = vec3.create();\r\n            const transformedC = vec3.create();\r\n            vec3.transformMat4(transformedC, point.getCords(), transInv);\r\n            vec3.transformMat4(newC, transformedC, scaleMat);\r\n            vec3.transformMat4(newC, newC, trans);\r\n            pointToSet.setCords(newC);\r\n          });\r\n          this.refreshMeshBuffer(actPoints);\r\n        }\r\n        break;\r\n      }\r\n      case EditViewMode.face: {\r\n        if (this.originalSelectedFace && this.selectedFace) {\r\n          const points = this.originalSelectedFace.getPoints();\r\n          const actPoints = this.selectedFace?.getPoints();\r\n          if (!actPoints) return;\r\n          points.forEach((point, i) => {\r\n            const pointToSet = actPoints[i];\r\n            if (!pointToSet) return;\r\n            console.log(pointToSet);\r\n            const newC = vec3.create();\r\n            const transformedC = vec3.create();\r\n            vec3.transformMat4(transformedC, point.getCords(), transInv);\r\n            vec3.transformMat4(newC, transformedC, scaleMat);\r\n            vec3.transformMat4(newC, newC, trans);\r\n            pointToSet.setCords(newC);\r\n          });\r\n          this.refreshMeshBuffer(actPoints);\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   *\r\n   */\r\n  onStart(): void {\r\n    this.updateOriginals();\r\n    vec3.set(this.actualScaleFactor, 1, 1, 1);\r\n  }\r\n  /**\r\n   *\r\n   */\r\n  onFinish(): void {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Updates gizmo's center point\r\n   * @param {Point | Edge | Face} o\r\n   */\r\n  private updateCenterPoint(o: Point | Edge | Face): void {\r\n    if (o instanceof Point) {\r\n      vec3.copy(this.gizmoPoint, o.getCords());\r\n    } else {\r\n      const p = calculateCenterPoint(o.getPoints());\r\n      vec3.copy(this.gizmoPoint, p.getCords());\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Refreshes meshes geometry buffer for faces edges and given points.\r\n   * Buffer will be refreshed if geometry contains one of given points.\r\n   * @param {Point[]} dependentPoints\r\n   */\r\n  private refreshMeshBuffer(dependentPoints: Point[]): void {\r\n    dependentPoints.forEach((point) =>{\r\n      point.recalculateBufferData();\r\n    });\r\n    this.obj.getMesh()?.getEdges().forEach((edge) => {\r\n      const int = calculateIntersection(dependentPoints, edge.getPoints());\r\n      if (int.length > 0) {\r\n        edge.recalculateBufferData();\r\n      }\r\n    });\r\n    this.obj.getMesh()?.getFaces().forEach((face) => {\r\n      const int = calculateIntersection(dependentPoints, face.getPoints());\r\n      if (int.length > 0) {\r\n        face.recalculateBufferData();\r\n      }\r\n    });\r\n    this.obj.getMesh()?.refreshBuffers();\r\n  }\r\n\r\n  /**\r\n   * Updates pretransformed mesh elements\r\n   */\r\n  private updateOriginals(): void {\r\n    this.originalSelectedFace =\r\n      this.selectedFace ? this.selectedFace.copy() : null;\r\n    this.originalSelectedEdge =\r\n      this.selectedEdge ? this.selectedEdge.copy() : null;\r\n  }\r\n}\r\n\r\n\r\nconst EditOnScreenMenu = (): JSX.Element => {\r\n  const workingEditMode = useContext(EditModeContext);\r\n\r\n  const setMode = (mode: EditViewMode) => {\r\n    workingEditMode?.setEditMode(mode);\r\n    (ViewManagerInst.returnView() as EditView)\r\n        .setMode(mode);\r\n    // setWorkingMode(mode);\r\n  };\r\n\r\n  useEffect(() => {\r\n    workingEditMode?.setEditMode(EditViewMode.point);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <ButtonGroup style={{\r\n        marginTop: '0.7rem',\r\n        marginLeft: '0.7rem',\r\n        borderRadius: '0.5rem',\r\n      }}>\r\n        <GUIButton onClick={() => {\r\n          if (!workingEditMode ||\r\n            workingEditMode.editMode === EditViewMode.point) return;\r\n          setMode(EditViewMode.point);\r\n        } }\r\n        active={(workingEditMode !== null &&\r\n          workingEditMode.editMode === EditViewMode.point)}\r\n        ico={<HiOutlineDotsHorizontal style={{transform: 'rotate(45deg)'}}/>}/>\r\n\r\n        <GUIButton onClick={() => {\r\n          if (!workingEditMode ||\r\n            workingEditMode.editMode === EditViewMode.edge) return;\r\n          setMode(EditViewMode.edge);\r\n        } }\r\n        active={(workingEditMode !== null &&\r\n          workingEditMode.editMode === EditViewMode.edge)}\r\n        ico={<AiOutlineLine style={{transform: 'rotate(45deg)'}}/>}/>\r\n\r\n        <GUIButton onClick={() => {\r\n          if (!workingEditMode ||\r\n            workingEditMode.editMode === EditViewMode.face) return;\r\n          setMode(EditViewMode.face);\r\n        } }\r\n        active={(workingEditMode !== null &&\r\n          workingEditMode.editMode === EditViewMode.face)}\r\n        ico={<GiPlainSquare/>}/>\r\n      </ButtonGroup>\r\n    </>\r\n  );\r\n};\r\n","import React, {Component, Dispatch, useRef} from 'react';\r\nimport {useContext, useState} from 'react';\r\nimport {ButtonGroup} from 'reactstrap';\r\nimport Frame from 'utils/Frame';\r\nimport ColorModeContext from 'contexts/ColorModeContext';\r\n\r\nimport {GUIButton} from 'utils/GUI/GUIUtils';\r\n\r\nimport {MdFilterNone, MdEdit} from 'react-icons/md';\r\nimport WebGLI from 'WebGL/WebGl';\r\nimport ViewManagerInst from 'WebGL/Views/ViewManager';\r\nimport MainView from 'WebGL/Views/MainView';\r\nimport AppModeContext from 'contexts/ModeContext';\r\nimport ModalSystemContext from 'contexts/ModalSystemContext';\r\n\r\nexport enum AppMode {\r\n  MainMode = 0,\r\n  EditMode = 1,\r\n}\r\n\r\nconst ModeNavBar = () : JSX.Element => {\r\n  const color = useContext(ColorModeContext);\r\n  const appMode = useContext(AppModeContext);\r\n  const modalSystem = useContext(ModalSystemContext);\r\n\r\n  const [selectedMode, setSelectedMode] = useState(0);\r\n\r\n  const mainModeBtnRef = useRef<HTMLButtonElement>(null);\r\n  const editModeBtnRef = useRef<HTMLButtonElement>(null);\r\n\r\n  /**\r\n *\r\n * @param {number} modeNum\r\n */\r\n  function setMode(modeNum: number): void {\r\n    if (!appMode) return;\r\n    appMode.setAppMode(modeNum);\r\n    setSelectedMode(modeNum);\r\n  }\r\n\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        width: '100%',\r\n      }}>\r\n      <Frame\r\n        backgroundColor={color?.colorMode.backgroundColor}\r\n        borderColor={color?.colorMode.accentColor}\r\n        borderWidth={2}>\r\n        <ButtonGroup>\r\n          <GUIButton\r\n            text={'Layout'}\r\n            buttonRef={mainModeBtnRef}\r\n            ico={<MdFilterNone/>}\r\n            onClick={() =>{\r\n              if (selectedMode === 0) return;\r\n              setMode(0);\r\n              ViewManagerInst.enableMainView();\r\n            }}\r\n            active={selectedMode === 0}\r\n          />\r\n          <GUIButton\r\n            text={'Edit'}\r\n            buttonRef={editModeBtnRef}\r\n            ico={<MdEdit/>}\r\n            onClick={() =>{\r\n              if (selectedMode === 1) return;\r\n              try {\r\n                setMode(1);\r\n                ViewManagerInst.enableEditView();\r\n              } catch (e: any) {\r\n                const message = (e as Error).message;\r\n                modalSystem?.setModalData({\r\n                  header: 'Warning',\r\n                  body: <>{message}</>,\r\n                });\r\n                modalSystem?.open();\r\n                if (editModeBtnRef && editModeBtnRef.current &&\r\n                    editModeBtnRef.current.blur) {\r\n                  editModeBtnRef.current.blur();\r\n                }\r\n                setMode(selectedMode);\r\n              }\r\n            }}\r\n            active={selectedMode === 1}/>\r\n        </ButtonGroup>\r\n      </Frame>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ModeNavBar;\r\n","import Camera from 'WebGL/Camera/Camera';\r\nimport WebGLU from 'WebGL/WebGlUtils';\r\nimport BasicShader from 'WebGL/Shaders/BasicShader';\r\nimport {mat4} from 'gl-matrix';\r\nimport ShaderUniformsLocations from 'WebGL/Shaders/ShadersUniformLocations';\r\nimport {Renderable} from './Renderer';\r\n\r\n\r\n/**\r\n * Standard renderer\r\n */\r\nexport default class StandardRenderer {\r\n  private camera: Camera;\r\n  private objToRender: Renderable;\r\n\r\n  /**\r\n   * Creates standard renderer\r\n   * @param {Camera} camera\r\n   * @param {Renderable} objToRender\r\n   */\r\n  constructor(camera: Camera, objToRender: Renderable) {\r\n    this.camera = camera;\r\n    this.objToRender = objToRender;\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  public renderFrame(): void {\r\n    WebGLU.clear(0, 0, 0, 0.3);\r\n    WebGLU.viewport();\r\n    WebGLU.enableDepthTest(true);\r\n    const tmp = mat4.create();\r\n    this.objToRender.renderObj(this.camera, mat4.identity(tmp));\r\n  }\r\n}\r\n","import TOOL_STORAGE from 'components/toolsWIndow/ToolStorage';\r\nimport {mat4, quat, vec2, vec3, vec4} from 'gl-matrix';\r\nimport React from 'react';\r\nimport {Button, ButtonGroup, Input} from 'reactstrap';\r\nimport GLOBAL_COMPONENTS_REFRESH_EVENT from 'utils/RefreshEvent';\r\nimport Camera from 'WebGL/Camera/Camera';\r\nimport CameraController from 'WebGL/Camera/CameraController';\r\nimport GizmoManager, {GizmoModes} from 'WebGL/Editor/Gizmos/GizmoManager';\r\nimport {GizmoManipListener} from 'WebGL/Editor/Gizmos/GizmoManipEvent';\r\nimport {MoveTool, RotateTool, ScaleTool} from 'WebGL/Editor/Tools/Tools';\r\nimport {MoveToolProperties, RotateToolProperties, ScaleToolProperties}\r\n  from 'WebGL/Editor/Tools/ToolsProperties';\r\nimport {CanvasEvent} from 'WebGL/Listeners/CanvasEvent';\r\nimport WebGLMouseEvent, {MouseListener} from 'WebGL/Listeners/MouseEvent';\r\nimport {FaceHit} from 'WebGL/Objects/BasicMeshes/MeshUtils';\r\nimport Object3D, {ObjectRaycastHit} from 'WebGL/Objects/Object3D';\r\nimport RayCaster, {createRayFromCamera, Ray, RayCasterMode}\r\n  from 'WebGL/Raycast/RayCaster';\r\nimport {getClosestFaceOfObj, getClosestObj} from 'WebGL/Raycast/RayCastUtils';\r\nimport StandardRenderer from 'WebGL/Renderers/StandardRenderer';\r\nimport STATE from 'WebGL/State';\r\nimport {changeSign, extractOrientationMatrix, quatToEuler,\r\n  rotate} from 'WebGL/utils.ts/Math';\r\nimport View from './View';\r\n\r\n/**\r\n * Main view class\r\n */\r\nexport default class MainView extends View implements GizmoManipListener {\r\n  private renderer: StandardRenderer;\r\n  private obj: Object3D;\r\n  private camera: Camera;\r\n  private canvasEvent: CanvasEvent;\r\n  private raycaster: RayCaster;\r\n  private cameraController: CameraController;\r\n  private gizmo: GizmoManager;\r\n\r\n  private gizmoPoint: vec3;\r\n\r\n  private leftMouseDown = false;\r\n\r\n  private actualObjectWorldTransformation = mat4.create();\r\n\r\n  /**\r\n   * Creates Main View\r\n   * @param {Object3D} obj\r\n   * @param {CanvasEvent} canvasEvent\r\n   */\r\n  constructor(obj: Object3D, canvasEvent: CanvasEvent) {\r\n    super();\r\n    this.canvasEvent = canvasEvent;\r\n    this.obj = obj;\r\n    this.camera = new Camera();\r\n    this.camera.setCanvasEvent(this.canvasEvent);\r\n    this.renderer = new StandardRenderer(this.camera, this.obj);\r\n    this.raycaster = new RayCaster(new Ray(), obj, RayCasterMode.face, true);\r\n    this.cameraController =\r\n        new CameraController(this.camera, this.raycaster);\r\n    this.gizmo = new GizmoManager(this.camera, this.cameraController);\r\n    this.gizmo.subscribeToGizmo(this);\r\n    this.gizmoPoint = vec3.fromValues(0, 0, 0);\r\n    this.recalculateGizmoPosition();\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  public renderView(): void {\r\n    this.renderer.renderFrame();\r\n    this.gizmo.render();\r\n  }\r\n  /**\r\n   * @return {JSX.Element}\r\n   */\r\n  public returnOnScreenMenu(): JSX.Element {\r\n    return (<MainOnScreenMenu/>);\r\n  }\r\n\r\n  /**\r\n   * Sets new gizmo mode for this view\r\n   * @param {GizmoModes} m\r\n   */\r\n  public setGizmoMode(m: GizmoModes): void {\r\n    this.gizmo.setMode(m);\r\n  }\r\n\r\n  /**\r\n   * @param {MouseEvent} event\r\n   */\r\n  onMouseDown(event: MouseEvent): void {\r\n    if (this.cameraController.isCameraActive()) return;\r\n    if (this.leftMouseDown) return;\r\n    this.leftMouseDown = true;\r\n\r\n    const screenCords = vec2.fromValues(\r\n        ( event.offsetX / this.camera.getScreenDimensions()[0]) * 2 - 1,\r\n        - ( event.offsetY / this.camera.getScreenDimensions()[1]) * 2 + 1,\r\n    );\r\n    const ray = createRayFromCamera(screenCords, this.camera);\r\n    this.raycaster.setRay(ray);\r\n    if (this.gizmo.raycastGizmo(ray)) return;\r\n    const s = getClosestObj(this.raycaster.cast());\r\n\r\n    if (STATE.getSelectedObject()) {\r\n      STATE.getSelectedObject()?.unselect();\r\n      this.gizmo.inactivate();\r\n    }\r\n    STATE.setSelectedObject(s[0] ? s[0].hittedObject : null);\r\n    if (s[0]?.hittedObject) {\r\n      s[0]?.hittedObject.select();\r\n      const newP = vec3.create();\r\n      const tmp = vec3.create();\r\n      vec3.copy(newP, mat4.getTranslation(tmp,\r\n          s[0]?.hittedObject.getWorldTransformMatrix()));\r\n      vec3.copy(this.gizmoPoint, newP);\r\n      this.gizmo.setPoint(newP);\r\n      this.gizmo.activate();\r\n      mat4.copy(this.actualObjectWorldTransformation,\r\n          s[0]?.hittedObject.getWorldTransformMatrix());\r\n    }\r\n  }\r\n  /**\r\n   *\r\n   */\r\n  onStart(): void {\r\n    const obj = STATE.getSelectedObject();\r\n    if (obj) {\r\n      mat4.copy(this.actualObjectWorldTransformation,\r\n          obj.getWorldTransformMatrix());\r\n    }\r\n  }\r\n  /**\r\n   *\r\n   */\r\n  onFinish(): void {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * @param {MouseEvent} event\r\n   */\r\n  onMouseUp(event: MouseEvent): void {\r\n    this.leftMouseDown = false;\r\n  }\r\n\r\n  /**\r\n   * @param {number} dx\r\n   * @param {number} dy\r\n   * @param {number} dz\r\n   */\r\n  onMove(dx: number, dy: number, dz: number): void {\r\n    const transform = STATE.getSelectedObject()?.getTransform();\r\n    const parent = STATE.getSelectedObject()?.getParent();\r\n    const moveTool = TOOL_STORAGE.getToolByType(MoveTool);\r\n    if (!transform) return;\r\n\r\n    const change = vec3.fromValues(dx, dy, dz);\r\n    let props: MoveToolProperties | null = null;\r\n    if (moveTool) {\r\n      props = moveTool.getProperties() as MoveToolProperties;\r\n      vec3.scale(change, change,\r\n          props ? props.getSpeedFactor() : 1);\r\n    }\r\n\r\n    const tmp = vec4.create();\r\n    const vec4T = vec4.fromValues(change[0], change[1], change[2], 0);\r\n    if (parent) {\r\n      const inv = mat4.create();\r\n      mat4.invert(inv, parent.getWorldTransformMatrix());\r\n      vec4.transformMat4(tmp, vec4T, inv);\r\n    } else {\r\n      vec4.copy(tmp, vec4T);\r\n    }\r\n    const w = tmp[3] ? tmp[3] : 1;\r\n    const translatedTranslation = vec3.fromValues(tmp[0]/w, tmp[1]/w, tmp[2]/w);\r\n\r\n\r\n    const final = vec3.create();\r\n\r\n    const prevTranslation = transform.getPositionInParent();\r\n    transform.setPositionInParent(\r\n        vec3.add(final, prevTranslation, translatedTranslation));\r\n    const diff = vec3.fromValues(dx, dy, dz);\r\n    if (moveTool) {\r\n      vec3.scale(diff, diff, props ? props.getSpeedFactor() : 1);\r\n    }\r\n    vec3.add(this.gizmoPoint, this.gizmoPoint, diff);\r\n    this.gizmo.setPoint(this.gizmoPoint);\r\n\r\n    GLOBAL_COMPONENTS_REFRESH_EVENT.refresh();\r\n  }\r\n  /**\r\n   * @param {number} dx\r\n   * @param {number} dy\r\n   * @param {number} dz\r\n   */\r\n  onRotate(dx: number, dy: number, dz: number): void {\r\n    /*\r\n    const obj = STATE.getSelectedObject();\r\n    const transform = obj?.getTransform();\r\n    const parent = obj?.getParent();\r\n    if (!transform) return;\r\n    const rotateTool = TOOL_STORAGE.getToolByType(RotateTool);\r\n    const c = vec3.fromValues(dx, dy, dz);\r\n    if (rotateTool) {\r\n      vec3.scale(c, c, rotateTool.getProperties().getSpeedFactor());\r\n    }\r\n\r\n    const tmp = rotate(c[0], c[1], c[2]);\r\n    const rotated = mat4.create();\r\n    if (obj) {\r\n      const inv =\r\n        extractOrientationMatrix(this.actualObjectWorldTransformation);\r\n      mat4.invert(inv, inv);\r\n      mat4.multiply(rotated, inv, tmp);\r\n    } else {\r\n      mat4.copy(rotated, tmp);\r\n    }\r\n    const tmpQuat = quat.create();\r\n    mat4.getRotation(tmpQuat, rotated);\r\n    const rotatedRotation = quatToEuler(tmpQuat);\r\n    const final = vec3.create();\r\n\r\n    const prevRotation = transform.getOrientationInParent();\r\n    transform.setOrientationInParent(\r\n        vec3.add(final, prevRotation, rotatedRotation));\r\n\r\n    GLOBAL_COMPONENTS_REFRESH_EVENT.refresh();\r\n    */\r\n\r\n\r\n    const obj = STATE.getSelectedObject();\r\n    const transform = obj?.getTransform();\r\n    const parent = obj?.getParent();\r\n    if (!transform) return;\r\n    const rotateTool = TOOL_STORAGE.getToolByType(RotateTool);\r\n    const c = vec3.fromValues(dx, dy, dz);\r\n    if (rotateTool) {\r\n      const props = rotateTool.getProperties() as RotateToolProperties;\r\n      vec3.scale(c, c, props ? props.getSpeedFactor() : 1);\r\n    }\r\n    /*\r\n    const tmp = vec4.fromValues(c[0], c[1], c[2], 0);\r\n    const rotated = vec4.create();\r\n    const inv = mat4.create();\r\n    if (obj) {\r\n      mat4.copy(inv,\r\n          extractOrientationMatrix(this.actualObjectWorldTransformation));\r\n      mat4.invert(inv, inv);\r\n    } else {\r\n      mat4.identity(inv);\r\n    }\r\n\r\n    vec4.transformMat4(rotated, tmp, inv);\r\n    const allSumD = dx + dy + dz;\r\n\r\n    const rotatedVec3 = vec3.fromValues(rotated[0], rotated[1], rotated[2]);\r\n    */\r\n    const final = vec3.create();\r\n    const prevRotation = transform.getOrientationInParent();\r\n    transform.setOrientationInParent(\r\n        vec3.add(final, prevRotation, /* rotatedVec3 */ c));\r\n\r\n    GLOBAL_COMPONENTS_REFRESH_EVENT.refresh();\r\n\r\n    /*\r\n    const obj = STATE.getSelectedObject();\r\n    const transform = obj?.getTransform();\r\n    const parent = obj?.getParent();\r\n    if (!transform) return;\r\n    const rotateTool = TOOL_STORAGE.getToolByType(RotateTool);\r\n    const c = vec3.fromValues(dx, dy, dz);\r\n    if (rotateTool) {\r\n      vec3.scale(c, c, rotateTool.getProperties().getSpeedFactor());\r\n    }\r\n\r\n    const tmp = vec4.fromValues(c[0], c[1], c[2], 0);\r\n    const rotated = vec4.create();\r\n    const inv = mat4.create();\r\n    if (parent) {\r\n      // mat4.copy(inv,\r\n      //     this.actualObjectWorldTransformation);\r\n      mat4.copy(inv,\r\n          this.actualObjectWorldTransformation);\r\n      mat4.invert(inv, inv);\r\n    } else {\r\n      mat4.identity(inv);\r\n    }\r\n\r\n    vec4.transformMat4(rotated, tmp, inv);\r\n    const final = vec3.create();\r\n\r\n    const transformedVec3 = vec3.fromValues(rotated[0], rotated[1], rotated[2]);\r\n    vec3.normalize(transformedVec3, transformedVec3);\r\n    const rotationChangeMat = mat4.create();\r\n    mat4.fromRotation(rotationChangeMat, dx + dy + dz,\r\n      changeSign(transformedVec3 as number[], 1) as vec3);\r\n    const rotationChangeQuat = quat.create();\r\n    mat4.getRotation(rotationChangeQuat, rotationChangeMat);\r\n    const rotationAngles = quatToEuler(rotationChangeQuat);\r\n\r\n    const prevRotation = transform.getOrientationInParent();\r\n    transform.setOrientationInParent(\r\n        vec3.add(final, prevRotation, rotationAngles));\r\n\r\n    GLOBAL_COMPONENTS_REFRESH_EVENT.refresh();\r\n    */\r\n  }\r\n  /**\r\n   * @param {number} dx\r\n   * @param {number} dy\r\n   * @param {number} dz\r\n   */\r\n  onScale(dx: number, dy: number, dz: number): void {\r\n    const obj = STATE.getSelectedObject();\r\n    const transform = obj?.getTransform();\r\n    const parent = obj?.getParent();\r\n    if (!transform) return;\r\n    const change = vec3.fromValues(dx, dy, dz);\r\n    const scaleTool = TOOL_STORAGE.getToolByType(ScaleTool);\r\n    if (scaleTool) {\r\n      const props = scaleTool.getProperties() as ScaleToolProperties;\r\n      vec3.scale(change, change, props ? props.getSpeedFactor() : 1);\r\n    }\r\n\r\n    const tmp = vec4.create();\r\n    if (parent) {\r\n      const inv = mat4.create();\r\n      const rotTransMat = mat4.create();\r\n      const rot = quat.create();\r\n      const trans = vec3.create();\r\n      mat4.getRotation(rot, this.actualObjectWorldTransformation);\r\n      mat4.getTranslation(trans, this.actualObjectWorldTransformation);\r\n      mat4.fromRotationTranslation(rotTransMat, rot, trans);\r\n\r\n      mat4.invert(inv, rotTransMat);\r\n      vec4.transformMat4(tmp, [dx, dy, dz, 0], inv);\r\n    } else {\r\n      vec4.copy(tmp, [dx, dy, dz, 0]);\r\n    }\r\n    const w = tmp[3] ? tmp[3] : 1;\r\n    const scaledScaling = vec3.fromValues(tmp[0]/w, tmp[1]/w, tmp[2]/w);\r\n    changeSign(scaledScaling as number[], dx + dy + dz);\r\n    console.log(scaledScaling, [dx, dy, dz], [tmp[0], tmp[1], tmp[2]]);\r\n    const final = vec3.create();\r\n\r\n    const prevScale = transform.getScaleInParent();\r\n    transform.setScaleInParent(vec3.add(final, prevScale, scaledScaling));\r\n\r\n    GLOBAL_COMPONENTS_REFRESH_EVENT.refresh();\r\n  }\r\n\r\n  /**\r\n   * Removes this obj from listeners list\r\n   */\r\n  public unsubscribe(): void {\r\n    WebGLMouseEvent.unsubscribe(this);\r\n    this.gizmo.cleanUp();\r\n    this.cameraController.cleanUp();\r\n    // this.camera.setCanvasEvent(null);\r\n  }\r\n\r\n  /**\r\n   * Recalculates position of gizmo in world space\r\n   */\r\n  public recalculateGizmoPosition(): void {\r\n    const obj = STATE.getSelectedObject();\r\n    const translated = vec3.create();\r\n    this.gizmo.inactivate();\r\n    if (obj) {\r\n      mat4.getTranslation(translated, obj.getWorldTransformMatrix());\r\n      vec3.copy(this.gizmoPoint, translated);\r\n      this.gizmo.setPoint(this.gizmoPoint);\r\n      this.gizmo.activate();\r\n    }\r\n  }\r\n}\r\n\r\nconst MainOnScreenMenu = (): JSX.Element => {\r\n  return (\r\n    <>\r\n    </>\r\n  );\r\n};\r\n","import Camera from 'WebGL/Camera/Camera';\r\nimport React from 'react';\r\nimport {CanvasEvent} from 'WebGL/Listeners/CanvasEvent';\r\nimport Object3D from 'WebGL/Objects/Object3D';\r\nimport STATE from 'WebGL/State';\r\nimport WebGLU from 'WebGL/WebGlUtils';\r\nimport EditView from './EditView';\r\nimport MainView from './MainView';\r\nimport View from './View';\r\nimport {AppMode} from 'components/modeNavBar/ModeNavBar';\r\n\r\n\r\n/**\r\n * ViewManger class\r\n */\r\nexport class ViewManager {\r\n  private actualView: View | null = null;\r\n  private canvasEvent: CanvasEvent | null = null;\r\n\r\n  /**\r\n   *\r\n   */\r\n  constructor() {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Init ViewManager\r\n   * @param {CanvasEvent} canvasEvent\r\n   */\r\n  public init(canvasEvent: CanvasEvent): void {\r\n    this.canvasEvent = canvasEvent;\r\n    this.enableMainView();\r\n  }\r\n\r\n  /**\r\n   * Returns actual view\r\n   * @return {View | null}\r\n   */\r\n  public returnView(): View | null {\r\n    return this.actualView;\r\n  }\r\n\r\n  /**\r\n   * Renders world from actual view\r\n   */\r\n  public renderViewWorld(): void {\r\n    this.actualView?.renderView();\r\n  }\r\n\r\n  /**\r\n   * Sets new view\r\n   * @param {View} view\r\n   */\r\n  public setActualView(view: View): void {\r\n    if (this.actualView) {\r\n      this.actualView.unsubscribe();\r\n    }\r\n    this.actualView = view;\r\n  }\r\n\r\n  /**\r\n   * Sets Main View as actual view\r\n   */\r\n  public enableMainView(): void {\r\n    const w = STATE.getWorld();\r\n    if (w && this.canvasEvent) {\r\n      this.setActualView(new MainView(w, this.canvasEvent));\r\n    } else {\r\n      throw new Error('World is not loaded');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets Edit View as actual view\r\n   * @param {View} view\r\n   */\r\n  public enableEditView(): void {\r\n    const so = STATE.getSelectedObject();\r\n    if (so && this.canvasEvent) {\r\n      if (so.getMesh()) {\r\n        this.setActualView(new EditView(so, this.canvasEvent));\r\n      } else {\r\n        throw new Error('Selected object has no mesh');\r\n      }\r\n    } else {\r\n      throw new Error('None object is selected');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns menu to display on canvas\r\n   * @param {AppMode} id\r\n   * @return {JSX.Element | undefined}\r\n   */\r\n  public returnOnScreenMenu(id: AppMode): JSX.Element | undefined {\r\n    return (\r\n      <ViewMenuManagerComponent\r\n        viewId={id}\r\n        component={this.actualView ?\r\n          this.actualView.returnOnScreenMenu() : undefined}/>\r\n    );\r\n  }\r\n}\r\n\r\nconst ViewManagerInst = new ViewManager();\r\nexport default ViewManagerInst;\r\n\r\nexport interface ViewMenuManagerProps {\r\n  component : JSX.Element | undefined;\r\n  viewId: AppMode\r\n}\r\n\r\nconst ViewMenuManagerComponent = (props: ViewMenuManagerProps) => {\r\n  return (\r\n    <>\r\n      {props.component}\r\n    </>\r\n  );\r\n};\r\n","import React, {useContext, useEffect} from 'react';\r\nimport {AppMode} from 'components/modeNavBar/ModeNavBar';\r\nimport ColorModeContext from 'contexts/ColorModeContext';\r\nimport EditModeContext from 'contexts/EditModeContext';\r\nimport ModeContext from 'contexts/ModeContext';\r\n\r\nimport 'styles/generalStyles.css';\r\nimport {MainViewToolsSelector} from './MainViewTools';\r\nimport {EditViewToolsSelector} from './EditViewTools';\r\nimport ToolsManagerInst from 'components/toolsWIndow/ToolsManager';\r\n\r\n\r\nconst ToolsWindow =\r\n    (props : {children : React.ReactNode[] | React.ReactNode}):\r\n        JSX.Element => {\r\n      const colorModeCtx = useContext(ColorModeContext);\r\n      return (\r\n        <div>\r\n          <table\r\n            className='fill-parent-width'>\r\n            {ToolsManagerInst.returnToolsComponent()}\r\n          </table>\r\n        </div>\r\n      );\r\n    };\r\n\r\nexport default ToolsWindow;\r\n","import React from 'react';\r\nimport {IoCubeOutline} from 'react-icons/io5';\r\n\r\nimport 'styles/nodeTreeStyles.css';\r\n\r\n\r\nexport interface TypeIconProps {\r\n  droppable?: boolean;\r\n  nodeType?: string;\r\n}\r\n\r\nconst TypeIcon = (props: TypeIconProps): JSX.Element => {\r\n  switch (props.nodeType) {\r\n    case 'object': return <IoCubeOutline />;\r\n    default: return (<></>);\r\n  }\r\n};\r\n\r\nexport default TypeIcon;\r\n","import {NodeModel, useDragOver} from '@minoru/react-dnd-treeview';\r\nimport ColorModeContext, {ColorModeContextInt} from 'contexts/ColorModeContext';\r\nimport React, {useContext} from 'react';\r\n\r\nimport {RiArrowRightSFill} from 'react-icons/ri';\r\nimport {CssBaseline} from '@mui/material';\r\n\r\nimport colorConverter from 'color-convert';\r\nimport styled from 'styled-components';\r\n\r\nimport TypeIcon from\r\n  'components/objectTreeNodeWIndow/treeComponents/NodeTypeIcon';\r\nimport Object3D from 'WebGL/Objects/Object3D';\r\nimport {BsFillTrashFill} from 'react-icons/bs';\r\nimport STATE from 'WebGL/State';\r\nimport ViewManagerInst from 'WebGL/Views/ViewManager';\r\nimport {Refresher} from 'contexts/RefresherContext';\r\n\r\n\r\nexport interface NodeItemProps {\r\n  node: NodeModel<Object3D>;\r\n  depth: number;\r\n  isOpen: boolean;\r\n  isSelected: boolean;\r\n  onToggle: (id: NodeModel<Object3D>['id']) => void;\r\n  onSelect?: (node: NodeModel<Object3D>) => void;\r\n}\r\n\r\ninterface HoverableProps {\r\n  isSelected: boolean;\r\n  backgroundColor: {r: number, g: number, b: number};\r\n  colorMode: ColorModeContextInt | null\r\n}\r\n\r\nconst Hoverable = styled.span`\r\nborder-radius: 0.2em;\r\npadding-right: 0.5em;\r\ncolor: ${(props: HoverableProps) => props.isSelected ?\r\n  props.colorMode?.colorMode.accentColor :\r\n  props.colorMode?.colorMode.primaryColor};\r\nbackground-color: ${(props: HoverableProps) => props.isSelected ?\r\n  props.colorMode?.colorMode.secondaryColor : ''};\r\n&:hover {\r\n  background-color: \r\n    rgba(${(props: HoverableProps) => props.backgroundColor.r}, \r\n    ${(props: HoverableProps) => props.backgroundColor.g}, \r\n    ${(props: HoverableProps) => props.backgroundColor.b}, 0.5);\r\n}\r\n`;\r\n\r\nconst NodeItem = (props: NodeItemProps): JSX.Element => {\r\n  const colorModeCtx = useContext(ColorModeContext);\r\n  const refresher = useContext(Refresher);\r\n  const handleToggle = (e: React.MouseEvent) => {\r\n    e.stopPropagation();\r\n    props.onToggle(props.node.id);\r\n  };\r\n\r\n  const dragOverProps =\r\n    useDragOver(props.node.id, props.isOpen, props.onToggle);\r\n\r\n  const indent = `calc(${props.depth} * 1em`;\r\n\r\n  const handleSelect = () => {\r\n    if (props.onSelect) {\r\n      props.onSelect(props.node);\r\n    }\r\n  };\r\n\r\n  const colorRgb =\r\n    colorConverter.hex.rgb(colorModeCtx?.colorMode.secondaryColor);\r\n\r\n  return (\r\n    <span\r\n      className='node-element'\r\n      style={{\r\n        paddingInlineStart: indent,\r\n      }}\r\n      {...dragOverProps}\r\n    >\r\n      <CssBaseline />\r\n      <span\r\n        style={{\r\n          width: '1em',\r\n          color: colorModeCtx?.colorMode.primaryColor,\r\n        }}\r\n      >\r\n        {props.node.droppable && props.node.data &&\r\n          (props.node.data?.getChildrenList().length > 0) && (\r\n          <span onClick={handleToggle}>\r\n            <RiArrowRightSFill\r\n              className={`expand-icon ${props.isOpen ? 'expanded' : ''}`}\r\n            />\r\n          </span>\r\n        )}\r\n      </span>\r\n      <Hoverable\r\n        isSelected={props.isSelected}\r\n        colorMode={colorModeCtx}\r\n        backgroundColor={{\r\n          r: colorRgb[0] as number,\r\n          g: colorRgb[1] as number,\r\n          b: colorRgb[2] as number,\r\n        }}\r\n      >\r\n        <span\r\n          onClick={handleSelect}\r\n        >\r\n          <span\r\n            style={{width: '1em', paddingLeft: '0.5em'}}\r\n          >\r\n            <TypeIcon nodeType={'object'} />\r\n          </span>\r\n          <span\r\n            style={{paddingLeft: '0.2em'}}\r\n          >\r\n            {props.node.text}\r\n          </span>\r\n          {props.node.parent !== 'root' &&\r\n          <span\r\n            style={{marginLeft: '0.2em'}}\r\n            onClick={(e) => {\r\n              e.stopPropagation();\r\n              if (props.node.data) {\r\n                deleteObj(props.node.data);\r\n                refresher?.refresh();\r\n              }\r\n            }}\r\n          >\r\n            <BsFillTrashFill/>\r\n          </span>}\r\n        </span>\r\n      </Hoverable>\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default NodeItem;\r\n\r\nconst deleteObj = (obj: Object3D): void => {\r\n  obj.getChildrenList().forEach((child) => deleteObj(child));\r\n  const parent = obj.getParent();\r\n  if (parent) parent.removeChild(obj);\r\n  obj.setParent(null);\r\n\r\n  const selected = STATE.getSelectedObject();\r\n  if (selected === obj) {\r\n    STATE.setSelectedObject(null);\r\n    const mainView = ViewManagerInst.returnView() as any;\r\n    if (mainView && mainView.recalculateGizmoPosition) {\r\n      mainView.recalculateGizmoPosition();\r\n    }\r\n  }\r\n};\r\n","import {DragLayerMonitorProps} from '@minoru/react-dnd-treeview';\r\nimport ColorModeContext from 'contexts/ColorModeContext';\r\nimport React, {useContext} from 'react';\r\n\r\n\r\nexport interface DragPreviewProps {\r\n  monitorProps: DragLayerMonitorProps<unknown>;\r\n}\r\n\r\nconst DragPreview = (props: DragPreviewProps): JSX.Element => {\r\n  const ColorModeCtx = useContext(ColorModeContext);\r\n  const item = props.monitorProps.item;\r\n  return (\r\n    <span\r\n      className='node-element-drag'\r\n      style={{\r\n        color: ColorModeCtx?.colorMode.secondaryColor,\r\n        backgroundColor: ColorModeCtx?.colorMode.accentColor,\r\n      }}\r\n    >\r\n      {item.text}\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default DragPreview;\r\n","import {NodeModel, Tree} from '@minoru/react-dnd-treeview';\r\nimport ColorModeContext from 'contexts/ColorModeContext';\r\nimport React, {useContext, useEffect, useState} from 'react';\r\nimport Frame from 'utils/Frame';\r\nimport {PanelBody} from 'utils/GUI/Panels';\r\n\r\nimport 'styles/nodeTreeStyles.css';\r\nimport NodeItem from './treeComponents/NodeItem';\r\nimport DragPreview from './treeComponents/DragPreview';\r\nimport STATE from 'WebGL/State';\r\nimport Object3D from 'WebGL/Objects/Object3D';\r\nimport {RefreshMechanism} from 'contexts/RefresherContext';\r\nimport ViewManagerInst from 'WebGL/Views/ViewManager';\r\nimport {Disable} from 'utils/GUI/GUIUtils';\r\nimport ModeContext from 'contexts/ModeContext';\r\nimport {AppMode} from 'components/modeNavBar/ModeNavBar';\r\n\r\nconst ObjectTreeNodeWindow = (): JSX.Element => {\r\n  const colorModeCtx = useContext(ColorModeContext);\r\n  const refreshMechanism = useContext(RefreshMechanism);\r\n  const currentViewCtx = useContext(ModeContext);\r\n\r\n  const [treeData, setTreeData] = useState<NodeModel<Object3D>[]>([]);\r\n  const [selectedNode, setSelectedNode] =\r\n    useState<NodeModel<Object3D> | null>(null);\r\n\r\n  const world = STATE.getWorld();\r\n\r\n  const updtGizmoPos = () => {\r\n    const mainView = ViewManagerInst.returnView() as any;\r\n    if (mainView && mainView.recalculateGizmoPosition) {\r\n      mainView.recalculateGizmoPosition();\r\n    }\r\n  };\r\n\r\n  const handleDrop = (newData: NodeModel<Object3D>[]) => {\r\n    setTreeData(newData);\r\n    if (world) {\r\n      rearrangeHierarchyBasedOnTreeData(newData, world);\r\n      updtGizmoPos();\r\n    }\r\n  };\r\n\r\n  const disableOnView = (): boolean => {\r\n    if (currentViewCtx) {\r\n      switch (currentViewCtx.appMode) {\r\n        case AppMode.EditMode: {\r\n          return true;\r\n        }\r\n        default: {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const handleSelect = (node: NodeModel<Object3D>) => {\r\n    // setSelectedNode(node);\r\n\r\n    STATE.getSelectedObject()?.unselect();\r\n    STATE.setSelectedObject(node.data ? node.data : null);\r\n    node.data?.select();\r\n    updtGizmoPos();\r\n  };\r\n\r\n  useEffect(() => {\r\n    setTreeData(mapWorldToTreeData());\r\n  }, [, refreshMechanism]);\r\n\r\n  useEffect(() => {\r\n    const selectedNode = treeData.find((node) =>\r\n      node.data === STATE.getSelectedObject());\r\n    setSelectedNode(selectedNode ? selectedNode : null);\r\n  }, [refreshMechanism]);\r\n\r\n  return (\r\n    <Frame\r\n      style={{\r\n        height: '100%',\r\n      }}\r\n      backgroundColor={colorModeCtx?.colorMode.backgroundColor}\r\n    >\r\n      <Disable disabled={disableOnView()}>\r\n        <PanelBody className='tree-view'>\r\n          <div className='tree-view'>\r\n            <Tree\r\n              tree={treeData}\r\n              rootId={world ? 'root' : ''}\r\n              render={(node, {depth, isOpen, onToggle}) => (\r\n                <NodeItem\r\n                  node={node}\r\n                  depth={depth}\r\n                  isOpen={isOpen}\r\n                  isSelected={node.id === selectedNode?.id}\r\n                  onToggle={onToggle}\r\n                  onSelect={handleSelect}\r\n                />\r\n              )}\r\n              onDrop={handleDrop}\r\n              dragPreviewRender={(monitorProps) => {\r\n                return (\r\n                  <DragPreview monitorProps={monitorProps}/>\r\n                );\r\n              }}\r\n              classes={{\r\n                root: 'treeRoot',\r\n                draggingSource: 'draggingSource',\r\n                dropTarget: 'dropTarget',\r\n              }}\r\n            />\r\n          </div>\r\n        </PanelBody>\r\n      </Disable>\r\n    </Frame>\r\n  );\r\n};\r\n\r\nexport default ObjectTreeNodeWindow;\r\n\r\n/**\r\n * Create gui tree data\r\n * @return {NodeModel[]}\r\n */\r\nfunction mapWorldToTreeData(): NodeModel<Object3D>[] {\r\n  const world = STATE.getWorld();\r\n  const dataArr: NodeModel<Object3D>[] = [];\r\n\r\n  /**\r\n   * helper mapping function\r\n   * @param {Object3D} obj\r\n   * @return {NodeModel}\r\n   */\r\n  function mapObjToArrayElement(obj: Object3D): NodeModel<Object3D> {\r\n    const parent = obj.getParent();\r\n    return {\r\n      id: obj.getId(),\r\n      parent: parent ? parent.getId() : 'root',\r\n      text: obj.getName(),\r\n      droppable: true,\r\n      data: obj,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * map all children\r\n   * @param {object3D} obj\r\n   */\r\n  function mapChildren(obj: Object3D): void {\r\n    dataArr.push(mapObjToArrayElement(obj));\r\n    obj.getChildrenList().forEach((child) => {\r\n      mapChildren(child);\r\n    });\r\n  }\r\n  if (world) {\r\n    /* world.getChildrenList().forEach((child) => {\r\n      mapChildren(child);\r\n    });*/\r\n    mapChildren(world);\r\n  }\r\n  return dataArr;\r\n}\r\n\r\n/**\r\n * Update parent-child hierarchy of objects\r\n * @param {NodeModel<Object3D>[]} treeData\r\n * @param {Object3D} world\r\n */\r\nfunction rearrangeHierarchyBasedOnTreeData(\r\n    treeData: NodeModel<Object3D>[], world: Object3D): void {\r\n  treeData.forEach((treeObj) => {\r\n    if (treeObj.data) {\r\n      const parentOfObj = treeObj.data.getParent();\r\n      if (parentOfObj && treeObj.parent !== parentOfObj.getId()) {\r\n        parentOfObj.removeChild(treeObj.data);\r\n        const newParent = treeData.find((obj) => obj.id === treeObj.parent);\r\n        if (newParent && newParent.data) {\r\n          newParent.data.addChild(treeObj.data);\r\n        }\r\n      }\r\n    }\r\n  });\r\n}\r\n","import WebGLU from 'WebGL/WebGlUtils';\r\nimport StandardRenderer from 'WebGL/Renderers/StandardRenderer';\r\nimport Camera from 'WebGL/Camera/Camera';\r\nimport Object3D from './Objects/Object3D';\r\nimport CameraController from './Camera/CameraController';\r\nimport WebGLMouseEvent from './Listeners/MouseEvent';\r\nimport WebGLKeyboardEvent from './Listeners/KeyboardEvent';\r\nimport {CanvasEvent} from './Listeners/CanvasEvent';\r\nimport {ConeBuilder} from './Objects/BasicMeshes/Cone';\r\nimport Mesh from './Objects/Mesh';\r\nimport {CircleBuilder} from './Objects/BasicMeshes/Circle';\r\nimport RayCaster, {Ray, RayCasterMode} from './Raycast/RayCaster';\r\nimport {CubeBuilder} from './Objects/BasicMeshes/Cube';\r\nimport ViewManagerInst, {ViewManager} from './Views/ViewManager';\r\nimport STATE from './State';\r\nimport {SPECIAL_MATERIALS} from './Objects/Material';\r\nimport {Transform} from './Objects/Transform';\r\n/**\r\n * WebGl\r\n */\r\nexport class WebGL {\r\n  private gl: WebGLRenderingContext | null;\r\n  private renderer : StandardRenderer | null;\r\n  private mainCamera : Camera | null;\r\n  private cameraController: CameraController | null;\r\n  private canvasEvent: CanvasEvent | null;\r\n  private raycaster : RayCaster | null;\r\n  private viewManager : ViewManager;\r\n  private world: Object3D;\r\n  private canvas: HTMLCanvasElement | null;\r\n\r\n  /**\r\n   * @param  {WebGLRenderingContext} context\r\n   */\r\n  constructor() {\r\n    this.gl = null;\r\n    this.renderer = null;\r\n    this.mainCamera = null;\r\n    this.cameraController = null;\r\n    this.canvasEvent = null;\r\n    this.raycaster = null;\r\n    this.canvas = null;\r\n    this.viewManager = ViewManagerInst;\r\n    this.world = new Object3D();\r\n    this.world.setName('root');\r\n  }\r\n\r\n  /**\r\n   * initialize program\r\n   * @param {WebGLRenderingContext} context\r\n   * @param {HTMLCanvasElement} canvas\r\n   * @param {CanvasEvent | null} canvasEvent\r\n   */\r\n  public init(context: WebGLRenderingContext, canvas: HTMLCanvasElement,\r\n      canvasEvent: CanvasEvent | null = null): void {\r\n    this.gl = context;\r\n    this.canvas = canvas;\r\n    this.canvasEvent = canvasEvent;\r\n    WebGLU.initUtils(this.gl, canvas);\r\n\r\n\r\n    const obj = new Object3D();\r\n    obj.setMesh(new Mesh(new CircleBuilder().setRadialSegments(4).build()));\r\n    const cObj = new Object3D();\r\n    cObj.setTransform(new Transform().setPositionInParent([2, 2, 2]));\r\n    cObj.setMesh(new Mesh(new CubeBuilder().build()));\r\n    obj.addChild(cObj);\r\n    this.world.addChild(obj);\r\n    const checker = new Object3D();\r\n    checker.setMesh(new Mesh(new CubeBuilder().setXHalfWidth(0.5)\r\n        .setYHalfWidth(0.5).setZHalfWidth(0.5).build()));\r\n    checker.setTransform(new Transform().setPositionInParent([0, 0, 5]));\r\n    this.world.addChild(checker);\r\n    // this.renderer = new StandardRenderer(this.mainCamera,\r\n    //    this.world/* new Gizmo().getGizmo()*/);\r\n    STATE.setWorld(this.world);\r\n    WebGLMouseEvent.init();\r\n    WebGLKeyboardEvent.init();\r\n    if (!this.canvasEvent) {\r\n      console.error('Canvas Event not initialized. Application shutdown.');\r\n      return;\r\n    }\r\n    SPECIAL_MATERIALS.init();\r\n    ViewManagerInst.init(canvasEvent as CanvasEvent);\r\n  }\r\n\r\n  /**\r\n  * @param {WebGLRenderingContext} context\r\n  */\r\n  public updateContext(context: WebGLRenderingContext) {\r\n    this.gl = context;\r\n    WebGLU.initUtils(this.gl, this.canvas as HTMLCanvasElement);\r\n    WebGLMouseEvent.init();\r\n    WebGLKeyboardEvent.init();\r\n  }\r\n\r\n  /**\r\n   * Init render loop\r\n   * @return {void}\r\n   */\r\n  intiRenderLoop(): void {\r\n    if (!this.gl) {\r\n      return;\r\n    }\r\n    window.requestAnimationFrame(this.render.bind(this));\r\n  }\r\n\r\n  /**\r\n   * Rendering function\r\n   * @return {void}\r\n   */\r\n  render(): void {\r\n    // WebGLU.clear(0., 0., 0., 1.0);\r\n\r\n\r\n    ViewManagerInst.renderViewWorld();\r\n\r\n    window.requestAnimationFrame(this.render.bind(this));\r\n  }\r\n}\r\n\r\nconst WebGLI = new WebGL();\r\n\r\nexport default WebGLI;\r\n","import WebGLEvent from 'WebGL/Listeners/WebGLEvent';\r\n\r\nexport interface CanvasListener {\r\n  onResize(x: number, y: number, width: number, height: number, id?: string);\r\n}\r\n\r\n/**\r\n * Class representing mouse events\r\n */\r\nexport class CanvasEvent extends WebGLEvent<CanvasListener> {\r\n  /**\r\n   * Triggers resize event\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @param {number} width\r\n   * @param {number} height\r\n   * @param {string} id\r\n   */\r\n  triggerOnResize(x: number, y: number,\r\n      width: number, height: number, id = ''): void {\r\n    this.getListeners().forEach((el) => {\r\n      el.onResize(x, y, width, height, id);\r\n    });\r\n    this.refresh();\r\n  }\r\n}\r\n\r\nconst WebGLCanvasEvent = new CanvasEvent();\r\n\r\nexport default WebGLCanvasEvent;\r\n","import React from 'react';\r\nimport {useContext, useState, useEffect, useCallback} from 'react';\r\nimport Frame from 'utils/Frame';\r\nimport ColorModeContext from 'contexts/ColorModeContext';\r\nimport {useResizeDetector} from 'react-resize-detector';\r\nimport WebGLI from 'WebGL/WebGl';\r\nimport WebGLCanvasEvent, {CanvasEvent} from 'WebGL/Listeners/CanvasEvent';\r\nimport WebGLU from 'WebGL/WebGlUtils';\r\nimport ViewManagerInst from 'WebGL/Views/ViewManager';\r\nimport AppModeContext from 'contexts/ModeContext';\r\nimport {AppMode} from 'components/modeNavBar/ModeNavBar';\r\n\r\nconst Viewport = (): JSX.Element => {\r\n  const color = useContext(ColorModeContext);\r\n  const appMode = useContext(AppModeContext);\r\n\r\n  const {width, height, ref} = useResizeDetector();\r\n  const [canvasEvent, setCanvasEvent] = useState<CanvasEvent | null>(null);\r\n\r\n\r\n  useEffect(() => {\r\n    const canvas = document.querySelector('#canvas') as HTMLCanvasElement;\r\n    const gl = canvas.getContext('webgl');\r\n    const canEvent = new CanvasEvent();\r\n    if (!gl) {\r\n      alert('WebGL not initialized properly.');\r\n      return;\r\n    }\r\n    setCanvasEvent(canEvent);\r\n    WebGLI.init(gl, canvas, canEvent);\r\n    WebGLI.intiRenderLoop();\r\n  }, []);\r\n  /*\r\n  useEffect(() => {\r\n    const canvas = document.querySelector('#canvas') as HTMLCanvasElement;\r\n    const gl = canvas.getContext('webgl');\r\n    if (!gl) {\r\n      alert('WebGL not initialized properly.');\r\n      return;\r\n    }\r\n    WebGLI.updateContext(gl);\r\n  });\r\n*/\r\n  useEffect(() => {\r\n    const canvas = document.querySelector('#canvas') as HTMLCanvasElement;\r\n    if (!canvasEvent) {\r\n      return;\r\n    }\r\n    canvasEvent.triggerOnResize(\r\n        window.scrollY + canvas.getBoundingClientRect().top,\r\n        window.scrollX + canvas.getBoundingClientRect().left,\r\n        canvas.width, canvas.height, 'canvas');\r\n  }, [width, height]);\r\n\r\n  /*\r\n  useEffect(() => {\r\n    console.log(canvasElement);\r\n    if (canvasElement) {\r\n      const ctx = canvasElement.getContext('2d');\r\n      if (ctx) {\r\n        ctx.font = '30px Arial';\r\n        ctx.fillRect(60, 60, 60, 60);\r\n      }\r\n    }\r\n\r\n    // const gl = canvasElement.getContext('webgl');\r\n  }, [width, height, canvasElement]);\r\n*/\r\n  return (\r\n    <Frame\r\n      backgroundColor={color?.colorMode.backgroundColor}\r\n      borderColor={color?.colorMode.accentColor}\r\n      borderWidth={2}\r\n      style={{\r\n        height: '100%',\r\n      }}>\r\n      <div\r\n        id=\"canvasFrame\"\r\n        ref={ref}\r\n        style={{\r\n          height: '100%',\r\n          width: '100%',\r\n          margin: 0,\r\n          position: 'relative',\r\n        }}\r\n      >\r\n        <div style={{\r\n          zIndex: 2,\r\n          position: 'absolute',\r\n          top: 0,\r\n        }}>\r\n          {ViewManagerInst.returnOnScreenMenu(\r\n            appMode ? appMode.appMode : AppMode.MainMode)}\r\n        </div>\r\n        <canvas\r\n          style={{\r\n            zIndex: 1,\r\n            position: 'absolute',\r\n            top: '0',\r\n            left: '0',\r\n            right: '0',\r\n            bottom: '0',\r\n          }}\r\n          id=\"canvas\"\r\n          width={width}\r\n          height={height}\r\n        >\r\n        </canvas>\r\n      </div>\r\n    </Frame>\r\n  );\r\n};\r\n\r\nViewport.displayName = 'Viewport';\r\n\r\nexport default Viewport;\r\n","import ColorModeContext from 'contexts/ColorModeContext';\r\nimport {vec4} from 'gl-matrix';\r\nimport React, {useContext, useEffect, useRef, useState} from 'react';\r\nimport {CardBody, Property} from 'utils/GUI/Panels';\r\nimport STATE from 'WebGL/State';\r\nimport {SketchPicker} from 'react-color';\r\nimport ModalSystemContext from 'contexts/ModalSystemContext';\r\nimport colorConverter from 'color-convert';\r\nimport {RefreshMechanism} from 'contexts/RefresherContext';\r\n\r\ninterface ColorInt {\r\n  hex: string;\r\n  rgb: {\r\n    r: number;\r\n    g: number;\r\n    b: number;\r\n    a: number;\r\n  },\r\n  hsl: {\r\n    h: number;\r\n    s: number;\r\n    l: number;\r\n    a: number;\r\n  },\r\n}\r\nconst DEFAULT_COLOR: ColorInt = {\r\n  hex: '#000',\r\n  rgb: {\r\n    r: 0,\r\n    g: 0,\r\n    b: 0,\r\n    a: 1,\r\n  },\r\n  hsl: {\r\n    h: 0,\r\n    s: 0,\r\n    l: 0,\r\n    a: 1,\r\n  },\r\n};\r\n\r\nconst getColorFromSelectedObj = (): ColorInt => {\r\n  const obj = STATE.getSelectedObject();\r\n  if (!obj) return DEFAULT_COLOR;\r\n\r\n  const colorVec4 = obj.getMaterial().getFaceMaterial().getColor();\r\n  const rgbaObj = {\r\n    r: Math.trunc(colorVec4[0]*255),\r\n    g: Math.trunc(colorVec4[1]*255),\r\n    b: Math.trunc(colorVec4[2]*255),\r\n    a: colorVec4[3],\r\n  };\r\n  const hslArr = colorConverter.rgb.hsl(rgbaObj.r, rgbaObj.g, rgbaObj.b);\r\n\r\n  const hslaObj = {\r\n    h: hslArr[0],\r\n    s: hslArr[1],\r\n    l: hslArr[2],\r\n    a: colorVec4[3],\r\n  };\r\n\r\n  return {\r\n    hex: '#' + colorConverter.rgb.hex(rgbaObj.r, rgbaObj.g, rgbaObj.b),\r\n    rgb: rgbaObj,\r\n    hsl: hslaObj,\r\n  };\r\n};\r\n\r\nconst MaterialProps = (): JSX.Element=> {\r\n  const refreshResponse = useContext(RefreshMechanism);\r\n  const colorModeCtx = useContext(ColorModeContext);\r\n  const modalSystem = useContext(ModalSystemContext);\r\n  const [chosenColor, setChosenColor] = useState(getColorFromSelectedObj());\r\n  const [isColorPickerDisplayed, setIsColorPickerDisplayed] = useState(false);\r\n  const colorPrev = useRef<ColorInt | null>(null);\r\n\r\n  useEffect(() => {\r\n    if (modalSystem?.isOpen && isColorPickerDisplayed) {\r\n      setupPickerModal();\r\n    }\r\n  }, [chosenColor, modalSystem?.isOpen, isColorPickerDisplayed]);\r\n\r\n  useEffect(() => {\r\n    if (isColorPickerDisplayed) {\r\n      setIsColorPickerDisplayed(modalSystem ? modalSystem.isOpen : false);\r\n    }\r\n  }, [modalSystem?.isOpen]);\r\n\r\n  useEffect(() => {\r\n    setChosenColor(getColorFromSelectedObj());\r\n  }, [, refreshResponse]);\r\n\r\n  const setupPickerModal = () => {\r\n    modalSystem?.setModalData({\r\n      header: 'Choose color',\r\n      body: (\r\n        <div>\r\n          <SketchPicker\r\n            color={chosenColor.rgb}\r\n            width={'auto'}\r\n            onChange={(color) => {\r\n              setChosenColor(color);\r\n            }}\r\n          />\r\n        </div>\r\n      ),\r\n      onClose: () => {\r\n        setChosenColor(\r\n          colorPrev.current ? colorPrev.current : DEFAULT_COLOR,\r\n        );\r\n        return true;\r\n      },\r\n      onCancel: () => {\r\n        setChosenColor(\r\n          colorPrev.current ? colorPrev.current : DEFAULT_COLOR,\r\n        );\r\n        return true;\r\n      },\r\n      onOk: () => {\r\n        STATE.getSelectedObject()?.getMaterial()\r\n            .getFaceMaterial().setColor([\r\n              chosenColor.rgb.r/255,\r\n              chosenColor.rgb.g/255,\r\n              chosenColor.rgb.b/255,\r\n              chosenColor.rgb.a,\r\n            ] as vec4);\r\n        return true;\r\n      },\r\n    });\r\n  };\r\n\r\n  return (<CardBody>\r\n    <Property label='albedo'>\r\n      <span\r\n        onClick={() => {\r\n          setupPickerModal();\r\n          modalSystem?.open();\r\n          colorPrev.current = chosenColor;\r\n          setIsColorPickerDisplayed(true);\r\n        }}\r\n        style={{\r\n          alignSelf: 'center',\r\n          backgroundColor: chosenColor.hex,\r\n          width: '1em',\r\n          height: '1em',\r\n          borderStyle: 'solid',\r\n          borderWidth: '2px',\r\n          borderRadius: '2px',\r\n          borderColor: colorModeCtx?.colorMode.accentColor,\r\n        }}\r\n      />\r\n    </Property>\r\n  </CardBody>);\r\n};\r\n\r\nexport default MaterialProps;\r\n","import {RefreshMechanism} from 'contexts/RefresherContext';\r\nimport React, {useContext, useEffect, useState} from 'react';\r\nimport {CheckboxProperty} from 'utils/GUI/GUIUtils';\r\nimport {CardBody, Property} from 'utils/GUI/Panels';\r\nimport STATE from 'WebGL/State';\r\n\r\nconst initCheckbox = (): {exists: boolean, isEnabled: boolean} => {\r\n  const obj = STATE.getSelectedObject();\r\n  if (!obj) {\r\n    return {exists: false, isEnabled: false};\r\n  }\r\n\r\n  const mesh = obj.getMesh();\r\n  if (!mesh) {\r\n    return {exists: false, isEnabled: false};\r\n  }\r\n\r\n  return {exists: true, isEnabled: mesh.isEnabled()};\r\n};\r\n\r\nconst MeshProps = (): JSX.Element => {\r\n  const refreshResponse = useContext(RefreshMechanism);\r\n  const [info, setInfo] = useState(initCheckbox());\r\n  const [checked, setChecked] = useState(info.isEnabled);\r\n\r\n  useEffect(() => {\r\n    const newInfo = initCheckbox();\r\n    setInfo(newInfo);\r\n    setChecked(newInfo.isEnabled);\r\n  }, [, refreshResponse]);\r\n\r\n  return (\r\n    <CardBody>\r\n      <Property label='show mesh'>\r\n        <CheckboxProperty\r\n          checked={checked}\r\n          disabled={!info.exists}\r\n          onChange={(e) => {\r\n            setChecked(e.target.checked);\r\n            STATE.getSelectedObject()?.getMesh()?.\r\n                enableDisable(e.target.checked);\r\n          }}\r\n        />\r\n      </Property>\r\n    </CardBody>\r\n  );\r\n};\r\n\r\nexport default MeshProps;\r\n","import React, {useContext, useEffect, useState} from 'react';\r\nimport {FormFeedback} from 'reactstrap';\r\nimport {ContainerWithRows, ContainerWithColumns,\r\n  InputPropertyWithConfirm, InputProperty}\r\n  from 'utils/GUI/GUIUtils';\r\nimport {Property} from 'utils/GUI/Panels';\r\n\r\nimport 'styles/guiUtilsStyles.css';\r\nimport STATE from 'WebGL/State';\r\nimport {Refresher, RefreshMechanism} from 'contexts/RefresherContext';\r\n\r\nconst ObjectDetailsProps = (): JSX.Element => {\r\n  const refreshResponse = useContext(RefreshMechanism);\r\n  const refresher = useContext(Refresher);\r\n  const [newName, setNewName] = useState('');\r\n  const [oldName, setOldName] = useState('');\r\n  const [isNameInvalid, setIsNameInvalid] = useState(false);\r\n\r\n  const onNewNameConfirm =\r\n  (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\r\n    if (newName) {\r\n      const obj = STATE.getSelectedObject();\r\n      if (obj && refresher) {\r\n        obj.setName(newName);\r\n        setNewName('');\r\n        refresher.refresh();\r\n      }\r\n    } else {\r\n      setIsNameInvalid(true);\r\n    }\r\n  };\r\n\r\n  const onNewNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setIsNameInvalid(false);\r\n    setNewName(event.target.value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const obj = STATE.getSelectedObject();\r\n    if (obj) {\r\n      setOldName(obj.getName());\r\n    }\r\n  }, [, refreshResponse]);\r\n\r\n  return (\r\n    <Property label='Object name'>\r\n      <ContainerWithRows>\r\n        <InputProperty\r\n          className='mb-1'\r\n          disabled\r\n          value={oldName}/>\r\n        <ContainerWithColumns>\r\n          <InputPropertyWithConfirm\r\n            invalid={isNameInvalid}\r\n            onChange={onNewNameChange}\r\n            onConfirm={onNewNameConfirm}\r\n            onFocus={() => setNewName('')}\r\n            value={newName}\r\n          />\r\n        </ContainerWithColumns>\r\n        <FormFeedback\r\n          className='input-error'\r\n          style={{\r\n            display: isNameInvalid ? 'block' : 'none',\r\n          }}\r\n        >\r\n          Provided value is invalid\r\n        </FormFeedback>\r\n      </ContainerWithRows>\r\n    </Property>\r\n  );\r\n};\r\n\r\nexport default ObjectDetailsProps;\r\n","import ColorModeContext from 'contexts/ColorModeContext';\r\nimport ModalSystemContext from 'contexts/ModalSystemContext';\r\nimport {RefreshMechanism} from 'contexts/RefresherContext';\r\nimport {vec3} from 'gl-matrix';\r\nimport React, {useContext, useEffect, useState} from 'react';\r\nimport {FormFeedback} from 'reactstrap';\r\nimport {CheckboxProperty, ContainerWithRows,\r\n  InputProperty} from 'utils/GUI/GUIUtils';\r\nimport {CardBody, CardBodyMainLabel,\r\n  PanelBody, Property} from 'utils/GUI/Panels';\r\nimport Object3D from 'WebGL/Objects/Object3D';\r\nimport STATE from 'WebGL/State';\r\nimport {toDegrees, toRadians} from 'WebGL/utils.ts/Math';\r\nimport ViewManagerInst from 'WebGL/Views/ViewManager';\r\nimport MaterialProps from './MaterialProps';\r\nimport MeshProps from './MeshProps';\r\nimport ObjectDetailsProps from './ObjectDetailsProps';\r\n\r\nimport 'styles/guiUtilsStyles.css';\r\n\r\nconst InvalidValueInfo = ({invalid}: {invalid: boolean}) => {\r\n  return (\r\n    <FormFeedback className='input-error'>\r\n      Provided value is invalid\r\n    </FormFeedback>\r\n  );\r\n};\r\n\r\nconst ObjectTreeNodeWindow = (): JSX.Element => {\r\n  const colorModeCtx = useContext(ColorModeContext);\r\n  const modalSystem = useContext(ModalSystemContext);\r\n  const refresh = useContext(RefreshMechanism);\r\n\r\n  const [currObj, setCurrObj] = useState<null | Object3D>(null);\r\n\r\n  const [localRefresh, setLocalRefresh] = useState(false);\r\n\r\n  const [posXInvalid, setPosXInvalid] = useState(false);\r\n  const [posYInvalid, setPosYInvalid] = useState(false);\r\n  const [posZInvalid, setPosZInvalid] = useState(false);\r\n\r\n  const [posRenderInput, setPosRenderInput] =\r\n    useState<[string, string, string]>(['', '', '']);\r\n\r\n  const [orientXInvalid, setOrientXInvalid] = useState(false);\r\n  const [orientYInvalid, setOrientYInvalid] = useState(false);\r\n  const [orientZInvalid, setOrientZInvalid] = useState(false);\r\n\r\n  const [orientRenderInput, setOrientRenderInput] =\r\n    useState<[string, string, string]>(['', '', '']);\r\n\r\n  const [scaleXInvalid, setScaleXInvalid] = useState(false);\r\n  const [scaleYInvalid, setScaleYInvalid] = useState(false);\r\n  const [scaleZInvalid, setScaleZInvalid] = useState(false);\r\n\r\n  const [scaleRenderInput, setScaleRenderInput] =\r\n    useState<[string, string, string]>(['', '', '']);\r\n\r\n  const refreshLocally = () => {\r\n    setLocalRefresh(!localRefresh);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const obj = STATE.getSelectedObject();\r\n    if (currObj !== obj) {\r\n      setCurrObj(obj);\r\n    }\r\n    setPosRenderInput([\r\n      obj ? obj.getTransform().getPositionInParent()[0].toString() : '',\r\n      obj ? obj.getTransform().getPositionInParent()[1].toString() : '',\r\n      obj ? obj.getTransform().getPositionInParent()[2].toString() : '',\r\n    ]);\r\n    setOrientRenderInput([\r\n      obj ? toDegrees(obj.getTransform().getOrientationInParent()[0])\r\n          .toString() : '',\r\n      obj ? toDegrees(obj.getTransform().getOrientationInParent()[1])\r\n          .toString() : '',\r\n      obj ? toDegrees(obj.getTransform().getOrientationInParent()[2])\r\n          .toString() : '',\r\n    ]);\r\n    setScaleRenderInput([\r\n      obj ? obj.getTransform().getScaleInParent()[0].toString() : '',\r\n      obj ? obj.getTransform().getScaleInParent()[1].toString() : '',\r\n      obj ? obj.getTransform().getScaleInParent()[2].toString() : '',\r\n    ]);\r\n\r\n    posXInvalid && setPosXInvalid(false);\r\n    posYInvalid && setPosYInvalid(false);\r\n    posZInvalid && setPosZInvalid(false);\r\n\r\n    orientXInvalid && setOrientXInvalid(false);\r\n    orientYInvalid && setOrientYInvalid(false);\r\n    orientZInvalid && setOrientZInvalid(false);\r\n\r\n    scaleXInvalid && setScaleXInvalid(false);\r\n    scaleYInvalid && setScaleYInvalid(false);\r\n    scaleZInvalid && setScaleZInvalid(false);\r\n  }, [refresh]);\r\n\r\n  const changeObjNumberProp = (\r\n      event: React.FormEvent<HTMLInputElement>,\r\n      signalError: React.Dispatch<React.SetStateAction<boolean>>,\r\n      index: 0 | 1 | 2,\r\n      getValues: () => vec3,\r\n      setValues: (v: vec3) => void,\r\n      inputVals: [string, string, string],\r\n      setInputVals:\r\n        React.Dispatch<React.SetStateAction<[string, string, string]>>,\r\n      defaultValue: number,\r\n      transformValueFunction?: ((n: number) => number) | undefined,\r\n  ):void => {\r\n    const value = event.currentTarget.value;\r\n    const valueNum = parseFloat(value);\r\n    const oldValues = getValues();\r\n\r\n    setInputVals([\r\n      index === 0 ? value : inputVals[0],\r\n      index === 1 ? value : inputVals[1],\r\n      index === 2 ? value : inputVals[2],\r\n    ]);\r\n    if (isNaN(valueNum)) {\r\n      signalError(true);\r\n      setValues([\r\n        index === 0 ? (transformValueFunction ?\r\n          transformValueFunction(defaultValue) : defaultValue) : oldValues[0],\r\n        index === 1 ? (transformValueFunction ?\r\n          transformValueFunction(defaultValue) : defaultValue) : oldValues[1],\r\n        index === 2 ? (transformValueFunction ?\r\n          transformValueFunction(defaultValue) : defaultValue) : oldValues[2],\r\n      ] as vec3);\r\n    } else {\r\n      setValues([\r\n        index === 0 ? (transformValueFunction ?\r\n          transformValueFunction(valueNum) : valueNum) : oldValues[0],\r\n        index === 1 ? (transformValueFunction ?\r\n          transformValueFunction(valueNum) : valueNum) : oldValues[1],\r\n        index === 2 ? (transformValueFunction ?\r\n          transformValueFunction(valueNum) : valueNum) : oldValues[2],\r\n      ] as vec3);\r\n      signalError(false);\r\n      refreshLocally();\r\n    }\r\n  };\r\n\r\n\r\n  if (!currObj) {\r\n    return (\r\n      <PanelBody>\r\n      </PanelBody>\r\n    );\r\n  }\r\n  return (\r\n    <PanelBody>\r\n      {\r\n        (STATE.getSelectedObject() !== STATE.getWorld()) &&\r\n        <>\r\n          <CardBodyMainLabel className='mg-b--em'>\r\n            Details\r\n          </CardBodyMainLabel>\r\n          <CardBody>\r\n            <ObjectDetailsProps/>\r\n          </CardBody>\r\n        </>\r\n      }\r\n\r\n      <CardBodyMainLabel className='mg-t--em'>\r\n        Transformations\r\n      </CardBodyMainLabel>\r\n      <CardBody title='position'>\r\n        <Property label='x'>\r\n          <ContainerWithRows>\r\n            <InputProperty\r\n              invalid={posXInvalid}\r\n              value={posRenderInput[0]}\r\n              onChange={(e) => {\r\n                changeObjNumberProp(\r\n                    e,\r\n                    setPosXInvalid,\r\n                    0,\r\n                    currObj.getTransform().getPositionInParent\r\n                        .bind(currObj.getTransform()),\r\n                    currObj.getTransform().setPositionInParent\r\n                        .bind(currObj.getTransform()),\r\n                    posRenderInput,\r\n                    setPosRenderInput,\r\n                    0,\r\n                );\r\n                const mainView = ViewManagerInst.returnView() as any;\r\n                if (mainView && mainView.recalculateGizmoPosition) {\r\n                  mainView.recalculateGizmoPosition();\r\n                }\r\n              }}\r\n            />\r\n            <InvalidValueInfo invalid={posXInvalid}/>\r\n          </ContainerWithRows>\r\n        </Property>\r\n        <Property label='y'>\r\n          <ContainerWithRows>\r\n            <InputProperty\r\n              invalid={posYInvalid}\r\n              value={posRenderInput[1]}\r\n              onChange={(e) => {\r\n                changeObjNumberProp(\r\n                    e,\r\n                    setPosYInvalid,\r\n                    1,\r\n                    currObj.getTransform().getPositionInParent\r\n                        .bind(currObj.getTransform()),\r\n                    currObj.getTransform().setPositionInParent\r\n                        .bind(currObj.getTransform()),\r\n                    posRenderInput,\r\n                    setPosRenderInput,\r\n                    0,\r\n                );\r\n                const mainView = ViewManagerInst.returnView() as any;\r\n                if (mainView && mainView.recalculateGizmoPosition) {\r\n                  mainView.recalculateGizmoPosition();\r\n                }\r\n              }}\r\n            />\r\n            <InvalidValueInfo invalid={posYInvalid}/>\r\n          </ContainerWithRows>\r\n        </Property>\r\n        <Property label='z'>\r\n          <ContainerWithRows>\r\n            <InputProperty\r\n              invalid={posZInvalid}\r\n              value={posRenderInput[2]}\r\n              onChange={(e) => {\r\n                changeObjNumberProp(\r\n                    e,\r\n                    setPosZInvalid,\r\n                    2,\r\n                    currObj.getTransform().getPositionInParent\r\n                        .bind(currObj.getTransform()),\r\n                    currObj.getTransform().setPositionInParent\r\n                        .bind(currObj.getTransform()),\r\n                    posRenderInput,\r\n                    setPosRenderInput,\r\n                    0,\r\n                );\r\n                const mainView = ViewManagerInst.returnView() as any;\r\n                if (mainView && mainView.recalculateGizmoPosition) {\r\n                  mainView.recalculateGizmoPosition();\r\n                }\r\n              }}\r\n            />\r\n            <InvalidValueInfo invalid={posZInvalid}/>\r\n          </ContainerWithRows>\r\n        </Property>\r\n      </CardBody>\r\n\r\n\r\n      <CardBody title='orientation'>\r\n        <Property label='x'>\r\n          <ContainerWithRows>\r\n            <InputProperty\r\n              invalid={orientXInvalid}\r\n              value={orientRenderInput[0]}\r\n              onChange={(e) => {\r\n                changeObjNumberProp(\r\n                    e,\r\n                    setOrientXInvalid,\r\n                    0,\r\n                    currObj.getTransform().getOrientationInParent\r\n                        .bind(currObj.getTransform()),\r\n                    currObj.getTransform().setOrientationInParent\r\n                        .bind(currObj.getTransform()),\r\n                    orientRenderInput,\r\n                    setOrientRenderInput,\r\n                    0,\r\n                    toRadians,\r\n                );\r\n              }}\r\n            />\r\n            <InvalidValueInfo invalid={orientXInvalid}/>\r\n          </ContainerWithRows>\r\n        </Property>\r\n        <Property label='y'>\r\n          <ContainerWithRows>\r\n            <InputProperty\r\n              invalid={orientYInvalid}\r\n              value={orientRenderInput[1]}\r\n              onChange={(e) => {\r\n                changeObjNumberProp(\r\n                    e,\r\n                    setOrientYInvalid,\r\n                    1,\r\n                    currObj.getTransform().getOrientationInParent\r\n                        .bind(currObj.getTransform()),\r\n                    currObj.getTransform().setOrientationInParent\r\n                        .bind(currObj.getTransform()),\r\n                    orientRenderInput,\r\n                    setOrientRenderInput,\r\n                    0,\r\n                    toRadians,\r\n                );\r\n              }}\r\n            />\r\n            <InvalidValueInfo invalid={orientYInvalid}/>\r\n          </ContainerWithRows>\r\n        </Property>\r\n        <Property label='z'>\r\n          <ContainerWithRows>\r\n            <InputProperty\r\n              invalid={orientZInvalid}\r\n              value={orientRenderInput[2]}\r\n              onChange={(e) => {\r\n                changeObjNumberProp(\r\n                    e,\r\n                    setOrientZInvalid,\r\n                    2,\r\n                    currObj.getTransform().getOrientationInParent\r\n                        .bind(currObj.getTransform()),\r\n                    currObj.getTransform().setOrientationInParent\r\n                        .bind(currObj.getTransform()),\r\n                    orientRenderInput,\r\n                    setOrientRenderInput,\r\n                    0,\r\n                    toRadians,\r\n                );\r\n              }}\r\n            />\r\n            <InvalidValueInfo invalid={orientZInvalid}/>\r\n          </ContainerWithRows>\r\n        </Property>\r\n      </CardBody>\r\n\r\n\r\n      <CardBody title='scale'>\r\n        <Property label='x'>\r\n          <ContainerWithRows>\r\n            <InputProperty\r\n              invalid={scaleXInvalid}\r\n              value={scaleRenderInput[0]}\r\n              onChange={(e) => {\r\n                changeObjNumberProp(\r\n                    e,\r\n                    setScaleXInvalid,\r\n                    0,\r\n                    currObj.getTransform().getScaleInParent\r\n                        .bind(currObj.getTransform()),\r\n                    currObj.getTransform().setScaleInParent\r\n                        .bind(currObj.getTransform()),\r\n                    scaleRenderInput,\r\n                    setScaleRenderInput,\r\n                    1,\r\n                );\r\n              }}\r\n            />\r\n            <InvalidValueInfo invalid={scaleXInvalid}/>\r\n          </ContainerWithRows>\r\n        </Property>\r\n        <Property label='y'>\r\n          <ContainerWithRows>\r\n            <InputProperty\r\n              invalid={scaleYInvalid}\r\n              value={scaleRenderInput[1]}\r\n              onChange={(e) => {\r\n                changeObjNumberProp(\r\n                    e,\r\n                    setScaleYInvalid,\r\n                    1,\r\n                    currObj.getTransform().getScaleInParent\r\n                        .bind(currObj.getTransform()),\r\n                    currObj.getTransform().setScaleInParent\r\n                        .bind(currObj.getTransform()),\r\n                    scaleRenderInput,\r\n                    setScaleRenderInput,\r\n                    1,\r\n                );\r\n              }}\r\n            />\r\n            <InvalidValueInfo invalid={scaleYInvalid}/>\r\n          </ContainerWithRows>\r\n        </Property>\r\n        <Property label='z'>\r\n          <ContainerWithRows>\r\n            <InputProperty\r\n              invalid={scaleZInvalid}\r\n              value={scaleRenderInput[2]}\r\n              onChange={(e) => {\r\n                changeObjNumberProp(\r\n                    e,\r\n                    setScaleZInvalid,\r\n                    2,\r\n                    currObj.getTransform().getScaleInParent\r\n                        .bind(currObj.getTransform()),\r\n                    currObj.getTransform().setScaleInParent\r\n                        .bind(currObj.getTransform()),\r\n                    scaleRenderInput,\r\n                    setScaleRenderInput,\r\n                    1,\r\n                );\r\n              }}\r\n            />\r\n            <InvalidValueInfo invalid={scaleZInvalid}/>\r\n          </ContainerWithRows>\r\n        </Property>\r\n      </CardBody>\r\n\r\n      <CardBodyMainLabel className='mg-t--em mg-b--em'>\r\n        Mesh\r\n      </CardBodyMainLabel>\r\n      <MeshProps/>\r\n\r\n      <CardBodyMainLabel className='mg-t--em mg-b--em'>\r\n        Material\r\n      </CardBodyMainLabel>\r\n      <MaterialProps/>\r\n    </PanelBody>\r\n  );\r\n};\r\n\r\nexport default ObjectTreeNodeWindow;\r\n","import React, {useContext, useEffect, useState} from 'react';\r\nimport Frame from 'utils/Frame';\r\nimport Colors from 'utils/Colors';\r\nimport ToolsManagerInst from 'components/toolsWIndow/ToolsManager';\r\nimport {PanelBody} from 'utils/GUI/Panels';\r\nimport {RefreshMechanism} from 'contexts/RefresherContext';\r\nimport Drawer from './Drawer';\r\nimport ColorModeContext from 'contexts/ColorModeContext';\r\n\r\n\r\nconst ToolsPropertiesWindow = (): JSX.Element=> {\r\n  const refreshMechanism = useContext(RefreshMechanism);\r\n  const colorModeCtx = useContext(ColorModeContext);\r\n  const [rerender, setRerender] = useState(true);\r\n  /*\r\n  useEffect(() =>{\r\n    if (rerender) {\r\n      setRerender(false);\r\n    }\r\n  }, [refreshMechanism]);\r\n\r\n  useEffect(() =>{\r\n    if (!rerender) {\r\n      setRerender(true);\r\n    }\r\n  }, [rerender]);*/\r\n  /* let comp: (() => JSX.Element) | undefined = undefined;\r\n  if (ToolsManagerInst.getSelectedTool()) {\r\n    comp = (ToolsManagerInst.getSelectedTool()?.renderToolPropertiesCard);\r\n  }*/\r\n  const tool = ToolsManagerInst.getSelectedTool();\r\n  const comp = tool ? tool.renderToolPropertiesCard() : (<></>);\r\n  return (\r\n    <Frame\r\n      style={{\r\n        height: '100%',\r\n        backgroundColor: colorModeCtx?.colorMode.backgroundColor,\r\n      }}\r\n    >\r\n      <PanelBody>\r\n        {rerender && tool !== null ?\r\n          comp :\r\n          <div/>\r\n        }\r\n      </PanelBody>\r\n    </Frame>\r\n  );\r\n};\r\n\r\nexport default ToolsPropertiesWindow;\r\n","import React from 'react';\r\nimport {useContext} from 'react';\r\nimport Frame from 'utils/Frame';\r\nimport Colors from 'utils/Colors';\r\nimport ColorModeContext from 'contexts/ColorModeContext';\r\n\r\n\r\nconst StatusFooter = () => {\r\n  const color = useContext(ColorModeContext);\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        width: '100%',\r\n\r\n      }}>\r\n      <Frame\r\n        backgroundColor={color?.colorMode.backgroundColor}\r\n        borderColor={color?.colorMode.accentColor}\r\n        borderWidth={2}>\r\n                &nbsp;\r\n      </Frame>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StatusFooter;\r\n","import {Refresher, RefreshMechanism} from 'contexts/RefresherContext';\r\nimport React, {ReactNode} from 'react';\r\nimport GLOBAL_COMPONENTS_REFRESH_EVENT,\r\n{RefreshListener} from 'utils/RefreshEvent';\r\n\r\ninterface RefresherCompProps {\r\n  children: ReactNode;\r\n}\r\n\r\ninterface RefresherCompState {\r\n  refreshVal: boolean;\r\n}\r\n\r\n\r\n/**\r\n *\r\n */\r\nexport default class RefresherComp extends\r\n  React.Component<RefresherCompProps, RefresherCompState>\r\n  implements RefreshListener {\r\n  state = {\r\n    refreshVal: false,\r\n  };\r\n\r\n  /**\r\n   * @param {{children: ReactNode}} props\r\n   */\r\n  constructor(props: {children: ReactNode}) {\r\n    super(props);\r\n    GLOBAL_COMPONENTS_REFRESH_EVENT.subscribe(this);\r\n  }\r\n\r\n\r\n  /**\r\n   */\r\n  onRefresh(): void {\r\n    this.setState({\r\n      refreshVal: !this.state.refreshVal,\r\n    });\r\n  }\r\n\r\n\r\n  /**\r\n   * @return {JSX.Element}\r\n   */\r\n  render(): JSX.Element {\r\n    return (\r\n      <>\r\n        <RefreshMechanism.Provider value={{value: this.state.refreshVal}}>\r\n          <Refresher.Provider\r\n            value={{refresh: () => this.setState({\r\n              refreshVal: !this.state.refreshVal,\r\n            })}}\r\n          >\r\n            {this.props.children}\r\n          </Refresher.Provider>\r\n        </RefreshMechanism.Provider>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import ModalSystemContext from 'contexts/ModalSystemContext';\r\nimport React, {useState} from 'react';\r\nimport {Modal, ModalHeader, ModalBody, ModalFooter, Button,\r\n  ModalProps} from 'reactstrap';\r\nimport {StandardReactPropsInt} from 'utils/GUI/Standard';\r\n\r\nexport interface ModalDataInt {\r\n  header?: string;\r\n  body?: JSX.Element;\r\n  onOk?: ((event: React.MouseEvent<Element, MouseEvent>) =>\r\n    boolean) | undefined;\r\n  onCancel?: ((event: React.MouseEvent<Element, MouseEvent>) =>\r\n    boolean) | undefined;\r\n  onClose?: ((event: React.MouseEvent<Element, MouseEvent>) =>\r\n    boolean) | undefined;\r\n  modalSettings?: ModalProps | undefined;\r\n}\r\n\r\nconst ModalSystem = (props: StandardReactPropsInt): JSX.Element => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [modalData, setModalData] = useState<ModalDataInt | null>(null);\r\n  return (\r\n    <ModalSystemContext.Provider value={{\r\n      open: () => setIsOpen(true),\r\n      setModalData: setModalData,\r\n      isOpen: isOpen,\r\n    }}>\r\n      <Modal\r\n        {...(modalData && modalData.modalSettings ?\r\n          modalData.modalSettings : {})}\r\n        isOpen={isOpen}\r\n        toggle={() => setIsOpen(!isOpen)}\r\n        className={props.className}\r\n        style={props.style}\r\n        returnFocusAfterClose={false}\r\n      >\r\n        <ModalHeader toggle={(e) => {\r\n          let close = true;\r\n          if (modalData && modalData.onClose) close = modalData.onClose(e);\r\n          if (close) setIsOpen(!isOpen);\r\n        }}\r\n        >\r\n          {modalData && modalData.header ? modalData.header : ''}\r\n        </ModalHeader>\r\n        <ModalBody>\r\n          {modalData && modalData.body ? modalData.body : ''}\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"primary\" onClick={(e) => {\r\n            let close = true;\r\n            if (modalData && modalData.onOk) close = modalData.onOk(e);\r\n            if (close) setIsOpen(!isOpen);\r\n          }}\r\n          >\r\n            Ok\r\n          </Button>{' '}\r\n          <Button color=\"secondary\" onClick={(e) => {\r\n            let close = true;\r\n            if (modalData && modalData.onCancel) close = modalData.onCancel(e);\r\n            if (close) setIsOpen(!isOpen);\r\n          }}\r\n          >\r\n            Cancel\r\n          </Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n      {props.children}\r\n    </ModalSystemContext.Provider>\r\n  );\r\n};\r\n\r\nexport default ModalSystem;\r\n","import React, {useContext} from 'react';\r\nimport {useState, useEffect} from 'react';\r\n\r\nimport {Resizable} from 'react-resizable';\r\nimport {Element} from 'react-scroll';\r\nimport {LoremIpsum} from 'react-lorem-ipsum';\r\n\r\n\r\nimport MainNavBar from 'components/mainNavBar/MainNavBar';\r\nimport ModeNavBar, {AppMode} from 'components/modeNavBar/ModeNavBar';\r\nimport ToolsWindow from 'components/toolsWIndow/ToolsWindow';\r\nimport ObjectTreeNodeWindow\r\n  from 'components/objectTreeNodeWIndow/ObjectTreeNodeWindow';\r\nimport Viewport from 'components/viewport/Viewport';\r\nimport ObjectPropertiesWindow from\r\n  'components/objectPropertiesWindow/ObjectPropertiesWindow';\r\nimport ToolsPropertiesWindow from\r\n  'components/toolsPropertiesWindow/ToolsPropertiesWindow';\r\nimport StatusFooter from\r\n  'components/footer/StatusFooter';\r\nimport ModeContext from 'contexts/ModeContext';\r\nimport EditModeContext from 'contexts/EditModeContext';\r\nimport {EditViewMode} from 'WebGL/Views/EditView';\r\nimport {PanelTitle} from 'utils/GUI/Panels';\r\nimport {Refresher, RefreshMechanism} from 'contexts/RefresherContext';\r\nimport ColorModeContext from 'contexts/ColorModeContext';\r\nimport RefresherComp from './Refresher';\r\nimport ModalSystem from './ModalSystem';\r\n\r\n// TODO depend these on the screen size\r\nconst initMenusWidth = 300;\r\nconst menuMinHorSize = 100;\r\nconst viewportMinSize = 300;\r\nconst menuMinVerSize = 100;\r\n\r\n\r\nconst Main = (): JSX.Element => {\r\n  const [{widthLeftHor, heightLeftHor}, setDimLeftHor] =\r\n    useState({widthLeftHor: initMenusWidth, heightLeftHor: initMenusWidth});\r\n  const [{widthLeftVer, heightLeftVer}, setDimLeftVer] =\r\n    useState({widthLeftVer: initMenusWidth, heightLeftVer: initMenusWidth});\r\n  const [{widthRightHor, heightRightHor}, setDimRightHor] =\r\n    useState({widthRightHor: initMenusWidth, heightRightHor: initMenusWidth});\r\n  const [{widthRightVer, heightRightVer}, setDimRightVer] =\r\n    useState({widthRightVer: initMenusWidth, heightRightVer: initMenusWidth});\r\n\r\n  const [{subWindowWidth, subWindowHeight}, setDimSubWindow] =\r\n    useState({subWindowWidth: 0, subWindowHeight: 0});\r\n\r\n\r\n  const [viewMode, setViewMode] = useState(AppMode.MainMode);\r\n  const [editViewMode, setEditViewMode] = useState(EditViewMode.point);\r\n  const [refreshValue, setRefreshValue] = useState(false);\r\n\r\n\r\n  const onResizeLeftHor = (event, {element, size, handle}) => {\r\n    if (size.width + widthRightHor + viewportMinSize < subWindowWidth &&\r\n        size.width > menuMinHorSize) {\r\n      setDimLeftHor({widthLeftHor: size.width, heightLeftHor: size.height});\r\n    }\r\n  };\r\n\r\n  const onResizeLeftVer = (event, {element, size, handle}) => {\r\n    if (size.height > menuMinVerSize &&\r\n        subWindowHeight - size.height > menuMinVerSize) {\r\n      setDimLeftVer({widthLeftVer: size.width, heightLeftVer: size.height});\r\n    }\r\n  };\r\n\r\n  const onResizeRightHor = (event, {element, size, handle}) => {\r\n    if (size.width + widthLeftHor + viewportMinSize < subWindowWidth &&\r\n        size.width > menuMinHorSize) {\r\n      setDimRightHor({widthRightHor: size.width, heightRightHor: size.height});\r\n    }\r\n  };\r\n\r\n  const onResizeRightVer = (event, {element, size, handle}) => {\r\n    if (size.height > menuMinVerSize &&\r\n        subWindowHeight - size.height > menuMinVerSize) {\r\n      setDimRightVer({widthRightVer: size.width, heightRightVer: size.height});\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setDimLeftHor({widthLeftHor: widthLeftHor, heightLeftHor: subWindowHeight});\r\n    setDimRightHor({widthRightHor: widthRightHor,\r\n      heightRightHor: subWindowHeight});\r\n\r\n\r\n    setDimLeftVer({widthLeftVer: widthLeftVer,\r\n      heightLeftVer: subWindowHeight/2});\r\n    setDimRightVer({widthRightVer: widthRightVer,\r\n      heightRightVer: subWindowHeight/2});\r\n  }, [subWindowWidth, subWindowHeight]);\r\n\r\n  useEffect(() => {\r\n    setDimLeftVer({widthLeftVer: widthLeftHor, heightLeftVer: heightLeftVer});\r\n  }, [heightLeftVer, widthLeftHor]);\r\n\r\n  useEffect(() => {\r\n    setDimRightVer({widthRightVer: widthRightHor,\r\n      heightRightVer: heightRightVer});\r\n  }, [heightRightVer, widthRightHor]);\r\n\r\n  useEffect(() => {\r\n    const subWindow = document.querySelector('#resizableMain');\r\n    if (subWindow) {\r\n      setDimSubWindow({subWindowWidth: subWindow.clientWidth,\r\n        subWindowHeight: subWindow.clientHeight});\r\n    }\r\n  }, []);\r\n\r\n  const colorModeCtx = useContext(ColorModeContext);\r\n\r\n  return (\r\n    <RefresherComp>\r\n      <ModalSystem>\r\n        <ModeContext.Provider\r\n          value={{appMode: viewMode, setAppMode: setViewMode}}>\r\n          <EditModeContext.Provider\r\n            value={{editMode: editViewMode, setEditMode: setEditViewMode}}>\r\n            <div\r\n              style={{\r\n                backgroundColor: colorModeCtx?.colorMode.backgroundColor,\r\n                height: '100%',\r\n                display: 'flex',\r\n                flexFlow: 'column',\r\n              }}>\r\n              <MainNavBar/>\r\n              <div\r\n                id=\"resizableMain\"\r\n                style={{\r\n                  position: 'relative',\r\n                  height: '100%',\r\n                  flexGrow: 1,\r\n                }}>\r\n                <Resizable\r\n                  style={{\r\n                    position: 'relative',\r\n                  }}\r\n                  width={widthLeftHor}\r\n                  height={heightLeftHor}\r\n                  resizeHandles={['e']}\r\n                  handle={\r\n                    <div style={{\r\n                      position: 'absolute',\r\n                      right: '0',\r\n                      top: '0',\r\n                      width: '10px',\r\n                      height: '100%',\r\n                      float: 'right',\r\n                    }}>\r\n                    </div>\r\n                  }\r\n                  onResize={onResizeLeftHor}>\r\n                  <div\r\n                    style={{\r\n                      display: 'flex',\r\n                      flexFlow: 'column',\r\n                      width: widthLeftHor + 'px',\r\n                      height: heightLeftHor + 'px',\r\n                    }}>\r\n                    <Resizable\r\n                      style={{\r\n                        position: 'relative',\r\n                      }}\r\n                      width={widthLeftVer}\r\n                      height={heightLeftVer}\r\n                      resizeHandles={['s']}\r\n                      onResize={onResizeLeftVer}\r\n                      handle={\r\n                        <div style={{\r\n                          position: 'absolute',\r\n                          bottom: '0',\r\n                          width: '100%',\r\n                          height: '10px',\r\n                        }}>\r\n                        </div>\r\n                      }>\r\n                      <div\r\n                        style={{\r\n                          width: widthLeftVer + 'px',\r\n                          height: heightLeftVer + 'px',\r\n                        }}>\r\n                        <PanelTitle title='Tools'/>\r\n                        <Element\r\n                          style={{\r\n                            height: heightLeftVer - 40,\r\n                            overflow: 'scroll',\r\n                          }}>\r\n                          <ToolsWindow>\r\n                            <LoremIpsum p={5} />\r\n                          </ToolsWindow>\r\n                        </Element>\r\n                      </div>\r\n                    </Resizable>\r\n                    <div\r\n                      style={{\r\n                        flexGrow: 1,\r\n                      }}>\r\n                      <PanelTitle title='Tool properties'/>\r\n                      <Element\r\n                        style={{\r\n                          height: subWindowHeight - heightLeftVer - 40,\r\n                          overflow: 'scroll',\r\n                        }}\r\n                      >\r\n                        <ToolsPropertiesWindow/>\r\n                      </Element>\r\n                    </div>\r\n                  </div>\r\n                </Resizable>\r\n                <div\r\n                  style={{\r\n                    position: 'absolute',\r\n                    top: '0',\r\n                    height: '100%',\r\n                    width:\r\n                      `calc(100% - ${widthLeftHor}px - ${widthRightHor}px)`,\r\n                    marginLeft: `${widthLeftHor}px`,\r\n                    marginRight: `${widthRightHor}px`,\r\n                    overflow: 'auto',\r\n                    display: 'flex',\r\n                    flexFlow: 'column',\r\n                  }}>\r\n                  <div\r\n                    style={{\r\n                      width: '100%',\r\n                    }}>\r\n                    <ModeNavBar/>\r\n                  </div>\r\n                  <div\r\n                    style={{\r\n                      flexGrow: 1,\r\n                    }}>\r\n                    <Viewport/>\r\n                  </div>\r\n                </div>\r\n                <div>\r\n                  <Resizable\r\n                    style={{\r\n                      position: 'absolute',\r\n                      top: '0',\r\n                      right: '0',\r\n                      float: 'left',\r\n                    }}\r\n                    width={widthRightHor}\r\n                    height={heightRightHor}\r\n                    resizeHandles={['w']}\r\n                    handle={\r\n                      <div style={{\r\n                        position: 'absolute',\r\n                        left: '0',\r\n                        top: '0',\r\n                        width: '10px',\r\n                        height: '100%',\r\n                        float: 'right',\r\n                      }}>\r\n                      </div>\r\n                    }\r\n                    onResize={onResizeRightHor}>\r\n                    <div\r\n                      style={{\r\n                        width: widthRightHor + 'px',\r\n                        height: heightRightHor + 'px',\r\n                      }}>\r\n                      <Resizable\r\n                        style={{\r\n                          position: 'relative',\r\n                        }}\r\n                        width={widthRightVer}\r\n                        height={heightRightVer}\r\n                        resizeHandles={['s']}\r\n                        onResize={onResizeRightVer}\r\n                        handle={\r\n                          <div style={{\r\n                            position: 'absolute',\r\n                            bottom: '0',\r\n                            width: '100%',\r\n                            height: '10px',\r\n                          }}>\r\n                          </div>\r\n                        }>\r\n                        <div\r\n                          style={{\r\n                            width: widthRightVer + 'px',\r\n                            height: heightRightVer + 'px',\r\n                          }}\r\n                        >\r\n                          <PanelTitle title='Navigation tree'/>\r\n                          <Element\r\n                            style={{\r\n                              height: heightRightVer - 40,\r\n                              overflow: 'scroll',\r\n                            }}\r\n                          >\r\n                            <ObjectTreeNodeWindow/>\r\n                          </Element>\r\n                        </div>\r\n                      </Resizable>\r\n                      <div\r\n                        style={{\r\n                          flexGrow: 1,\r\n                        }}>\r\n                        <PanelTitle title='Object properties'/>\r\n                        <Element\r\n                          style={{\r\n                            height: subWindowHeight - heightRightVer - 40,\r\n                            overflow: 'scroll',\r\n                          }}>\r\n                          <ObjectPropertiesWindow/>\r\n                        </Element>\r\n                      </div>\r\n                    </div>\r\n                  </Resizable>\r\n                </div>\r\n              </div>\r\n              <StatusFooter/>\r\n            </div>\r\n          </EditModeContext.Provider>\r\n        </ModeContext.Provider>\r\n      </ModalSystem>\r\n    </RefresherComp>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport Main from 'components/Main';\r\nimport ColorMode, {ColorModeContextInt, ColorModeContextValues,\r\n  injectStyle} from 'contexts/ColorModeContext';\r\nimport {DndProvider} from 'react-dnd';\r\nimport {HTML5Backend} from 'react-dnd-html5-backend';\r\n\r\n/**\r\n * Main App\r\n * @return {JSX.Element}\r\n */\r\nfunction App(): JSX.Element {\r\n  const [colorMode, setColorMode] = useState<ColorModeContextValues>({\r\n    primaryColor: '#ececec',\r\n    backgroundColor: '#787878',\r\n    accentColor: '#bce2e9',\r\n    secondaryColor: '#444444',\r\n  });\r\n\r\n  return (\r\n    <DndProvider backend={HTML5Backend}>\r\n      <ColorMode.Provider value={{colorMode: colorMode, setColorMode}}>\r\n        {injectStyle(colorMode)}\r\n        <Main/>\r\n      </ColorMode.Provider>\r\n    </DndProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}